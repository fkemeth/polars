Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "terms": {"python": [0, 38, 39, 75, 103, 114, 115, 120, 122, 136, 137, 139, 155, 205, 211, 237, 238, 259, 291, 305, 320, 390, 395, 399, 463, 548, 550, 552, 659, 736, 753, 754, 756, 757, 800, 801, 803, 813, 819, 839, 914, 926, 938, 1013, 1017, 1029, 1030, 1031, 1037, 1171, 1245, 1305, 1326, 1349], "api": [0, 103, 134, 155, 211, 291, 305, 552, 775, 813, 914, 1171, 1326, 1349], "refer": [0, 37, 112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 163, 166, 305, 308, 390, 430, 433, 601, 657, 674, 675, 691, 693, 694, 698, 813, 839, 926, 1052, 1055, 1191, 1260, 1261, 1277, 1279, 1280, 1284, 1326, 1330], "datafram": [0, 1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 73, 88, 90, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 137, 138, 141, 142, 153, 303, 304, 308, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 809, 813, 825, 834, 835, 838, 840, 844, 845, 849, 852, 860, 861, 862, 863, 865, 866, 870, 871, 875, 878, 888, 890, 896, 897, 898, 903, 906, 907, 908, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 931, 1007, 1008, 1048, 1073, 1092, 1171, 1189, 1250, 1268, 1269, 1293, 1301, 1302, 1314, 1326, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1353], "lazyfram": [0, 1, 48, 49, 50, 51, 52, 54, 55, 56, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 209, 225, 226, 251, 305, 459, 540, 792, 813, 825, 925, 931, 1334, 1335, 1337, 1339, 1350, 1351, 1353], "seri": [0, 1, 12, 26, 47, 49, 50, 51, 52, 56, 57, 66, 77, 85, 86, 91, 102, 104, 107, 109, 137, 139, 140, 144, 168, 177, 180, 183, 185, 188, 193, 196, 197, 198, 200, 202, 204, 212, 213, 214, 215, 219, 220, 231, 232, 233, 235, 239, 253, 254, 258, 261, 263, 265, 266, 284, 305, 319, 320, 331, 354, 358, 366, 367, 369, 426, 456, 459, 462, 466, 467, 476, 481, 484, 485, 488, 490, 491, 492, 504, 511, 513, 538, 540, 546, 548, 550, 552, 601, 602, 603, 604, 605, 606, 610, 611, 612, 623, 634, 637, 661, 691, 692, 693, 694, 698, 702, 710, 711, 715, 720, 729, 731, 735, 744, 745, 748, 749, 753, 754, 756, 757, 762, 764, 768, 769, 772, 773, 774, 775, 785, 787, 788, 791, 795, 800, 801, 804, 813, 825, 848, 852, 879, 907, 926, 930, 1318, 1320, 1322, 1325, 1327, 1330, 1331, 1332, 1333, 1353], "express": [0, 9, 43, 44, 45, 46, 54, 55, 141, 144, 148, 158, 173, 175, 177, 187, 190, 211, 222, 226, 236, 241, 242, 246, 250, 262, 267, 268, 278, 279, 281, 283, 291, 305, 313, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 330, 331, 335, 336, 337, 338, 339, 342, 353, 358, 359, 360, 361, 362, 364, 370, 373, 374, 375, 376, 387, 388, 389, 390, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 453, 455, 456, 458, 459, 463, 465, 466, 468, 469, 470, 471, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 497, 498, 502, 503, 505, 506, 507, 510, 511, 517, 519, 539, 540, 546, 547, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 587, 589, 590, 594, 595, 596, 597, 598, 600, 604, 605, 606, 608, 609, 632, 633, 634, 636, 638, 640, 641, 643, 645, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 674, 675, 680, 681, 682, 683, 692, 696, 705, 706, 707, 710, 712, 713, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 777, 779, 782, 784, 785, 787, 788, 789, 790, 791, 793, 795, 797, 799, 800, 801, 803, 804, 809, 812, 825, 829, 834, 835, 843, 844, 845, 848, 851, 854, 875, 881, 882, 885, 886, 887, 889, 895, 901, 902, 903, 905, 906, 914, 926, 930, 931, 955, 990, 1006, 1013, 1016, 1017, 1034, 1073, 1079, 1097, 1129, 1130, 1133, 1171, 1195, 1215, 1221, 1222, 1235, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1260, 1261, 1278, 1282, 1326, 1343, 1345, 1346], "selector": [0, 37, 159, 167, 169, 173, 217, 224, 226, 260, 262, 267, 270, 272, 305, 453, 459, 558, 813, 825, 831, 840, 841, 844, 870, 896, 926], "function": [0, 37, 38, 40, 47, 48, 49, 50, 51, 52, 55, 64, 66, 85, 86, 103, 107, 109, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 134, 137, 138, 139, 140, 142, 151, 153, 155, 156, 163, 166, 172, 180, 211, 217, 225, 226, 230, 251, 262, 263, 264, 267, 269, 272, 273, 285, 291, 305, 316, 320, 354, 387, 388, 390, 427, 449, 451, 452, 474, 540, 548, 549, 550, 552, 564, 574, 575, 590, 594, 598, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 714, 725, 729, 730, 741, 743, 744, 745, 748, 749, 750, 751, 761, 762, 764, 766, 767, 770, 773, 774, 775, 778, 780, 783, 784, 785, 787, 789, 790, 792, 794, 798, 802, 804, 809, 813, 825, 835, 839, 845, 865, 866, 870, 874, 877, 883, 890, 898, 905, 908, 914, 926, 930, 938, 971, 985, 1006, 1007, 1049, 1071, 1072, 1074, 1075, 1092, 1163, 1171, 1189, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1217, 1224, 1229, 1304, 1305, 1307, 1309, 1326, 1340, 1341, 1342, 1343, 1345, 1347, 1349, 1351, 1352, 1353], "data": [0, 1, 2, 11, 19, 20, 22, 29, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 61, 62, 63, 65, 74, 75, 77, 78, 86, 91, 92, 99, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 155, 161, 170, 173, 174, 186, 187, 188, 189, 190, 191, 192, 205, 206, 207, 209, 211, 224, 225, 229, 235, 236, 237, 238, 240, 248, 257, 262, 263, 264, 267, 269, 278, 282, 303, 305, 316, 317, 318, 322, 323, 324, 325, 326, 327, 330, 333, 334, 335, 336, 337, 339, 342, 344, 345, 346, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 365, 366, 370, 373, 374, 375, 376, 388, 389, 390, 395, 396, 397, 398, 401, 402, 403, 405, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 455, 466, 468, 469, 470, 474, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 497, 498, 502, 503, 505, 511, 517, 519, 527, 539, 541, 547, 552, 584, 585, 589, 590, 598, 600, 601, 604, 605, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 640, 641, 642, 648, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 680, 681, 682, 683, 691, 692, 693, 694, 696, 698, 701, 712, 713, 714, 717, 718, 721, 724, 729, 731, 741, 752, 753, 754, 755, 756, 757, 758, 768, 769, 771, 772, 773, 774, 775, 785, 788, 799, 800, 801, 804, 809, 813, 825, 832, 833, 834, 835, 839, 842, 844, 845, 851, 852, 853, 854, 855, 856, 874, 879, 880, 901, 926, 935, 936, 948, 950, 951, 952, 953, 954, 956, 958, 959, 970, 972, 974, 975, 976, 980, 981, 983, 989, 990, 993, 1007, 1008, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1073, 1077, 1078, 1092, 1099, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1123, 1124, 1125, 1126, 1128, 1134, 1140, 1142, 1150, 1162, 1164, 1171, 1183, 1189, 1191, 1195, 1196, 1198, 1199, 1211, 1213, 1224, 1229, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1266, 1267, 1268, 1269, 1277, 1278, 1279, 1280, 1282, 1284, 1287, 1305, 1306, 1307, 1308, 1311, 1316, 1325, 1326, 1334, 1340, 1346, 1350, 1352], "type": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 102, 104, 105, 106, 107, 108, 110, 114, 115, 116, 118, 119, 123, 124, 125, 126, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 156, 170, 173, 180, 186, 188, 189, 191, 192, 193, 206, 207, 211, 235, 240, 257, 262, 263, 266, 267, 270, 281, 305, 316, 318, 322, 323, 324, 325, 326, 327, 330, 335, 336, 337, 339, 342, 353, 354, 358, 359, 360, 361, 362, 365, 366, 367, 370, 373, 374, 375, 376, 388, 389, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 453, 455, 466, 469, 472, 479, 480, 481, 482, 483, 484, 485, 486, 487, 498, 502, 503, 505, 511, 517, 519, 539, 540, 550, 552, 598, 600, 604, 605, 606, 608, 609, 610, 640, 641, 648, 651, 652, 653, 654, 656, 657, 658, 659, 661, 664, 665, 666, 680, 681, 682, 683, 691, 692, 696, 712, 713, 714, 721, 729, 731, 741, 752, 753, 754, 755, 756, 757, 758, 760, 768, 769, 771, 772, 773, 774, 775, 785, 788, 799, 800, 801, 804, 809, 813, 825, 834, 835, 842, 843, 844, 845, 852, 853, 855, 856, 860, 875, 879, 880, 887, 896, 905, 926, 935, 936, 948, 950, 951, 952, 953, 954, 956, 958, 959, 970, 971, 972, 974, 975, 976, 980, 981, 983, 990, 1007, 1008, 1013, 1014, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1073, 1077, 1090, 1099, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1123, 1124, 1125, 1126, 1128, 1134, 1140, 1142, 1162, 1163, 1183, 1189, 1195, 1196, 1198, 1199, 1224, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1250, 1251, 1252, 1266, 1267, 1268, 1269, 1277, 1278, 1282, 1305, 1306, 1308, 1317, 1326, 1334, 1340, 1347, 1350], "input": [0, 48, 54, 105, 107, 114, 115, 158, 167, 187, 190, 211, 215, 224, 230, 241, 242, 246, 250, 254, 268, 278, 279, 283, 305, 313, 364, 370, 450, 453, 465, 479, 544, 550, 551, 552, 562, 590, 605, 645, 661, 680, 687, 688, 689, 690, 692, 705, 716, 724, 726, 728, 729, 731, 734, 737, 738, 739, 747, 751, 758, 760, 768, 769, 772, 773, 774, 775, 777, 779, 782, 791, 795, 797, 803, 813, 825, 829, 840, 851, 854, 877, 881, 882, 883, 885, 889, 895, 901, 902, 906, 926, 930, 990, 1073, 1097, 1167, 1168, 1171, 1195, 1221, 1247, 1266, 1278, 1326, 1345, 1346, 1348], "output": [0, 9, 31, 34, 37, 38, 39, 40, 41, 43, 156, 158, 165, 188, 189, 191, 192, 205, 211, 215, 218, 224, 226, 235, 237, 241, 243, 254, 268, 274, 278, 305, 316, 318, 320, 342, 363, 364, 388, 450, 517, 540, 548, 549, 550, 552, 561, 564, 574, 598, 610, 617, 621, 624, 628, 648, 666, 715, 716, 721, 725, 726, 727, 728, 729, 739, 740, 753, 754, 773, 774, 775, 813, 825, 829, 838, 843, 852, 853, 855, 856, 865, 866, 870, 871, 879, 881, 883, 895, 901, 908, 914, 926, 935, 936, 938, 959, 1007, 1073, 1140, 1171, 1189, 1234, 1252, 1314, 1326], "config": [0, 48, 165, 241, 262, 278, 305, 650, 676, 754, 757, 758, 825, 834, 838, 881, 901, 926, 1236, 1262], "extend": [0, 105, 276, 305, 456, 813, 825, 930, 937, 1079, 1326], "plugin": [0, 813, 825], "sql": [0, 35, 116, 117, 207, 246, 305, 349, 532, 635, 771, 793, 813, 825, 885, 926, 966, 1155, 1221, 1326, 1334, 1338, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1351, 1352], "interfac": [0, 825, 1350], "except": [0, 137, 194, 208, 210, 255, 305, 661, 692, 760, 825, 861, 926, 931, 1091, 1122, 1247, 1278, 1295, 1306, 1316, 1326], "test": [0, 2, 35, 116, 117, 119, 125, 305, 825, 857, 864, 926], "metadata": [0, 130, 188, 189, 191, 192, 235, 305, 825, 852, 853, 855, 856, 879, 926], "These": [1, 37, 111, 116, 117, 153, 269, 305, 441, 812, 813, 930, 1049, 1063], "allow": [1, 9, 36, 37, 43, 44, 45, 46, 47, 86, 91, 103, 116, 119, 128, 131, 132, 133, 134, 141, 144, 145, 148, 155, 205, 208, 209, 236, 237, 239, 263, 264, 267, 270, 282, 305, 423, 430, 433, 527, 550, 552, 558, 603, 632, 691, 693, 694, 813, 860, 861, 865, 866, 870, 896, 903, 926, 930, 931, 1045, 1052, 1055, 1150, 1171, 1193, 1213, 1216, 1277, 1279, 1280, 1306, 1307, 1326, 1353], "you": [1, 11, 15, 37, 42, 46, 48, 55, 56, 102, 104, 105, 106, 107, 108, 114, 115, 116, 117, 119, 120, 123, 124, 128, 132, 134, 153, 174, 188, 189, 191, 192, 204, 205, 211, 222, 226, 235, 236, 237, 238, 251, 259, 262, 269, 291, 305, 308, 395, 419, 420, 423, 426, 427, 430, 433, 441, 450, 453, 459, 479, 510, 540, 550, 552, 603, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 650, 665, 674, 675, 676, 702, 736, 744, 753, 758, 762, 775, 785, 788, 792, 804, 813, 835, 841, 852, 853, 855, 856, 857, 864, 879, 887, 890, 914, 926, 930, 931, 1013, 1041, 1042, 1048, 1049, 1052, 1055, 1063, 1078, 1097, 1133, 1171, 1193, 1236, 1251, 1260, 1261, 1262, 1280, 1304, 1316, 1326, 1330, 1339, 1353], "regist": [1, 49, 50, 51, 52, 147, 149, 251, 305, 813, 890, 926, 930, 1334, 1336, 1337, 1338, 1339, 1350], "custom": [1, 28, 36, 37, 49, 50, 51, 52, 147, 149, 156, 165, 211, 226, 285, 291, 305, 320, 354, 395, 430, 433, 540, 548, 550, 552, 611, 612, 721, 729, 736, 773, 774, 775, 813, 838, 865, 866, 908, 914, 926, 938, 971, 1013, 1052, 1055, 1163, 1171, 1200, 1201, 1314, 1326, 1353], "dedic": [1, 103, 205, 237, 305, 931], "namespac": [1, 116, 304, 305, 702, 792, 812, 825, 925, 1326, 1353], "underli": [1, 47, 62, 63, 65, 78, 86, 89, 95, 102, 104, 105, 106, 108, 116, 117, 119, 123, 124, 126, 132, 141, 144, 148, 173, 174, 205, 206, 237, 257, 263, 305, 359, 397, 398, 399, 403, 407, 409, 410, 411, 413, 414, 416, 418, 421, 424, 425, 426, 428, 442, 443, 444, 445, 603, 630, 649, 653, 660, 813, 844, 926, 931, 975, 984, 1015, 1016, 1017, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1048, 1050, 1064, 1065, 1066, 1067, 1078, 1193, 1211, 1224, 1235, 1239, 1246, 1300, 1306, 1326], "polar": [1, 305, 308, 812, 813, 819, 825, 926, 930, 931, 1326, 1330, 1349, 1350], "class": [1, 18, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 94, 141, 142, 238, 305, 800, 809, 813, 819, 825, 926, 1305, 1326, 1350], "without": [1, 38, 43, 44, 45, 46, 53, 54, 55, 64, 66, 109, 118, 121, 126, 127, 129, 130, 133, 134, 251, 262, 263, 267, 272, 273, 305, 320, 387, 388, 427, 474, 552, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 650, 676, 741, 789, 790, 791, 792, 813, 834, 835, 890, 898, 926, 982, 985, 1006, 1007, 1049, 1092, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1236, 1262, 1304, 1305, 1306, 1309, 1326, 1352], "requir": [1, 36, 37, 48, 107, 116, 117, 137, 138, 139, 140, 158, 163, 236, 262, 263, 264, 267, 268, 305, 355, 449, 451, 452, 541, 552, 590, 614, 616, 618, 620, 622, 625, 627, 629, 637, 691, 693, 694, 718, 788, 813, 829, 836, 842, 889, 895, 900, 926, 972, 1070, 1072, 1074, 1075, 1164, 1223, 1277, 1279, 1280, 1306, 1307, 1311, 1326, 1330], "subclass": [1, 305], "mixin": 1, "expr": [1, 48, 49, 50, 51, 52, 173, 175, 176, 207, 208, 222, 226, 236, 241, 242, 262, 267, 278, 279, 305, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 813, 814, 815, 818, 819, 820, 821, 822, 844, 846, 847, 860, 861, 876, 881, 882, 886, 901, 902, 926, 930, 931, 1006, 1013, 1016, 1017, 1034, 1045, 1063, 1073, 1080, 1081, 1085, 1129, 1133, 1139, 1156, 1160, 1222, 1235, 1241, 1246, 1270, 1296, 1326], "ar": [1, 11, 12, 18, 21, 31, 34, 36, 37, 43, 44, 45, 46, 47, 48, 55, 56, 85, 86, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 144, 145, 146, 148, 153, 155, 158, 163, 165, 169, 172, 175, 177, 179, 180, 186, 187, 188, 189, 190, 191, 192, 205, 207, 208, 209, 211, 217, 218, 224, 226, 235, 236, 237, 238, 241, 242, 244, 246, 250, 258, 262, 263, 264, 267, 268, 273, 274, 278, 279, 282, 283, 305, 316, 318, 333, 349, 354, 363, 364, 370, 378, 380, 381, 395, 427, 441, 446, 448, 449, 450, 451, 452, 457, 459, 479, 481, 484, 485, 488, 490, 491, 492, 495, 500, 532, 540, 550, 551, 585, 590, 598, 601, 604, 605, 606, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 639, 642, 644, 645, 659, 661, 662, 664, 671, 672, 673, 674, 675, 680, 692, 696, 701, 705, 708, 715, 716, 725, 726, 728, 734, 737, 738, 739, 740, 743, 747, 751, 753, 754, 756, 757, 777, 779, 782, 791, 795, 797, 800, 801, 803, 805, 806, 808, 812, 813, 814, 815, 818, 819, 820, 821, 822, 825, 829, 834, 835, 838, 841, 845, 846, 848, 851, 852, 853, 854, 855, 856, 857, 860, 861, 864, 866, 870, 871, 875, 877, 879, 881, 882, 884, 885, 889, 895, 898, 901, 902, 903, 906, 926, 930, 931, 935, 936, 950, 966, 971, 982, 990, 1000, 1001, 1013, 1049, 1063, 1069, 1071, 1072, 1073, 1074, 1075, 1080, 1082, 1083, 1089, 1097, 1101, 1105, 1106, 1110, 1111, 1112, 1113, 1120, 1123, 1155, 1163, 1189, 1191, 1195, 1196, 1207, 1221, 1226, 1229, 1245, 1247, 1248, 1257, 1258, 1259, 1260, 1261, 1266, 1278, 1280, 1282, 1287, 1294, 1304, 1306, 1307, 1316, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333, 1339, 1343, 1353], "all": [1, 5, 9, 14, 18, 21, 26, 31, 34, 36, 37, 43, 48, 54, 61, 94, 102, 107, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 132, 141, 142, 145, 148, 153, 157, 159, 165, 169, 176, 194, 200, 202, 204, 205, 206, 207, 209, 210, 215, 217, 221, 222, 226, 229, 236, 237, 238, 242, 249, 250, 254, 255, 260, 262, 263, 267, 270, 272, 273, 274, 279, 281, 305, 317, 319, 342, 357, 364, 376, 387, 393, 394, 395, 396, 453, 458, 464, 471, 472, 475, 477, 481, 485, 491, 492, 494, 498, 509, 510, 517, 536, 540, 549, 550, 570, 573, 574, 576, 577, 578, 579, 580, 581, 588, 596, 601, 605, 607, 612, 637, 643, 645, 651, 652, 658, 659, 661, 664, 669, 675, 679, 685, 686, 687, 688, 692, 707, 716, 726, 736, 744, 745, 746, 747, 750, 751, 753, 760, 762, 767, 768, 771, 779, 787, 795, 796, 797, 803, 813, 819, 825, 828, 831, 834, 835, 838, 841, 843, 845, 847, 860, 865, 866, 870, 875, 882, 887, 888, 889, 896, 898, 902, 903, 905, 926, 931, 959, 1006, 1008, 1011, 1012, 1013, 1014, 1091, 1099, 1117, 1122, 1132, 1133, 1140, 1159, 1163, 1191, 1195, 1201, 1230, 1237, 1238, 1244, 1245, 1247, 1250, 1255, 1261, 1265, 1271, 1272, 1273, 1274, 1278, 1295, 1306, 1326, 1336, 1341, 1342, 1346, 1349, 1350, 1352, 1353], "support": [1, 35, 36, 37, 42, 56, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 133, 141, 145, 148, 153, 205, 206, 207, 208, 212, 214, 219, 237, 238, 249, 250, 253, 259, 264, 267, 305, 450, 533, 590, 605, 606, 643, 645, 661, 674, 675, 676, 680, 692, 809, 813, 819, 860, 861, 888, 889, 926, 931, 1073, 1156, 1195, 1196, 1230, 1247, 1260, 1261, 1262, 1266, 1278, 1307, 1309, 1326, 1347, 1349, 1350], "target": [1, 35, 36, 37, 53, 119, 267, 305, 657, 691, 693, 694, 931, 1243, 1277, 1279, 1280, 1346], "thi": [1, 2, 5, 11, 13, 15, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 62, 63, 64, 65, 66, 78, 86, 102, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 156, 157, 158, 161, 163, 165, 169, 172, 174, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 224, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 246, 247, 249, 251, 252, 253, 256, 257, 259, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 278, 279, 280, 281, 285, 286, 291, 304, 305, 316, 319, 320, 321, 330, 342, 348, 349, 350, 355, 363, 364, 366, 367, 370, 382, 383, 384, 385, 386, 387, 388, 390, 396, 397, 410, 419, 420, 423, 426, 427, 430, 433, 441, 444, 448, 450, 455, 465, 472, 474, 476, 477, 479, 482, 484, 486, 489, 494, 506, 510, 511, 517, 520, 527, 528, 529, 530, 531, 532, 534, 538, 540, 541, 545, 546, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 590, 596, 598, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 635, 636, 637, 638, 643, 644, 645, 648, 650, 651, 657, 662, 663, 667, 668, 669, 670, 671, 672, 673, 676, 678, 679, 685, 686, 687, 688, 689, 690, 695, 701, 703, 705, 707, 710, 711, 715, 716, 718, 719, 720, 721, 725, 729, 730, 738, 741, 743, 744, 748, 749, 750, 751, 761, 762, 764, 766, 767, 770, 771, 773, 775, 778, 780, 783, 784, 785, 789, 790, 791, 792, 794, 798, 802, 803, 804, 809, 813, 825, 828, 829, 830, 833, 834, 835, 836, 838, 839, 841, 842, 843, 845, 851, 852, 853, 854, 855, 856, 858, 860, 861, 865, 866, 870, 871, 875, 877, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 908, 909, 914, 925, 926, 930, 931, 937, 938, 947, 959, 965, 966, 967, 972, 979, 981, 983, 984, 985, 990, 993, 1002, 1003, 1004, 1005, 1006, 1007, 1014, 1015, 1017, 1028, 1041, 1042, 1045, 1048, 1049, 1052, 1055, 1063, 1066, 1068, 1071, 1073, 1077, 1078, 1086, 1087, 1090, 1092, 1098, 1102, 1104, 1105, 1107, 1108, 1114, 1116, 1118, 1119, 1129, 1133, 1134, 1140, 1143, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1161, 1164, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1184, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1230, 1231, 1233, 1234, 1236, 1237, 1243, 1248, 1249, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1264, 1265, 1271, 1272, 1273, 1274, 1280, 1281, 1287, 1288, 1290, 1293, 1294, 1296, 1297, 1300, 1302, 1304, 1305, 1306, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1326, 1330, 1334, 1335, 1339, 1349, 1350, 1351, 1353], "featur": [1, 42, 53, 64, 66, 262, 267, 305], "i": [1, 2, 13, 15, 18, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 62, 63, 64, 65, 66, 78, 86, 88, 90, 91, 93, 98, 100, 102, 103, 104, 105, 106, 107, 108, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 157, 158, 161, 165, 169, 171, 172, 174, 177, 181, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 203, 205, 206, 207, 208, 209, 210, 211, 214, 217, 218, 222, 224, 225, 226, 233, 235, 236, 237, 238, 239, 242, 243, 246, 249, 250, 251, 252, 253, 255, 257, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 279, 281, 282, 291, 304, 305, 313, 316, 318, 319, 320, 321, 331, 334, 341, 342, 349, 354, 363, 387, 388, 393, 394, 395, 396, 399, 409, 419, 420, 423, 427, 430, 441, 449, 450, 451, 452, 455, 459, 463, 472, 474, 476, 479, 495, 501, 509, 510, 513, 515, 517, 527, 532, 533, 535, 538, 540, 542, 545, 550, 552, 556, 558, 560, 561, 562, 564, 572, 590, 598, 601, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 638, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 674, 675, 676, 679, 680, 683, 685, 686, 687, 688, 691, 692, 693, 694, 696, 698, 701, 705, 715, 716, 721, 722, 725, 726, 727, 728, 730, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 753, 754, 756, 757, 762, 766, 767, 768, 769, 771, 772, 775, 778, 780, 783, 785, 788, 789, 790, 791, 792, 794, 798, 800, 801, 802, 803, 804, 809, 813, 828, 829, 830, 833, 834, 835, 838, 841, 843, 845, 848, 851, 852, 853, 854, 855, 856, 859, 860, 861, 863, 865, 866, 870, 871, 875, 879, 882, 883, 885, 887, 888, 889, 890, 891, 895, 896, 898, 899, 902, 905, 908, 914, 926, 930, 931, 935, 936, 937, 938, 951, 958, 959, 966, 971, 982, 985, 990, 993, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1017, 1027, 1045, 1049, 1052, 1063, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1082, 1089, 1090, 1091, 1092, 1097, 1098, 1100, 1107, 1114, 1115, 1116, 1118, 1119, 1120, 1122, 1124, 1132, 1133, 1136, 1138, 1140, 1150, 1155, 1156, 1161, 1163, 1171, 1189, 1191, 1193, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1219, 1221, 1225, 1226, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1265, 1266, 1269, 1271, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 1282, 1284, 1287, 1295, 1300, 1304, 1306, 1307, 1309, 1314, 1315, 1316, 1326, 1334, 1339, 1343, 1346, 1347, 1350, 1351, 1353], "primarili": 1, "intend": [1, 119, 137, 138, 139, 140, 701, 983, 1287], "us": [1, 8, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 36, 37, 40, 42, 43, 46, 47, 48, 54, 55, 56, 63, 77, 85, 86, 103, 105, 106, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 156, 157, 158, 159, 165, 167, 169, 175, 176, 177, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 205, 206, 208, 211, 212, 214, 217, 219, 221, 222, 224, 225, 226, 231, 235, 236, 237, 238, 239, 241, 242, 247, 250, 251, 252, 253, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 278, 279, 280, 281, 283, 291, 305, 308, 314, 316, 318, 320, 321, 330, 331, 354, 359, 360, 363, 364, 367, 371, 372, 387, 390, 393, 394, 402, 404, 408, 412, 415, 417, 422, 426, 427, 429, 430, 433, 441, 444, 446, 449, 450, 451, 452, 453, 457, 458, 459, 463, 474, 477, 478, 479, 495, 510, 527, 535, 540, 542, 550, 551, 552, 555, 573, 576, 578, 580, 581, 590, 598, 601, 603, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 634, 636, 637, 642, 644, 645, 647, 649, 650, 653, 654, 655, 656, 657, 658, 660, 665, 666, 674, 675, 676, 680, 682, 684, 687, 688, 689, 690, 691, 693, 694, 698, 701, 702, 705, 715, 716, 722, 723, 725, 726, 727, 728, 730, 734, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 762, 764, 768, 769, 771, 772, 775, 776, 777, 779, 781, 782, 785, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 809, 812, 813, 824, 825, 828, 829, 830, 831, 834, 835, 838, 839, 840, 841, 843, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 861, 863, 864, 870, 879, 881, 882, 886, 889, 890, 891, 895, 896, 898, 899, 901, 902, 904, 905, 906, 914, 926, 931, 935, 936, 938, 967, 971, 975, 976, 983, 985, 991, 992, 1006, 1007, 1008, 1011, 1012, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1052, 1055, 1063, 1066, 1069, 1072, 1073, 1074, 1075, 1080, 1081, 1085, 1089, 1092, 1095, 1096, 1097, 1098, 1104, 1107, 1114, 1116, 1118, 1120, 1133, 1150, 1157, 1163, 1170, 1171, 1189, 1191, 1193, 1196, 1198, 1199, 1201, 1213, 1214, 1217, 1219, 1222, 1223, 1229, 1231, 1233, 1235, 1236, 1239, 1240, 1242, 1243, 1244, 1246, 1251, 1252, 1260, 1261, 1262, 1266, 1268, 1277, 1279, 1280, 1284, 1287, 1296, 1301, 1303, 1305, 1306, 1307, 1315, 1316, 1326, 1330, 1334, 1335, 1336, 1337, 1339, 1340, 1350, 1353], "librari": [1, 95, 116, 119, 550, 813, 930, 1353], "author": 1, "domain": [1, 658, 1244], "specif": [1, 31, 36, 37, 102, 104, 106, 108, 114, 117, 118, 119, 123, 124, 125, 129, 159, 205, 207, 262, 305, 430, 433, 691, 693, 694, 698, 721, 813, 831, 860, 926, 931, 1052, 1055, 1277, 1279, 1280, 1284, 1304, 1314, 1326, 1340, 1353], "capabl": [1, 37, 305], "which": [1, 7, 11, 21, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 105, 107, 114, 115, 116, 117, 118, 119, 125, 126, 128, 129, 130, 133, 137, 138, 144, 147, 149, 158, 159, 165, 169, 174, 175, 187, 188, 189, 190, 191, 192, 198, 208, 235, 243, 262, 263, 268, 270, 274, 305, 316, 354, 395, 423, 427, 430, 441, 450, 456, 479, 481, 485, 488, 490, 491, 492, 540, 550, 552, 562, 564, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 673, 696, 736, 753, 754, 756, 757, 758, 800, 801, 803, 813, 829, 831, 838, 841, 843, 852, 853, 855, 856, 861, 879, 883, 895, 896, 926, 931, 971, 1013, 1045, 1049, 1052, 1063, 1073, 1078, 1079, 1097, 1101, 1106, 1110, 1111, 1112, 1113, 1163, 1217, 1259, 1282, 1304, 1306, 1326, 1340, 1350, 1353], "mai": [1, 36, 38, 43, 44, 45, 46, 54, 55, 56, 64, 66, 102, 104, 105, 106, 108, 114, 115, 116, 118, 120, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 137, 139, 165, 172, 174, 188, 208, 211, 235, 247, 251, 262, 264, 267, 272, 273, 274, 305, 320, 387, 388, 395, 396, 397, 410, 423, 427, 430, 433, 441, 453, 474, 513, 538, 540, 550, 552, 561, 598, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 662, 663, 665, 736, 744, 745, 748, 749, 753, 754, 756, 757, 762, 787, 789, 790, 792, 800, 801, 813, 834, 835, 838, 845, 852, 861, 865, 866, 879, 886, 890, 898, 904, 905, 908, 914, 926, 984, 985, 1006, 1007, 1008, 1013, 1014, 1015, 1028, 1045, 1049, 1052, 1055, 1063, 1071, 1078, 1092, 1136, 1171, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1222, 1248, 1249, 1251, 1280, 1304, 1307, 1309, 1326, 1353], "exist": [1, 35, 36, 37, 48, 90, 118, 129, 144, 269, 273, 278, 279, 305, 315, 358, 361, 362, 399, 426, 551, 813, 877, 898, 901, 902, 926, 931, 1017, 1048, 1170, 1326, 1352], "belong": [1, 188, 305, 852, 926], "core": [1, 305, 1353], "cannot": [1, 91, 92, 114, 115, 119, 120, 122, 125, 126, 150, 211, 238, 239, 263, 281, 291, 305, 359, 453, 527, 552, 632, 653, 682, 704, 775, 813, 887, 905, 914, 926, 931, 975, 1150, 1171, 1213, 1239, 1268, 1306, 1326], "overrid": [1, 37, 102, 104, 105, 106, 107, 108, 114, 116, 117, 119, 123, 124, 125, 141, 142, 148, 150, 305, 551, 813, 926, 1170, 1326], "str": [1, 3, 4, 6, 7, 10, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 63, 66, 102, 103, 104, 105, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 147, 148, 149, 153, 158, 159, 162, 165, 166, 167, 168, 169, 170, 172, 173, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 191, 192, 194, 196, 200, 202, 203, 205, 207, 208, 212, 214, 216, 217, 218, 219, 221, 222, 224, 226, 228, 230, 231, 233, 234, 235, 236, 237, 239, 240, 243, 244, 247, 249, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 313, 314, 315, 337, 342, 354, 358, 359, 360, 361, 362, 364, 366, 377, 388, 390, 392, 400, 423, 426, 427, 430, 433, 441, 450, 453, 459, 461, 465, 466, 469, 476, 479, 504, 505, 515, 516, 517, 533, 537, 540, 549, 552, 561, 563, 564, 565, 567, 574, 575, 576, 577, 578, 579, 580, 581, 587, 590, 594, 596, 598, 604, 605, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 644, 645, 702, 703, 704, 707, 716, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 809, 813, 820, 829, 831, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 848, 851, 852, 853, 855, 856, 858, 860, 861, 870, 871, 875, 877, 878, 879, 880, 883, 884, 886, 887, 888, 889, 890, 895, 896, 897, 898, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 931, 934, 954, 959, 971, 976, 980, 981, 1007, 1008, 1018, 1045, 1048, 1049, 1052, 1055, 1063, 1073, 1081, 1127, 1128, 1129, 1140, 1163, 1180, 1181, 1189, 1194, 1195, 1217, 1218, 1288, 1290, 1291, 1301, 1302, 1303, 1304, 1314, 1326, 1331, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1346, 1347, 1350, 1351, 1353], "dt": [1, 48, 119, 125, 235, 274, 305, 610, 758, 813, 822, 879, 926, 931, 1333, 1347], "attempt": [1, 390, 813, 839, 926], "do": [1, 37, 43, 44, 45, 46, 48, 54, 55, 104, 105, 108, 114, 128, 137, 138, 139, 140, 165, 174, 188, 189, 191, 192, 204, 207, 208, 226, 235, 257, 269, 272, 305, 387, 395, 510, 550, 610, 686, 687, 688, 785, 788, 804, 813, 830, 834, 835, 838, 843, 852, 853, 855, 856, 861, 865, 866, 875, 879, 887, 926, 931, 1006, 1013, 1078, 1133, 1272, 1273, 1274, 1309, 1316, 1326], "so": [1, 116, 117, 128, 150, 186, 188, 189, 191, 192, 226, 235, 305, 331, 341, 390, 463, 479, 515, 540, 552, 610, 674, 675, 676, 686, 687, 688, 702, 813, 839, 852, 853, 855, 856, 879, 926, 931, 958, 1138, 1260, 1261, 1262, 1272, 1273, 1274], "rais": [1, 16, 17, 21, 36, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 114, 115, 119, 125, 128, 137, 139, 155, 226, 236, 263, 305, 341, 359, 395, 426, 427, 441, 513, 515, 538, 561, 598, 649, 653, 660, 673, 691, 693, 694, 696, 698, 755, 772, 813, 958, 975, 1013, 1048, 1049, 1063, 1136, 1138, 1161, 1189, 1235, 1239, 1246, 1259, 1277, 1279, 1280, 1282, 1284, 1306, 1316, 1326], "an": [1, 31, 34, 35, 36, 37, 43, 44, 45, 49, 51, 52, 64, 65, 86, 89, 91, 92, 95, 97, 102, 104, 105, 108, 114, 115, 116, 117, 118, 119, 121, 125, 128, 130, 131, 142, 144, 148, 159, 160, 161, 172, 175, 180, 188, 189, 191, 192, 204, 205, 206, 208, 211, 222, 226, 232, 233, 235, 236, 240, 251, 257, 263, 267, 269, 272, 273, 278, 281, 291, 305, 315, 338, 341, 353, 359, 365, 371, 372, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 399, 400, 423, 426, 430, 444, 450, 458, 459, 465, 466, 469, 494, 506, 507, 510, 513, 515, 538, 539, 540, 549, 550, 552, 562, 564, 573, 574, 597, 598, 606, 610, 611, 613, 615, 617, 619, 621, 624, 626, 628, 649, 653, 658, 660, 662, 691, 693, 694, 696, 698, 710, 717, 725, 731, 735, 753, 754, 756, 757, 759, 761, 764, 768, 769, 770, 771, 772, 784, 785, 787, 788, 791, 795, 800, 801, 803, 804, 809, 813, 831, 832, 833, 835, 836, 838, 842, 843, 845, 848, 852, 853, 855, 856, 861, 866, 875, 879, 880, 887, 890, 898, 900, 901, 903, 905, 914, 926, 930, 931, 955, 958, 970, 975, 980, 989, 991, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1013, 1017, 1052, 1066, 1071, 1073, 1107, 1119, 1129, 1130, 1133, 1136, 1138, 1161, 1162, 1171, 1196, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1214, 1217, 1235, 1239, 1244, 1246, 1248, 1277, 1279, 1280, 1282, 1284, 1306, 1316, 1326, 1342, 1343, 1346, 1347, 1349, 1350, 1352], "attributeerror": 1, "howev": [1, 105, 116, 172, 211, 263, 305, 1071, 1326], "can": [1, 15, 28, 37, 42, 47, 48, 54, 55, 62, 63, 65, 77, 85, 86, 105, 114, 115, 116, 119, 120, 125, 126, 128, 131, 133, 134, 142, 143, 144, 148, 150, 153, 158, 160, 169, 170, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 211, 222, 226, 235, 237, 238, 241, 250, 262, 263, 267, 268, 269, 272, 278, 281, 291, 305, 308, 316, 320, 354, 364, 378, 381, 387, 390, 395, 419, 420, 423, 426, 427, 430, 433, 441, 450, 456, 459, 479, 494, 510, 540, 550, 552, 558, 561, 564, 570, 573, 574, 576, 578, 580, 581, 590, 596, 598, 603, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 637, 639, 642, 645, 650, 659, 664, 674, 675, 676, 686, 687, 688, 691, 702, 707, 716, 734, 736, 752, 755, 762, 764, 768, 769, 775, 792, 803, 809, 812, 813, 824, 829, 830, 834, 835, 836, 839, 841, 842, 843, 845, 852, 853, 855, 856, 879, 880, 881, 883, 887, 889, 890, 895, 900, 901, 904, 905, 926, 931, 938, 971, 1006, 1007, 1013, 1041, 1042, 1045, 1048, 1049, 1052, 1055, 1063, 1073, 1079, 1097, 1133, 1163, 1171, 1176, 1189, 1193, 1195, 1214, 1217, 1219, 1223, 1226, 1229, 1236, 1237, 1238, 1245, 1250, 1260, 1261, 1262, 1272, 1273, 1274, 1277, 1280, 1304, 1305, 1306, 1326, 1330, 1339, 1350], "other": [1, 21, 33, 37, 38, 42, 55, 113, 114, 115, 116, 119, 128, 137, 138, 139, 140, 169, 171, 174, 177, 181, 207, 208, 217, 218, 236, 238, 241, 242, 267, 273, 276, 278, 279, 303, 305, 313, 317, 319, 330, 331, 370, 392, 447, 448, 459, 463, 468, 470, 479, 484, 497, 504, 528, 529, 530, 531, 547, 556, 560, 569, 571, 584, 585, 589, 605, 645, 705, 706, 714, 717, 724, 726, 728, 734, 737, 738, 739, 747, 751, 753, 758, 777, 779, 782, 791, 795, 797, 813, 825, 835, 841, 848, 860, 861, 870, 871, 881, 882, 898, 901, 902, 903, 926, 931, 937, 990, 1010, 1070, 1078, 1105, 1127, 1151, 1152, 1153, 1154, 1195, 1216, 1308, 1317, 1325, 1326, 1339], "onli": [1, 11, 14, 21, 31, 34, 35, 37, 43, 47, 48, 53, 56, 86, 114, 115, 116, 118, 119, 120, 122, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 148, 153, 156, 158, 169, 174, 188, 191, 193, 205, 208, 211, 212, 214, 219, 226, 235, 237, 238, 253, 259, 261, 262, 263, 268, 273, 274, 291, 305, 314, 316, 318, 320, 331, 363, 369, 370, 390, 395, 423, 431, 453, 462, 472, 494, 550, 552, 558, 573, 574, 575, 576, 577, 578, 579, 580, 581, 590, 596, 603, 606, 613, 615, 617, 619, 621, 624, 626, 628, 650, 676, 707, 715, 716, 719, 736, 753, 754, 775, 813, 829, 834, 839, 841, 852, 853, 855, 856, 857, 861, 864, 879, 895, 898, 914, 926, 930, 931, 935, 936, 937, 987, 990, 1007, 1013, 1045, 1078, 1084, 1090, 1107, 1171, 1189, 1193, 1196, 1236, 1262, 1300, 1303, 1306, 1326, 1334, 1336, 1350, 1353], "gener": [1, 116, 117, 135, 141, 142, 143, 144, 145, 146, 148, 155, 163, 226, 239, 260, 263, 269, 305, 527, 632, 638, 731, 753, 756, 768, 769, 771, 788, 800, 801, 813, 926, 1150, 1213, 1225, 1301, 1326, 1353], "userwarn": 1, "pl": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 73, 77, 85, 86, 88, 90, 91, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 150, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 308, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 813, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 931, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1257, 1258, 1260, 1261, 1262, 1263, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1326, 1330, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1351, 1353], "register_expr_namespac": [1, 49, 51, 52], "greet": 1, "def": [1, 47, 49, 50, 51, 52, 116, 142, 144, 148, 153, 225, 269, 305, 313, 594, 658, 688, 724, 774, 813, 835, 874, 926, 931, 1244, 1353], "__init__": [1, 47, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 141, 1350], "self": [1, 49, 50, 51, 52, 54, 55, 160, 161, 166, 174, 194, 196, 197, 198, 210, 212, 214, 216, 217, 219, 223, 224, 226, 228, 229, 231, 232, 233, 239, 248, 249, 251, 252, 253, 255, 260, 269, 271, 274, 275, 276, 280, 281, 282, 305, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 357, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 568, 569, 570, 571, 572, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 792, 809, 813, 828, 829, 830, 831, 833, 834, 835, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 926, 937, 938, 980, 993, 997, 1078, 1082, 1093, 1169, 1170, 1171, 1182, 1186, 1187, 1192, 1195, 1214, 1217, 1219, 1231, 1313, 1317, 1326, 1335, 1336, 1337, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348], "_expr": [1, 50], "hello": [1, 21, 686, 687, 688, 931, 1140, 1272, 1273, 1274, 1335, 1338], "return": [1, 6, 7, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 93, 96, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 150, 151, 156, 158, 160, 162, 163, 164, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 186, 187, 188, 190, 191, 194, 195, 196, 201, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 220, 221, 222, 224, 225, 226, 230, 235, 236, 237, 238, 239, 240, 243, 251, 254, 255, 256, 262, 263, 264, 267, 268, 269, 270, 274, 277, 278, 279, 286, 288, 290, 291, 294, 299, 305, 316, 318, 322, 323, 324, 325, 326, 327, 330, 331, 335, 336, 337, 339, 341, 342, 353, 358, 359, 360, 361, 362, 363, 364, 373, 374, 375, 376, 377, 388, 389, 395, 396, 398, 401, 402, 403, 405, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 450, 455, 463, 466, 467, 469, 473, 474, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 498, 499, 502, 503, 505, 511, 513, 515, 516, 517, 519, 520, 527, 537, 538, 539, 546, 550, 551, 552, 562, 564, 565, 570, 594, 598, 600, 604, 605, 606, 608, 609, 632, 633, 639, 640, 641, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 692, 696, 701, 709, 711, 712, 713, 715, 716, 717, 719, 720, 721, 724, 725, 729, 731, 732, 733, 734, 735, 736, 741, 743, 752, 753, 754, 755, 756, 757, 758, 761, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 784, 785, 788, 791, 792, 795, 798, 799, 800, 801, 803, 804, 813, 829, 832, 834, 835, 836, 837, 838, 842, 843, 845, 850, 852, 853, 855, 856, 857, 860, 863, 864, 866, 874, 875, 877, 879, 880, 883, 887, 893, 894, 895, 896, 900, 901, 902, 909, 911, 913, 917, 922, 926, 930, 931, 935, 936, 937, 945, 946, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 970, 972, 974, 975, 976, 979, 982, 985, 989, 997, 1007, 1008, 1013, 1014, 1016, 1019, 1020, 1021, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1071, 1073, 1077, 1078, 1086, 1089, 1091, 1092, 1099, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1134, 1136, 1138, 1139, 1140, 1142, 1143, 1150, 1160, 1161, 1162, 1169, 1170, 1171, 1176, 1183, 1189, 1195, 1196, 1197, 1198, 1199, 1213, 1215, 1216, 1226, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1263, 1264, 1266, 1267, 1268, 1269, 1278, 1282, 1287, 1295, 1297, 1300, 1307, 1310, 1312, 1313, 1314, 1317, 1326, 1334, 1338, 1340, 1341, 1342, 1343, 1345, 1346, 1350, 1352, 1353], "lit": [1, 315, 358, 479, 494, 573, 660, 744, 748, 762, 785, 788, 804, 813, 1081, 1326], "alia": [1, 13, 48, 50, 52, 84, 188, 210, 226, 231, 235, 271, 278, 281, 305, 313, 317, 358, 359, 360, 361, 362, 363, 377, 378, 379, 380, 381, 388, 391, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 410, 411, 414, 416, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 438, 440, 441, 442, 443, 444, 447, 448, 461, 463, 468, 470, 476, 479, 483, 487, 494, 497, 499, 523, 535, 542, 547, 552, 556, 558, 560, 562, 566, 569, 571, 573, 584, 585, 589, 591, 595, 598, 601, 603, 631, 633, 649, 650, 652, 653, 655, 657, 658, 660, 661, 665, 666, 676, 677, 680, 681, 682, 683, 684, 689, 690, 692, 702, 703, 704, 706, 714, 715, 717, 723, 724, 731, 732, 733, 737, 738, 739, 753, 756, 758, 759, 762, 763, 768, 771, 774, 775, 787, 795, 800, 803, 813, 852, 858, 864, 879, 897, 901, 905, 926, 1007, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1122, 1189, 1194, 1243, 1244, 1268, 1269, 1326], "hi": [1, 1346], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 650, 676, 686, 687, 688, 699, 931, 1140, 1236, 1262, 1272, 1273, 1274, 1285, 1335, 1338], "select": [1, 9, 35, 48, 49, 50, 51, 88, 112, 114, 115, 116, 117, 118, 120, 122, 126, 128, 134, 143, 157, 203, 204, 208, 211, 222, 225, 236, 242, 249, 251, 265, 271, 274, 281, 305, 312, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 339, 344, 345, 346, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 366, 368, 369, 373, 374, 375, 376, 387, 389, 391, 392, 393, 394, 397, 399, 400, 410, 419, 420, 423, 426, 434, 435, 436, 437, 438, 439, 440, 441, 444, 446, 449, 451, 452, 453, 454, 455, 456, 460, 462, 464, 467, 471, 472, 474, 475, 476, 477, 480, 481, 485, 493, 494, 495, 496, 498, 510, 511, 540, 543, 544, 545, 546, 550, 552, 553, 554, 555, 558, 568, 570, 572, 573, 575, 577, 579, 582, 583, 587, 588, 589, 590, 592, 593, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 612, 623, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 659, 660, 691, 702, 704, 708, 712, 713, 715, 716, 718, 719, 720, 721, 722, 725, 727, 730, 732, 733, 734, 735, 738, 740, 741, 742, 743, 746, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 776, 778, 780, 781, 783, 784, 787, 788, 792, 793, 794, 795, 796, 798, 802, 809, 813, 828, 836, 861, 874, 882, 883, 888, 890, 897, 903, 905, 926, 931, 1048, 1085, 1133, 1214, 1217, 1230, 1250, 1277, 1296, 1326, 1334, 1335, 1336, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352], "shapecolumn_0": [1, 211, 269, 305], "register_dataframe_namespac": [1, 50, 51, 52], "split": [1, 37, 49, 206, 305, 656, 682, 683, 1242, 1268, 1269], "splitfram": [1, 49], "df": [1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 49, 50, 73, 88, 90, 103, 104, 105, 106, 107, 108, 109, 115, 116, 117, 128, 141, 142, 144, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 180, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 308, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 363, 364, 365, 366, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 809, 813, 852, 879, 883, 897, 898, 911, 914, 922, 926, 931, 1048, 1073, 1250, 1268, 1269, 1302, 1326, 1334, 1335, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1352, 1353], "_df": [1, 49], "by_alternate_row": 1, "list": [1, 14, 36, 37, 48, 49, 51, 54, 55, 57, 63, 77, 102, 104, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 148, 162, 167, 170, 172, 173, 177, 185, 187, 188, 196, 205, 221, 224, 236, 237, 238, 241, 250, 258, 259, 267, 269, 270, 271, 272, 278, 283, 284, 305, 314, 342, 353, 354, 355, 388, 395, 455, 461, 466, 475, 484, 548, 550, 552, 562, 563, 590, 598, 604, 606, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 644, 645, 656, 658, 681, 702, 704, 710, 714, 734, 736, 738, 754, 757, 759, 767, 769, 772, 775, 793, 795, 801, 813, 836, 842, 844, 848, 851, 852, 881, 889, 896, 897, 901, 903, 906, 907, 926, 931, 959, 970, 971, 972, 988, 1007, 1013, 1071, 1077, 1082, 1085, 1087, 1092, 1093, 1105, 1171, 1189, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1236, 1242, 1244, 1262, 1267, 1296, 1305, 1308, 1326, 1334, 1338, 1342, 1343, 1352, 1353], "with_row_index": [1, 280, 305, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 813, 904, 926, 1214, 1326], "name": [1, 19, 23, 25, 32, 34, 35, 37, 43, 49, 50, 51, 52, 56, 77, 90, 102, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 144, 147, 148, 149, 158, 159, 162, 167, 168, 169, 173, 177, 178, 179, 183, 184, 186, 187, 190, 203, 204, 205, 207, 208, 211, 213, 215, 217, 218, 220, 224, 226, 230, 236, 237, 238, 240, 241, 242, 243, 250, 251, 254, 258, 260, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 278, 279, 280, 281, 282, 283, 290, 305, 315, 320, 354, 358, 359, 361, 362, 364, 388, 430, 433, 453, 459, 479, 488, 490, 491, 492, 494, 540, 549, 552, 557, 559, 561, 563, 566, 590, 596, 598, 607, 645, 658, 659, 674, 675, 702, 704, 705, 707, 716, 721, 725, 726, 727, 728, 730, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 746, 747, 750, 751, 760, 761, 766, 767, 770, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 789, 790, 791, 794, 795, 796, 797, 798, 802, 803, 809, 813, 829, 831, 836, 840, 841, 844, 848, 851, 854, 860, 861, 870, 871, 877, 880, 881, 882, 883, 889, 890, 895, 896, 897, 898, 901, 902, 903, 904, 905, 906, 913, 926, 930, 931, 934, 971, 989, 1007, 1052, 1055, 1163, 1189, 1194, 1243, 1244, 1245, 1260, 1261, 1288, 1291, 1301, 1302, 1307, 1314, 1326, 1335, 1336, 1337, 1338, 1339, 1349, 1350, 1353], "n": [1, 13, 14, 18, 26, 34, 41, 43, 49, 50, 51, 52, 63, 65, 111, 114, 115, 119, 124, 128, 144, 156, 160, 174, 182, 188, 194, 205, 206, 210, 211, 237, 238, 239, 246, 247, 252, 255, 256, 259, 261, 275, 288, 290, 299, 305, 321, 349, 354, 363, 364, 387, 391, 395, 397, 399, 406, 432, 444, 456, 459, 467, 473, 499, 508, 514, 516, 527, 528, 532, 535, 537, 540, 542, 591, 594, 604, 624, 625, 628, 629, 632, 635, 636, 642, 647, 661, 665, 666, 674, 682, 683, 686, 687, 692, 694, 709, 711, 715, 716, 717, 721, 722, 724, 740, 742, 753, 754, 755, 756, 757, 758, 764, 766, 784, 785, 788, 789, 790, 794, 798, 802, 804, 813, 832, 834, 850, 852, 857, 864, 885, 886, 891, 893, 894, 899, 911, 913, 922, 926, 931, 966, 971, 979, 989, 1006, 1009, 1013, 1015, 1017, 1024, 1054, 1066, 1078, 1079, 1086, 1091, 1122, 1131, 1137, 1139, 1150, 1151, 1155, 1160, 1163, 1185, 1208, 1210, 1213, 1221, 1222, 1229, 1233, 1247, 1251, 1252, 1260, 1268, 1269, 1278, 1280, 1295, 1297, 1303, 1310, 1314, 1315, 1326, 1336, 1337, 1343, 1346, 1350, 1353], "filter": [1, 49, 118, 128, 129, 134, 169, 200, 201, 202, 207, 226, 291, 305, 561, 563, 655, 684, 723, 752, 755, 762, 792, 803, 813, 841, 845, 858, 860, 890, 914, 926, 931, 1217, 1326, 1340], "col": [1, 13, 34, 37, 43, 48, 49, 50, 51, 106, 108, 128, 142, 144, 177, 187, 188, 201, 203, 211, 222, 225, 226, 235, 236, 241, 250, 262, 267, 271, 272, 278, 283, 305, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 370, 373, 374, 375, 377, 378, 379, 380, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 474, 476, 477, 478, 479, 480, 483, 484, 487, 488, 490, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 577, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 734, 735, 737, 738, 739, 741, 743, 746, 752, 755, 758, 762, 763, 764, 765, 766, 767, 776, 778, 780, 781, 783, 786, 787, 792, 794, 796, 798, 799, 802, 803, 813, 848, 851, 852, 858, 874, 879, 881, 889, 890, 897, 901, 903, 906, 926, 931, 1045, 1048, 1133, 1196, 1214, 1217, 1250, 1277, 1326, 1353], "0": [1, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 36, 37, 40, 42, 46, 48, 49, 50, 52, 56, 64, 73, 86, 103, 114, 115, 116, 117, 119, 120, 122, 123, 125, 126, 128, 131, 132, 133, 134, 136, 141, 142, 143, 144, 145, 146, 148, 151, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 175, 176, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 226, 227, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 243, 247, 249, 250, 251, 252, 253, 254, 256, 260, 261, 262, 263, 264, 265, 267, 268, 269, 272, 274, 275, 278, 280, 281, 283, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 305, 312, 314, 315, 317, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 335, 336, 338, 341, 351, 354, 356, 363, 364, 365, 368, 369, 371, 372, 373, 374, 375, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 401, 402, 404, 407, 408, 411, 412, 414, 415, 416, 417, 421, 422, 426, 427, 428, 429, 431, 436, 437, 439, 440, 441, 444, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 462, 463, 465, 467, 468, 470, 472, 474, 477, 478, 481, 482, 485, 486, 488, 489, 490, 491, 492, 494, 495, 497, 502, 503, 506, 507, 510, 513, 514, 515, 520, 522, 523, 535, 538, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 558, 562, 567, 568, 569, 571, 573, 582, 583, 584, 585, 586, 588, 589, 591, 594, 595, 596, 598, 599, 600, 601, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 639, 640, 641, 642, 646, 647, 651, 652, 656, 657, 658, 660, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 722, 723, 725, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 748, 749, 750, 751, 753, 755, 759, 762, 768, 769, 771, 773, 775, 778, 779, 780, 784, 786, 787, 792, 799, 800, 801, 802, 803, 804, 809, 813, 828, 829, 831, 832, 833, 837, 838, 840, 842, 843, 846, 847, 850, 851, 852, 853, 854, 855, 856, 859, 860, 863, 865, 866, 869, 873, 875, 876, 879, 880, 881, 886, 887, 889, 890, 891, 894, 895, 899, 901, 903, 904, 905, 906, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 926, 931, 938, 939, 940, 941, 942, 943, 944, 945, 947, 949, 952, 958, 968, 971, 973, 980, 983, 984, 986, 987, 989, 991, 992, 994, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1020, 1022, 1025, 1026, 1030, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1043, 1044, 1048, 1049, 1050, 1051, 1058, 1059, 1061, 1062, 1063, 1066, 1069, 1072, 1073, 1074, 1075, 1080, 1084, 1086, 1089, 1090, 1092, 1095, 1096, 1098, 1101, 1102, 1104, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1116, 1118, 1119, 1120, 1125, 1126, 1129, 1130, 1133, 1136, 1137, 1138, 1143, 1145, 1146, 1158, 1161, 1163, 1165, 1166, 1167, 1168, 1169, 1170, 1173, 1174, 1185, 1189, 1190, 1191, 1195, 1199, 1200, 1201, 1203, 1204, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1215, 1216, 1218, 1222, 1226, 1227, 1228, 1229, 1232, 1233, 1237, 1238, 1242, 1243, 1244, 1246, 1249, 1250, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1277, 1280, 1296, 1297, 1298, 1299, 1301, 1304, 1305, 1306, 1307, 1308, 1309, 1313, 1315, 1316, 1326, 1334, 1339, 1341, 1342, 1345, 1346, 1348, 1352, 1353], "drop": [1, 105, 168, 169, 211, 270, 278, 305, 391, 393, 394, 508, 509, 598, 813, 841, 896, 901, 926, 1009, 1011, 1012, 1131, 1132, 1189, 1326, 1349], "aaa": [1, 37, 305, 649, 660, 702, 704, 931, 1235, 1246], "bbb": [1, 37, 305, 702, 704, 931], "ccc": [1, 37, 305, 702, 704, 931, 1346], "ddd": [1, 37, 305, 702, 704], "eee": [1, 37, 305, 931], "fff": 1, "schema": [1, 15, 29, 32, 35, 36, 49, 50, 51, 56, 97, 98, 102, 104, 105, 106, 108, 114, 115, 116, 117, 119, 121, 123, 124, 125, 126, 127, 128, 132, 133, 156, 160, 161, 170, 172, 206, 211, 218, 222, 263, 267, 305, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 402, 539, 540, 561, 575, 577, 579, 662, 663, 724, 795, 813, 832, 833, 836, 842, 865, 866, 871, 883, 900, 908, 914, 926, 931, 993, 1248, 1249, 1326, 1334], "txt": [1, 13, 128, 649, 660, 1246], "string": [1, 3, 4, 6, 7, 13, 15, 16, 17, 21, 32, 34, 35, 36, 37, 40, 41, 43, 47, 60, 63, 66, 77, 84, 85, 86, 91, 105, 109, 114, 115, 116, 117, 128, 137, 138, 139, 140, 141, 148, 152, 158, 159, 170, 172, 180, 186, 187, 188, 190, 208, 224, 226, 235, 238, 240, 241, 242, 243, 250, 261, 262, 268, 269, 272, 274, 278, 279, 282, 283, 305, 313, 337, 342, 359, 360, 361, 364, 367, 423, 427, 430, 433, 441, 450, 453, 461, 465, 479, 517, 564, 565, 590, 594, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 703, 705, 716, 724, 726, 728, 734, 737, 738, 739, 747, 751, 753, 754, 756, 757, 763, 777, 779, 782, 791, 795, 797, 800, 801, 803, 813, 825, 829, 831, 842, 843, 851, 852, 854, 861, 879, 880, 881, 882, 883, 889, 895, 901, 902, 906, 926, 931, 959, 975, 976, 977, 982, 983, 1045, 1049, 1052, 1055, 1063, 1073, 1097, 1118, 1140, 1195, 1234, 1235, 1236, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1290, 1303, 1304, 1326, 1334, 1342, 1344, 1347, 1349, 1353], "register_lazyframe_namespac": [1, 49, 50, 52], "dtypeoper": [1, 51], "ldf": [1, 51, 906, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921], "_ldf": [1, 51], "upcast_integer_typ": [1, 51], "with_column": [1, 13, 51, 54, 55, 188, 225, 231, 235, 267, 272, 279, 305, 313, 315, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 347, 348, 349, 350, 354, 359, 360, 365, 370, 377, 378, 379, 380, 381, 388, 391, 395, 396, 398, 401, 402, 403, 405, 406, 407, 409, 411, 413, 414, 416, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 442, 443, 445, 447, 448, 450, 457, 458, 463, 468, 470, 472, 477, 478, 479, 483, 484, 487, 488, 490, 491, 492, 494, 497, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 547, 549, 552, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 590, 591, 594, 595, 596, 598, 601, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 635, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 703, 705, 706, 707, 714, 717, 724, 726, 728, 736, 737, 739, 744, 745, 747, 752, 754, 755, 759, 769, 774, 777, 779, 782, 793, 797, 799, 801, 803, 809, 813, 834, 835, 843, 845, 852, 858, 874, 875, 879, 887, 902, 926, 931, 1007, 1048, 1189, 1326], "tp": [1, 51], "cast": [1, 36, 50, 51, 102, 104, 105, 108, 137, 138, 139, 140, 180, 188, 189, 191, 192, 225, 235, 262, 263, 267, 278, 305, 319, 380, 381, 397, 430, 433, 444, 589, 594, 603, 610, 662, 663, 664, 701, 708, 714, 739, 793, 813, 852, 853, 855, 856, 874, 879, 901, 926, 930, 931, 983, 985, 1000, 1001, 1015, 1052, 1055, 1066, 1193, 1248, 1249, 1250, 1287, 1294, 1302, 1306, 1308, 1309, 1326], "int64": [1, 36, 37, 50, 51, 56, 57, 77, 91, 114, 123, 170, 180, 188, 189, 191, 192, 225, 235, 240, 243, 257, 264, 305, 335, 336, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 380, 381, 434, 435, 436, 437, 438, 439, 440, 444, 450, 453, 550, 552, 575, 577, 579, 594, 603, 610, 662, 696, 708, 714, 731, 760, 768, 769, 772, 788, 795, 813, 842, 852, 853, 855, 856, 874, 879, 880, 883, 926, 931, 952, 953, 955, 956, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 1000, 1001, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1068, 1073, 1171, 1193, 1216, 1282, 1294, 1306, 1307, 1308, 1309, 1326], "int8": [1, 51, 77, 180, 305, 353, 354, 380, 381, 403, 407, 416, 418, 425, 428, 442, 443, 539, 708, 785, 788, 804, 813, 970, 971, 1000, 1001, 1009, 1021, 1025, 1038, 1040, 1047, 1050, 1064, 1065, 1162, 1197, 1294, 1306, 1313, 1326], "int16": [1, 51, 267, 305, 380, 381, 424, 708, 813, 931, 1000, 1001, 1046, 1294, 1303, 1326], "int32": [1, 51, 56, 102, 105, 141, 143, 144, 188, 189, 191, 192, 206, 235, 262, 305, 340, 341, 343, 365, 398, 410, 411, 413, 414, 421, 445, 450, 608, 610, 714, 788, 813, 852, 853, 855, 856, 879, 926, 931, 954, 957, 958, 960, 1016, 1028, 1032, 1034, 1035, 1043, 1067, 1073, 1169, 1198, 1308, 1309, 1326], "b": [1, 11, 32, 34, 36, 38, 39, 42, 51, 56, 77, 88, 102, 103, 104, 105, 106, 107, 108, 109, 114, 116, 119, 155, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 182, 184, 185, 186, 187, 188, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 234, 236, 237, 238, 239, 240, 241, 246, 249, 250, 251, 252, 253, 255, 257, 258, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 305, 313, 315, 316, 318, 319, 330, 332, 337, 342, 357, 358, 359, 360, 361, 362, 364, 365, 376, 388, 392, 430, 433, 453, 455, 457, 458, 459, 461, 464, 471, 472, 475, 477, 478, 479, 481, 485, 488, 490, 491, 492, 494, 498, 504, 510, 517, 528, 529, 530, 531, 549, 550, 552, 557, 570, 573, 574, 575, 576, 577, 578, 579, 587, 588, 590, 594, 596, 598, 601, 605, 607, 609, 637, 643, 645, 653, 656, 660, 662, 674, 675, 702, 703, 707, 716, 719, 723, 725, 726, 727, 728, 730, 734, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 759, 760, 761, 762, 763, 766, 767, 768, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 790, 792, 794, 795, 796, 797, 798, 802, 813, 828, 829, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 860, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 885, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 926, 931, 934, 937, 959, 974, 975, 976, 977, 978, 982, 984, 985, 1007, 1010, 1052, 1055, 1069, 1070, 1071, 1078, 1081, 1097, 1105, 1118, 1127, 1151, 1152, 1153, 1154, 1189, 1194, 1239, 1242, 1246, 1248, 1260, 1261, 1288, 1290, 1291, 1293, 1307, 1312, 1326, 1336, 1337, 1339, 1340, 1341, 1342, 1346, 1348, 1350], "4": [1, 9, 14, 18, 26, 32, 34, 36, 37, 38, 39, 42, 48, 49, 50, 51, 52, 56, 57, 73, 102, 103, 104, 105, 106, 107, 108, 109, 119, 128, 136, 148, 155, 157, 158, 159, 160, 161, 164, 166, 169, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 231, 235, 237, 238, 245, 246, 250, 254, 255, 257, 258, 259, 260, 263, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 283, 284, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 308, 312, 313, 314, 315, 317, 319, 332, 339, 340, 341, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 356, 357, 363, 364, 365, 368, 369, 370, 376, 377, 380, 381, 387, 389, 392, 399, 402, 403, 413, 424, 425, 426, 427, 428, 430, 433, 435, 438, 440, 441, 443, 447, 448, 450, 454, 455, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 491, 492, 494, 497, 498, 499, 507, 508, 509, 510, 511, 513, 514, 516, 525, 527, 528, 529, 530, 531, 532, 533, 537, 539, 544, 547, 549, 550, 552, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 592, 593, 594, 595, 596, 599, 601, 605, 606, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 639, 643, 644, 645, 646, 649, 652, 658, 660, 661, 665, 666, 671, 672, 674, 675, 680, 681, 682, 683, 689, 690, 691, 692, 696, 701, 702, 704, 705, 706, 707, 709, 714, 715, 716, 717, 723, 724, 726, 728, 730, 732, 733, 734, 735, 737, 739, 740, 742, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 759, 761, 762, 766, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 809, 813, 828, 829, 831, 832, 833, 834, 835, 837, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 857, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 879, 885, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 904, 905, 906, 907, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 931, 937, 940, 947, 954, 956, 957, 958, 960, 961, 962, 963, 964, 966, 968, 969, 970, 971, 972, 973, 979, 987, 988, 990, 997, 1006, 1008, 1010, 1020, 1025, 1032, 1034, 1035, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1052, 1055, 1057, 1060, 1062, 1063, 1064, 1065, 1070, 1073, 1077, 1078, 1080, 1081, 1085, 1086, 1087, 1091, 1092, 1095, 1096, 1097, 1099, 1105, 1110, 1111, 1112, 1113, 1117, 1122, 1130, 1131, 1132, 1133, 1134, 1139, 1144, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1160, 1162, 1177, 1180, 1181, 1182, 1185, 1186, 1187, 1191, 1192, 1195, 1196, 1199, 1204, 1206, 1207, 1208, 1209, 1210, 1213, 1215, 1221, 1223, 1226, 1229, 1230, 1231, 1235, 1238, 1244, 1246, 1247, 1251, 1252, 1257, 1258, 1266, 1268, 1269, 1275, 1276, 1277, 1278, 1282, 1287, 1288, 1291, 1293, 1295, 1303, 1306, 1308, 1310, 1317, 1326, 1330, 1334, 1336, 1337, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1351, 1352, 1353], "c": [1, 11, 32, 34, 36, 38, 39, 42, 49, 51, 56, 103, 105, 107, 109, 119, 128, 155, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 177, 180, 184, 185, 186, 187, 188, 194, 196, 198, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 230, 233, 234, 236, 239, 240, 241, 249, 250, 251, 252, 253, 255, 257, 260, 261, 262, 263, 264, 265, 268, 272, 273, 275, 276, 278, 283, 287, 288, 289, 292, 293, 295, 298, 299, 305, 313, 315, 316, 318, 320, 337, 357, 364, 388, 459, 471, 479, 494, 504, 517, 549, 552, 558, 573, 574, 588, 590, 594, 598, 637, 682, 691, 716, 719, 726, 728, 730, 734, 737, 739, 740, 741, 742, 744, 745, 747, 761, 762, 763, 766, 767, 770, 771, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 792, 794, 796, 797, 798, 802, 809, 813, 829, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 848, 851, 852, 860, 863, 870, 873, 875, 877, 878, 880, 881, 887, 888, 889, 890, 895, 898, 901, 903, 906, 910, 911, 912, 915, 916, 918, 921, 922, 926, 930, 931, 984, 1007, 1097, 1118, 1127, 1189, 1268, 1277, 1291, 1312, 1326, 1336, 1337, 1339, 1340, 1341, 1342, 1346], "5": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 38, 39, 42, 48, 49, 51, 52, 56, 102, 105, 106, 107, 108, 109, 111, 115, 136, 137, 139, 142, 144, 148, 159, 160, 161, 165, 166, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 194, 195, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 220, 221, 222, 224, 226, 227, 228, 231, 235, 238, 245, 246, 250, 251, 254, 255, 257, 258, 259, 260, 262, 263, 266, 267, 269, 272, 273, 274, 277, 278, 280, 281, 283, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 305, 308, 313, 314, 317, 333, 334, 339, 340, 341, 343, 345, 349, 354, 356, 363, 364, 365, 369, 370, 387, 388, 389, 391, 392, 395, 398, 399, 400, 401, 402, 407, 411, 413, 414, 416, 421, 426, 428, 430, 431, 433, 434, 440, 444, 448, 450, 452, 453, 456, 458, 462, 463, 467, 468, 470, 473, 475, 477, 479, 483, 487, 488, 490, 491, 492, 494, 497, 499, 507, 510, 511, 513, 514, 516, 519, 522, 523, 527, 528, 529, 530, 531, 532, 536, 537, 542, 550, 569, 571, 573, 585, 589, 590, 591, 592, 593, 594, 598, 599, 601, 605, 606, 607, 609, 610, 612, 613, 615, 616, 617, 618, 619, 621, 624, 626, 627, 628, 629, 630, 633, 639, 645, 652, 660, 661, 664, 665, 666, 692, 696, 706, 709, 715, 716, 717, 730, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 752, 753, 755, 758, 759, 760, 761, 762, 766, 768, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 792, 794, 796, 797, 798, 802, 809, 813, 831, 832, 833, 834, 835, 838, 843, 844, 845, 846, 847, 849, 850, 851, 852, 857, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 879, 885, 887, 888, 889, 890, 891, 892, 893, 898, 900, 901, 904, 905, 906, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 922, 926, 931, 937, 940, 944, 947, 950, 951, 954, 956, 957, 958, 960, 962, 966, 971, 972, 973, 979, 988, 990, 998, 1006, 1007, 1008, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1034, 1048, 1050, 1052, 1053, 1055, 1056, 1062, 1064, 1065, 1066, 1070, 1073, 1075, 1077, 1078, 1079, 1087, 1091, 1092, 1095, 1097, 1103, 1109, 1122, 1130, 1133, 1134, 1139, 1142, 1146, 1150, 1151, 1152, 1153, 1154, 1155, 1159, 1160, 1165, 1169, 1177, 1182, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1195, 1196, 1199, 1201, 1202, 1203, 1205, 1206, 1209, 1213, 1215, 1223, 1226, 1229, 1232, 1238, 1246, 1247, 1250, 1251, 1278, 1282, 1295, 1304, 1306, 1309, 1310, 1313, 1317, 1326, 1337, 1339, 1341, 1342, 1345, 1346, 1348, 1352, 1353], "6": [1, 9, 14, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 51, 56, 85, 86, 102, 105, 106, 107, 108, 119, 123, 124, 136, 159, 162, 166, 167, 168, 169, 170, 171, 173, 174, 177, 182, 183, 184, 185, 186, 188, 194, 196, 198, 199, 201, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 243, 246, 249, 250, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 269, 271, 272, 274, 275, 276, 277, 278, 280, 281, 288, 298, 299, 305, 308, 313, 317, 339, 340, 341, 343, 349, 357, 364, 365, 380, 381, 392, 395, 399, 403, 418, 423, 424, 425, 436, 437, 439, 442, 443, 446, 448, 457, 458, 463, 464, 467, 473, 475, 477, 499, 500, 501, 511, 514, 528, 529, 530, 531, 535, 550, 552, 585, 589, 597, 600, 601, 602, 606, 608, 610, 613, 615, 617, 619, 621, 624, 626, 627, 628, 633, 645, 652, 656, 665, 666, 696, 706, 709, 716, 724, 726, 728, 736, 744, 745, 746, 752, 755, 759, 762, 768, 774, 775, 779, 792, 796, 809, 813, 831, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 852, 857, 859, 860, 862, 864, 866, 870, 873, 875, 877, 879, 880, 881, 883, 885, 887, 888, 889, 890, 893, 897, 900, 901, 904, 905, 911, 921, 922, 926, 931, 954, 956, 957, 958, 960, 966, 988, 994, 996, 1000, 1001, 1010, 1013, 1045, 1065, 1070, 1077, 1087, 1092, 1123, 1124, 1134, 1137, 1151, 1152, 1153, 1154, 1158, 1177, 1188, 1191, 1192, 1196, 1198, 1204, 1206, 1208, 1210, 1215, 1223, 1238, 1242, 1251, 1282, 1294, 1306, 1326, 1337, 1339, 1341, 1342, 1345, 1348, 1350, 1351, 1353], "7": [1, 17, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 49, 51, 56, 123, 124, 136, 151, 159, 162, 163, 165, 167, 168, 170, 171, 173, 177, 182, 184, 188, 194, 196, 199, 207, 212, 214, 216, 218, 219, 223, 226, 228, 230, 233, 235, 236, 238, 239, 240, 241, 243, 246, 249, 252, 253, 254, 255, 261, 263, 264, 265, 272, 274, 275, 276, 305, 313, 317, 340, 341, 343, 352, 381, 398, 399, 403, 413, 424, 426, 427, 441, 443, 454, 467, 473, 477, 478, 499, 514, 528, 529, 530, 531, 589, 601, 606, 610, 626, 627, 645, 660, 695, 709, 736, 744, 745, 752, 755, 756, 762, 767, 774, 775, 792, 796, 813, 831, 836, 838, 840, 842, 844, 848, 850, 852, 857, 859, 860, 864, 871, 873, 876, 877, 879, 880, 881, 885, 890, 893, 926, 931, 944, 957, 958, 960, 969, 1016, 1017, 1021, 1028, 1034, 1048, 1049, 1063, 1065, 1076, 1096, 1119, 1137, 1151, 1152, 1153, 1154, 1195, 1196, 1209, 1215, 1246, 1281, 1326, 1339, 1341, 1342, 1345, 1353], "float32": [1, 11, 34, 43, 51, 159, 180, 261, 262, 263, 267, 305, 450, 772, 813, 831, 926, 931, 1073, 1100, 1169, 1304, 1306, 1309, 1326], "lazi": [1, 51, 56, 128, 144, 208, 225, 226, 251, 305, 552, 764, 785, 788, 804, 813, 838, 860, 861, 903, 906, 907, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 926, 931, 1334, 1335, 1336, 1337, 1339, 1350, 1353], "i16": [1, 51, 403, 424, 443, 637, 813, 931, 1046, 1303, 1326, 1353], "i32": [1, 51, 102, 105, 109, 141, 143, 144, 241, 251, 305, 340, 341, 343, 365, 398, 407, 410, 411, 413, 414, 416, 421, 445, 608, 637, 736, 803, 813, 881, 926, 957, 958, 960, 1016, 1028, 1032, 1034, 1035, 1043, 1067, 1169, 1198, 1326, 1343, 1347, 1353], "f32": [1, 51, 159, 251, 261, 267, 305, 637, 792, 813, 831, 890, 926, 931, 1169, 1326], "i64": [1, 11, 14, 17, 18, 22, 28, 49, 50, 51, 52, 56, 57, 73, 102, 103, 104, 105, 106, 107, 108, 109, 114, 116, 123, 124, 128, 158, 159, 160, 161, 162, 166, 167, 169, 170, 173, 174, 176, 177, 182, 183, 185, 186, 187, 188, 194, 196, 198, 200, 202, 204, 207, 208, 211, 212, 217, 218, 219, 224, 225, 226, 227, 230, 231, 233, 234, 235, 239, 241, 246, 249, 250, 251, 253, 255, 258, 265, 268, 269, 270, 271, 272, 273, 274, 276, 278, 280, 281, 282, 283, 284, 287, 288, 289, 291, 292, 295, 298, 299, 305, 313, 315, 319, 330, 335, 336, 338, 339, 344, 346, 347, 348, 349, 350, 352, 355, 357, 363, 364, 370, 378, 379, 380, 381, 387, 388, 391, 392, 406, 432, 434, 435, 436, 437, 438, 439, 440, 450, 453, 455, 456, 458, 459, 460, 461, 463, 464, 466, 467, 469, 473, 475, 476, 477, 478, 479, 483, 484, 487, 488, 490, 491, 492, 494, 496, 499, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 546, 549, 550, 552, 569, 570, 571, 573, 574, 576, 578, 580, 581, 586, 590, 591, 594, 595, 596, 597, 598, 601, 602, 603, 605, 606, 607, 608, 609, 610, 632, 634, 635, 637, 638, 639, 643, 644, 645, 661, 674, 675, 692, 696, 701, 702, 704, 705, 706, 707, 708, 709, 715, 716, 717, 718, 720, 723, 731, 734, 737, 739, 744, 745, 746, 747, 752, 755, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 781, 782, 784, 787, 791, 792, 793, 796, 797, 798, 799, 803, 809, 813, 829, 831, 832, 834, 835, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 857, 860, 861, 862, 864, 866, 867, 870, 871, 872, 874, 875, 877, 878, 879, 881, 883, 885, 888, 889, 890, 892, 893, 895, 896, 897, 898, 901, 904, 905, 906, 907, 910, 911, 912, 914, 915, 918, 921, 922, 926, 931, 933, 934, 937, 956, 961, 963, 965, 966, 967, 969, 972, 979, 990, 993, 998, 999, 1000, 1001, 1006, 1007, 1024, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1077, 1078, 1079, 1081, 1082, 1085, 1086, 1087, 1091, 1093, 1105, 1122, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1144, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1163, 1164, 1171, 1176, 1182, 1189, 1192, 1193, 1194, 1195, 1196, 1198, 1202, 1205, 1209, 1213, 1214, 1217, 1221, 1223, 1225, 1226, 1230, 1231, 1282, 1288, 1293, 1295, 1302, 1310, 1311, 1317, 1326, 1334, 1336, 1340, 1341, 1342, 1343, 1345, 1350, 1351, 1353], "register_series_namespac": [1, 49, 50, 51], "math": [1, 11, 52, 389, 732, 733, 813, 994, 996, 1227, 1298, 1326, 1344, 1348, 1349], "mathshortcut": [1, 52], "": [1, 12, 34, 35, 36, 37, 42, 43, 52, 57, 77, 91, 102, 109, 114, 115, 116, 117, 119, 125, 129, 130, 133, 134, 148, 158, 159, 169, 172, 177, 182, 187, 188, 189, 190, 191, 192, 198, 204, 207, 208, 217, 224, 226, 231, 233, 235, 238, 241, 242, 250, 260, 263, 268, 270, 271, 272, 273, 278, 279, 305, 342, 364, 400, 406, 430, 433, 453, 459, 463, 495, 517, 550, 552, 562, 570, 582, 583, 590, 591, 603, 609, 645, 649, 657, 658, 659, 660, 661, 674, 675, 680, 681, 683, 691, 692, 693, 694, 698, 699, 702, 704, 705, 716, 725, 726, 727, 728, 734, 740, 743, 746, 747, 750, 751, 760, 761, 763, 764, 770, 774, 775, 776, 777, 779, 781, 782, 784, 791, 793, 795, 796, 797, 803, 809, 813, 829, 831, 841, 851, 852, 853, 854, 855, 856, 861, 870, 879, 881, 882, 889, 895, 896, 897, 898, 901, 902, 908, 914, 926, 931, 933, 934, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1023, 1024, 1027, 1029, 1030, 1034, 1035, 1037, 1041, 1042, 1046, 1049, 1050, 1052, 1055, 1063, 1065, 1066, 1067, 1068, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1251, 1252, 1257, 1258, 1260, 1261, 1262, 1263, 1266, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1326, 1330, 1334, 1337, 1340, 1347], "_": [1, 48, 52, 226, 260, 264, 305, 342, 517, 650, 658, 665, 666, 676, 681, 682, 887, 926, 984, 1236, 1244, 1251, 1252, 1262, 1268, 1301, 1326], "squar": [1, 52, 291, 495, 646, 813, 914, 1120, 1232, 1326, 1345], "cube": [1, 52, 368, 595, 813, 986, 1326, 1345], "s2": [1, 47, 85, 86, 139, 140, 180, 305, 971, 988, 1010, 1070, 1087, 1105, 1119, 1127, 1163, 1177, 1192, 1317, 1326], "renam": [1, 105, 114, 115, 151, 156, 178, 181, 187, 189, 190, 191, 192, 197, 232, 241, 242, 256, 278, 279, 283, 285, 286, 305, 315, 320, 382, 383, 384, 385, 386, 465, 482, 486, 489, 494, 506, 520, 538, 548, 549, 551, 566, 567, 573, 574, 575, 576, 578, 580, 581, 596, 611, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 704, 705, 707, 710, 711, 729, 748, 749, 750, 751, 773, 791, 795, 813, 851, 853, 854, 855, 856, 865, 881, 882, 894, 901, 902, 906, 908, 909, 926, 934, 938, 1002, 1003, 1004, 1005, 1007, 1102, 1108, 1129, 1143, 1161, 1170, 1189, 1200, 1216, 1218, 1237, 1246, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1291, 1296, 1297, 1302, 1326], "n2": [1, 354], "s3": [1, 36, 118, 129, 130, 133, 134, 305, 971, 1163, 1326], "n3": 1, "8": [1, 12, 32, 34, 36, 38, 39, 40, 41, 42, 43, 48, 49, 51, 52, 56, 72, 76, 82, 123, 124, 136, 159, 162, 163, 165, 167, 168, 169, 170, 171, 173, 177, 182, 184, 186, 194, 196, 204, 207, 208, 211, 212, 214, 216, 219, 228, 230, 233, 236, 238, 239, 240, 241, 243, 246, 249, 251, 252, 253, 255, 261, 263, 264, 265, 272, 275, 276, 278, 305, 317, 319, 332, 340, 341, 343, 378, 381, 387, 399, 467, 474, 477, 478, 508, 510, 514, 520, 528, 529, 530, 531, 571, 589, 595, 606, 607, 612, 637, 643, 645, 667, 670, 671, 672, 691, 724, 730, 736, 740, 742, 745, 747, 759, 761, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 792, 794, 797, 798, 802, 813, 831, 836, 838, 840, 841, 842, 844, 848, 850, 857, 860, 864, 866, 875, 877, 880, 881, 885, 890, 893, 901, 926, 931, 957, 958, 960, 996, 1006, 1028, 1092, 1096, 1119, 1131, 1133, 1137, 1143, 1151, 1152, 1153, 1154, 1185, 1196, 1199, 1201, 1204, 1206, 1208, 1210, 1253, 1256, 1257, 1258, 1277, 1326, 1334, 1339, 1341, 1342, 1345, 1346, 1347, 1348, 1353], "9": [1, 10, 32, 34, 36, 37, 38, 39, 42, 48, 56, 136, 163, 165, 180, 189, 194, 199, 211, 226, 235, 237, 238, 241, 254, 255, 272, 276, 278, 298, 305, 313, 317, 319, 332, 340, 341, 343, 348, 350, 378, 381, 389, 399, 459, 467, 477, 484, 494, 508, 514, 526, 534, 573, 589, 600, 606, 610, 612, 623, 626, 627, 639, 643, 658, 695, 703, 705, 738, 744, 745, 752, 755, 767, 801, 813, 838, 853, 857, 859, 864, 879, 881, 893, 901, 921, 926, 931, 952, 953, 957, 958, 960, 965, 967, 1008, 1021, 1032, 1035, 1043, 1049, 1063, 1064, 1105, 1119, 1131, 1137, 1149, 1157, 1196, 1201, 1207, 1209, 1211, 1226, 1244, 1281, 1290, 1305, 1326, 1334, 1339, 1342, 1345], "27": [1, 52, 262, 298, 305, 381, 418, 425, 442, 450, 614, 616, 618, 620, 622, 625, 627, 629, 705, 813, 921, 931, 1304, 1326, 1352, 1353], "16": [1, 37, 50, 69, 79, 136, 150, 165, 181, 188, 235, 278, 305, 378, 381, 477, 551, 571, 595, 610, 696, 705, 744, 758, 759, 762, 813, 838, 852, 879, 887, 901, 926, 931, 1049, 1063, 1170, 1185, 1216, 1227, 1282, 1298, 1326, 1345, 1346, 1348], "64": [1, 50, 52, 63, 65, 68, 71, 78, 81, 135, 155, 267, 305, 375, 571, 595, 813, 1185, 1326, 1345], "25": [1, 28, 37, 52, 109, 165, 188, 208, 235, 262, 267, 274, 278, 305, 391, 403, 405, 424, 427, 441, 443, 450, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 717, 753, 754, 755, 756, 757, 758, 764, 775, 800, 801, 813, 838, 852, 861, 868, 879, 899, 901, 926, 931, 1008, 1009, 1023, 1049, 1063, 1069, 1073, 1092, 1185, 1189, 1326, 1341, 1351], "125": [1, 37, 52, 305, 313, 792, 813, 890, 926, 1185, 1326], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 166, 305, 390, 465, 813, 839, 926], "activ": [2, 8, 9, 19, 20, 22, 23, 24, 25, 29, 30, 510, 658, 1133, 1244], "bool": [2, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 54, 55, 56, 85, 86, 102, 103, 104, 105, 107, 108, 109, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 152, 155, 158, 159, 160, 161, 165, 171, 176, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 215, 224, 226, 235, 236, 237, 238, 239, 244, 248, 250, 251, 254, 258, 260, 263, 264, 268, 269, 270, 271, 273, 274, 276, 278, 287, 289, 292, 295, 305, 315, 316, 317, 318, 319, 320, 330, 333, 334, 337, 341, 342, 350, 355, 358, 359, 361, 362, 363, 364, 365, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 409, 426, 428, 441, 446, 447, 448, 449, 450, 451, 452, 468, 470, 471, 474, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 497, 500, 501, 505, 510, 513, 515, 517, 527, 534, 538, 541, 547, 548, 550, 552, 556, 557, 558, 559, 560, 561, 565, 584, 585, 587, 589, 592, 593, 598, 601, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 637, 642, 644, 645, 648, 649, 650, 652, 653, 655, 660, 673, 674, 675, 676, 681, 682, 684, 691, 693, 694, 696, 698, 702, 704, 715, 716, 718, 721, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 739, 740, 743, 744, 748, 753, 754, 755, 756, 757, 768, 769, 772, 775, 785, 788, 792, 795, 800, 801, 803, 804, 813, 829, 831, 832, 834, 835, 838, 843, 845, 847, 848, 851, 852, 853, 854, 855, 856, 860, 861, 865, 866, 870, 875, 879, 884, 887, 889, 890, 895, 896, 897, 898, 901, 910, 912, 915, 918, 926, 930, 931, 935, 936, 938, 947, 950, 951, 954, 958, 959, 967, 972, 974, 975, 977, 978, 980, 982, 985, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1027, 1048, 1050, 1063, 1069, 1070, 1072, 1074, 1075, 1082, 1088, 1089, 1092, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1123, 1124, 1128, 1129, 1133, 1136, 1138, 1140, 1150, 1157, 1161, 1164, 1171, 1183, 1186, 1187, 1189, 1191, 1192, 1193, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1216, 1217, 1218, 1219, 1224, 1229, 1231, 1234, 1235, 1236, 1238, 1239, 1241, 1246, 1259, 1260, 1261, 1262, 1267, 1268, 1270, 1277, 1279, 1280, 1282, 1284, 1301, 1305, 1306, 1307, 1311, 1314, 1316, 1326, 1334, 1342, 1346, 1350], "none": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 55, 57, 60, 63, 64, 86, 102, 104, 105, 106, 107, 108, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 156, 158, 160, 164, 165, 169, 175, 176, 186, 188, 189, 191, 192, 193, 199, 203, 207, 208, 209, 211, 212, 214, 217, 219, 222, 223, 226, 235, 236, 239, 243, 246, 247, 249, 250, 253, 258, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 286, 290, 305, 316, 318, 319, 320, 332, 333, 334, 341, 342, 354, 357, 363, 364, 370, 376, 377, 378, 381, 388, 393, 394, 402, 423, 426, 427, 441, 448, 449, 450, 451, 452, 453, 456, 457, 458, 464, 471, 472, 474, 477, 478, 479, 488, 490, 491, 492, 498, 500, 501, 509, 515, 517, 519, 527, 528, 529, 530, 531, 533, 540, 548, 550, 551, 552, 561, 564, 565, 567, 572, 585, 586, 587, 588, 591, 598, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 639, 643, 644, 648, 649, 652, 654, 655, 658, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 679, 680, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 696, 698, 701, 702, 703, 704, 714, 715, 716, 726, 727, 728, 729, 731, 737, 739, 741, 743, 747, 753, 754, 755, 756, 757, 758, 760, 761, 768, 769, 770, 771, 772, 773, 774, 775, 777, 779, 782, 784, 788, 789, 790, 795, 797, 799, 800, 801, 803, 813, 829, 832, 833, 835, 837, 838, 841, 843, 846, 847, 852, 853, 855, 856, 859, 860, 861, 863, 865, 866, 870, 873, 879, 883, 885, 886, 887, 888, 889, 895, 896, 897, 898, 903, 908, 909, 913, 914, 926, 930, 931, 935, 936, 938, 945, 946, 950, 951, 958, 959, 971, 989, 990, 997, 1007, 1008, 1010, 1011, 1012, 1020, 1029, 1030, 1031, 1037, 1048, 1049, 1063, 1069, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1088, 1090, 1092, 1094, 1095, 1096, 1097, 1107, 1112, 1113, 1116, 1119, 1120, 1121, 1123, 1124, 1127, 1132, 1138, 1140, 1142, 1150, 1151, 1152, 1153, 1154, 1156, 1163, 1170, 1171, 1172, 1173, 1174, 1175, 1184, 1189, 1190, 1191, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1213, 1214, 1215, 1217, 1218, 1221, 1222, 1225, 1226, 1229, 1230, 1233, 1234, 1235, 1238, 1240, 1241, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1258, 1259, 1265, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 1282, 1284, 1287, 1290, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1315, 1326, 1334, 1335, 1336, 1337, 1339, 1343, 1350], "true": [2, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 54, 55, 56, 102, 103, 104, 105, 107, 108, 109, 111, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 153, 155, 158, 159, 160, 161, 165, 171, 176, 177, 180, 181, 185, 186, 187, 188, 190, 191, 198, 200, 201, 202, 205, 207, 208, 209, 214, 215, 221, 222, 224, 226, 227, 236, 237, 238, 239, 241, 250, 251, 254, 258, 260, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 278, 284, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 314, 315, 316, 317, 318, 319, 320, 331, 333, 334, 337, 341, 342, 350, 354, 358, 359, 361, 362, 364, 365, 377, 378, 379, 380, 381, 388, 395, 397, 400, 403, 406, 409, 419, 420, 423, 424, 426, 427, 428, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 452, 459, 466, 468, 469, 470, 471, 474, 477, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 497, 500, 501, 505, 513, 515, 517, 534, 538, 540, 547, 550, 552, 556, 557, 558, 559, 560, 561, 562, 565, 566, 584, 585, 587, 589, 592, 593, 598, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 637, 642, 644, 645, 648, 649, 650, 652, 653, 655, 660, 662, 664, 673, 674, 675, 681, 682, 684, 691, 693, 694, 696, 698, 702, 704, 716, 718, 721, 724, 725, 726, 727, 728, 729, 731, 734, 735, 736, 740, 753, 755, 756, 762, 768, 775, 785, 788, 792, 795, 800, 803, 804, 813, 829, 831, 832, 833, 834, 835, 838, 843, 845, 847, 848, 851, 852, 854, 855, 860, 861, 863, 865, 866, 870, 875, 881, 887, 889, 890, 895, 896, 897, 898, 901, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 930, 931, 935, 936, 938, 948, 950, 951, 954, 958, 959, 967, 974, 975, 977, 978, 980, 982, 985, 988, 989, 1007, 1013, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1027, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1070, 1072, 1074, 1075, 1082, 1088, 1089, 1092, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1123, 1124, 1128, 1136, 1138, 1140, 1157, 1161, 1171, 1177, 1183, 1186, 1187, 1189, 1192, 1193, 1207, 1216, 1229, 1231, 1234, 1235, 1236, 1238, 1239, 1241, 1246, 1248, 1250, 1259, 1260, 1261, 1267, 1268, 1270, 1277, 1279, 1280, 1282, 1284, 1301, 1306, 1307, 1314, 1316, 1317, 1326, 1334, 1336, 1338, 1342, 1343, 1346, 1353], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 813, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1326, 1334, 1335, 1336, 1337, 1338, 1339, 1350], "decim": [2, 10, 11, 12, 28, 29, 34, 37, 43, 114, 115, 128, 305, 630, 695, 813, 926, 931, 1211, 1281, 1326, 1345], "temporari": [2, 35, 305], "set": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 54, 55, 60, 63, 64, 66, 103, 104, 105, 108, 114, 115, 116, 119, 120, 122, 123, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 162, 169, 179, 187, 188, 189, 190, 191, 192, 193, 205, 208, 212, 214, 215, 217, 219, 235, 237, 239, 241, 243, 249, 253, 254, 260, 262, 263, 267, 269, 270, 272, 273, 278, 305, 316, 318, 320, 341, 342, 354, 370, 388, 426, 444, 450, 472, 484, 513, 515, 517, 527, 528, 529, 530, 531, 533, 538, 540, 550, 551, 552, 558, 564, 594, 598, 605, 610, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 632, 638, 642, 643, 648, 662, 663, 669, 674, 675, 679, 680, 685, 686, 687, 688, 689, 690, 691, 693, 694, 698, 721, 725, 727, 731, 735, 739, 753, 754, 755, 756, 757, 758, 768, 769, 772, 785, 788, 789, 790, 795, 800, 801, 803, 804, 813, 825, 834, 835, 841, 843, 851, 852, 853, 854, 855, 856, 860, 861, 865, 866, 870, 879, 881, 883, 888, 896, 898, 901, 908, 914, 926, 930, 935, 936, 958, 959, 971, 975, 983, 990, 1007, 1048, 1066, 1073, 1083, 1090, 1105, 1115, 1136, 1138, 1140, 1150, 1151, 1152, 1153, 1154, 1156, 1161, 1163, 1170, 1171, 1189, 1195, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1213, 1214, 1215, 1218, 1225, 1229, 1230, 1234, 1248, 1249, 1255, 1260, 1261, 1265, 1266, 1271, 1272, 1273, 1274, 1277, 1279, 1280, 1284, 1306, 1314, 1326, 1349, 1353], "remov": [2, 5, 40, 87, 114, 115, 128, 155, 158, 167, 188, 212, 214, 219, 235, 253, 260, 268, 274, 305, 320, 363, 364, 427, 441, 450, 453, 549, 574, 614, 616, 618, 620, 622, 625, 627, 629, 669, 679, 685, 686, 687, 688, 689, 690, 715, 716, 760, 813, 829, 840, 852, 879, 895, 926, 983, 1007, 1049, 1063, 1189, 1255, 1265, 1271, 1272, 1273, 1274, 1275, 1276, 1280, 1301, 1305, 1316, 1326, 1352], "onc": [2, 114, 115, 150, 211, 237, 239, 283, 305, 527, 550, 552, 632, 689, 690, 813, 830, 906, 926, 1150, 1171, 1213, 1275, 1276, 1326, 1337], "stabil": [2, 193, 305, 472, 813, 1090, 1326], "current": [2, 3, 4, 6, 7, 31, 35, 109, 116, 117, 119, 126, 133, 160, 161, 207, 208, 251, 262, 267, 305, 405, 449, 451, 452, 540, 591, 813, 832, 833, 860, 861, 890, 926, 931, 989, 993, 1014, 1023, 1072, 1074, 1075, 1185, 1304, 1309, 1326, 1336, 1350], "consid": [2, 38, 43, 44, 45, 46, 54, 55, 64, 66, 85, 86, 114, 115, 116, 126, 128, 133, 134, 137, 138, 139, 140, 158, 169, 171, 181, 204, 211, 217, 237, 251, 262, 267, 268, 270, 272, 273, 305, 320, 363, 364, 370, 387, 388, 427, 463, 474, 550, 552, 558, 572, 573, 576, 578, 580, 581, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 715, 716, 744, 762, 789, 790, 792, 809, 813, 829, 834, 835, 841, 857, 864, 870, 890, 895, 896, 898, 914, 926, 931, 982, 985, 990, 1006, 1007, 1049, 1070, 1092, 1107, 1171, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1216, 1217, 1304, 1309, 1326], "beta": 2, "cfg": [3, 5, 18, 153], "previous": [3, 4], "save": [3, 4, 7, 188, 208, 235, 274, 305, 396, 405, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 809, 813, 825, 852, 861, 879, 926, 1023, 1045, 1049, 1063], "option": [3, 4, 5, 6, 7, 31, 35, 36, 37, 48, 64, 114, 116, 117, 118, 119, 120, 122, 126, 129, 130, 131, 133, 134, 136, 141, 142, 143, 144, 147, 148, 149, 188, 203, 208, 217, 251, 258, 269, 273, 305, 395, 495, 558, 564, 611, 613, 615, 617, 619, 621, 624, 626, 628, 642, 650, 676, 680, 721, 795, 803, 813, 825, 852, 860, 861, 870, 890, 898, 926, 931, 1013, 1116, 1120, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1229, 1236, 1262, 1266, 1302, 1314, 1326, 1346], "from": [3, 4, 5, 6, 7, 11, 17, 29, 33, 34, 36, 37, 43, 48, 56, 77, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 159, 165, 166, 167, 172, 174, 179, 186, 188, 191, 205, 206, 207, 208, 209, 217, 226, 230, 235, 236, 238, 239, 241, 242, 251, 260, 267, 269, 270, 272, 273, 274, 280, 305, 308, 354, 388, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 448, 450, 453, 463, 465, 477, 495, 514, 527, 540, 552, 564, 582, 583, 585, 590, 591, 594, 598, 600, 610, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 632, 645, 657, 658, 661, 662, 663, 673, 680, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 719, 732, 733, 736, 737, 752, 753, 754, 755, 756, 757, 758, 772, 788, 792, 799, 800, 801, 809, 812, 813, 831, 838, 839, 840, 845, 852, 855, 860, 861, 870, 877, 879, 881, 882, 890, 896, 898, 903, 904, 926, 931, 971, 1007, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1073, 1078, 1116, 1120, 1137, 1150, 1163, 1180, 1181, 1182, 1185, 1189, 1201, 1213, 1243, 1244, 1247, 1248, 1249, 1259, 1266, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1284, 1301, 1317, 1326, 1334, 1335, 1336, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353], "json": [3, 4, 6, 7, 40, 41, 123, 124, 130, 132, 166, 243, 305, 390, 465, 564, 567, 662, 663, 664, 703, 813, 825, 839, 883, 926, 930, 1248, 1249, 1250, 1290], "paramet": [3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 60, 63, 64, 65, 66, 73, 77, 86, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 158, 159, 160, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 285, 288, 290, 291, 297, 299, 305, 313, 315, 316, 317, 318, 319, 320, 330, 337, 338, 341, 342, 349, 350, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 395, 397, 399, 400, 406, 423, 426, 427, 428, 430, 432, 433, 441, 444, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 477, 478, 479, 484, 495, 497, 499, 504, 505, 506, 507, 508, 510, 513, 514, 515, 516, 517, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 547, 548, 549, 550, 551, 552, 558, 564, 565, 569, 571, 574, 575, 576, 577, 578, 579, 584, 585, 589, 590, 591, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 704, 705, 706, 707, 709, 710, 711, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 813, 829, 831, 832, 834, 835, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 864, 865, 866, 870, 871, 874, 875, 876, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 908, 911, 913, 914, 920, 922, 926, 930, 931, 934, 935, 936, 937, 938, 947, 954, 955, 958, 959, 966, 967, 971, 972, 974, 975, 976, 977, 978, 979, 980, 983, 989, 990, 991, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1015, 1017, 1018, 1024, 1045, 1048, 1049, 1050, 1052, 1054, 1055, 1063, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1090, 1091, 1092, 1095, 1096, 1097, 1107, 1115, 1116, 1120, 1122, 1127, 1128, 1129, 1130, 1131, 1133, 1136, 1137, 1138, 1139, 1140, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1161, 1162, 1163, 1164, 1170, 1171, 1185, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1225, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1284, 1287, 1288, 1291, 1295, 1296, 1297, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1310, 1311, 1314, 1315, 1316, 1317, 1326, 1334, 1335, 1336, 1337, 1339, 1343, 1347, 1350], "produc": [3, 4, 144, 148, 207, 305, 338, 506, 507, 561, 774, 860, 865, 866, 926, 955, 1129, 1130], "load_from_fil": [3, 6, 7], "file": [3, 4, 6, 7, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 166, 174, 243, 305, 390, 465, 564, 567, 577, 579, 813, 839, 883, 926, 930, 1078, 1326], "path": [4, 7, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 166, 243, 305, 390, 564, 567, 634, 664, 813, 839, 883, 887, 926, 930, 1219, 1250, 1326, 1353], "load": [4, 6, 7, 105, 107, 116, 118, 119, 125, 129, 130, 147, 149, 305, 813, 825, 857, 864, 926, 930, 1353], "reset": [5, 153], "default": [5, 8, 10, 11, 15, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 54, 55, 56, 60, 63, 64, 65, 102, 104, 105, 106, 107, 108, 109, 114, 115, 117, 119, 120, 122, 123, 124, 125, 126, 128, 133, 137, 139, 141, 142, 143, 144, 145, 146, 147, 148, 153, 165, 169, 172, 187, 188, 189, 190, 191, 192, 193, 205, 207, 208, 215, 217, 224, 226, 235, 236, 237, 238, 239, 243, 246, 251, 252, 254, 260, 262, 263, 267, 270, 272, 273, 275, 280, 290, 305, 315, 316, 318, 342, 349, 354, 367, 388, 395, 426, 427, 441, 446, 448, 449, 451, 452, 472, 513, 517, 527, 532, 533, 535, 538, 540, 542, 543, 550, 551, 558, 561, 564, 582, 583, 585, 591, 598, 601, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 638, 647, 648, 657, 669, 673, 679, 680, 685, 686, 687, 688, 691, 693, 694, 696, 698, 721, 722, 725, 727, 731, 735, 736, 739, 740, 742, 753, 754, 755, 756, 757, 758, 761, 764, 768, 769, 770, 772, 784, 785, 788, 794, 795, 800, 801, 802, 804, 813, 834, 835, 838, 841, 843, 851, 852, 853, 854, 855, 856, 860, 861, 870, 879, 883, 885, 890, 891, 896, 898, 899, 904, 913, 926, 931, 935, 936, 959, 966, 971, 983, 990, 1007, 1008, 1013, 1048, 1049, 1063, 1069, 1071, 1072, 1074, 1075, 1090, 1136, 1140, 1150, 1155, 1156, 1161, 1163, 1170, 1180, 1181, 1185, 1189, 1191, 1195, 1213, 1221, 1225, 1233, 1234, 1235, 1243, 1246, 1255, 1259, 1265, 1266, 1271, 1272, 1273, 1274, 1277, 1279, 1280, 1282, 1284, 1304, 1306, 1314, 1315, 1326, 1345, 1353], "state": [5, 95, 744, 748, 825, 843, 845, 875, 887, 926], "note": [5, 11, 21, 36, 37, 47, 48, 55, 62, 63, 65, 78, 85, 86, 102, 103, 104, 106, 108, 109, 114, 116, 117, 118, 119, 123, 124, 129, 130, 134, 137, 139, 142, 144, 148, 150, 153, 155, 158, 163, 165, 175, 188, 189, 191, 192, 193, 203, 204, 205, 207, 208, 211, 222, 225, 226, 235, 236, 237, 238, 246, 251, 259, 262, 264, 267, 268, 269, 273, 274, 278, 280, 281, 305, 349, 370, 380, 381, 393, 394, 400, 419, 420, 423, 427, 441, 450, 457, 463, 465, 472, 479, 488, 490, 494, 510, 513, 532, 538, 540, 552, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 596, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 642, 649, 656, 657, 658, 659, 660, 661, 665, 666, 674, 675, 680, 686, 687, 688, 691, 692, 701, 702, 707, 708, 717, 726, 728, 736, 744, 753, 754, 756, 757, 758, 762, 772, 785, 787, 788, 792, 800, 801, 803, 804, 809, 813, 824, 829, 835, 838, 845, 846, 852, 853, 855, 856, 857, 861, 864, 877, 879, 885, 887, 889, 890, 895, 898, 901, 904, 905, 926, 931, 966, 990, 1000, 1001, 1008, 1011, 1012, 1018, 1041, 1042, 1045, 1049, 1063, 1073, 1080, 1089, 1090, 1097, 1133, 1136, 1155, 1161, 1171, 1195, 1199, 1207, 1214, 1217, 1221, 1224, 1229, 1235, 1242, 1243, 1244, 1245, 1246, 1247, 1251, 1252, 1260, 1261, 1266, 1272, 1273, 1274, 1277, 1278, 1287, 1294, 1307, 1309, 1326, 1330, 1334, 1338, 1339, 1350], "method": [5, 32, 35, 36, 37, 38, 39, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 103, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 134, 141, 144, 148, 153, 156, 165, 166, 169, 174, 178, 181, 187, 189, 190, 191, 192, 197, 199, 205, 211, 212, 214, 219, 222, 228, 232, 236, 237, 238, 246, 253, 256, 270, 278, 285, 286, 291, 297, 305, 313, 316, 317, 320, 349, 370, 382, 383, 384, 385, 386, 390, 430, 433, 447, 448, 456, 463, 465, 468, 470, 477, 482, 486, 489, 494, 497, 506, 520, 532, 538, 547, 548, 549, 551, 552, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 595, 596, 599, 601, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 635, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 687, 688, 689, 690, 695, 701, 706, 707, 710, 711, 717, 719, 724, 740, 775, 786, 805, 806, 808, 809, 813, 814, 815, 818, 819, 820, 821, 822, 825, 835, 838, 839, 841, 853, 854, 855, 856, 859, 865, 876, 885, 894, 896, 901, 908, 909, 914, 920, 926, 937, 938, 966, 983, 990, 1002, 1003, 1004, 1005, 1008, 1052, 1055, 1078, 1079, 1095, 1102, 1108, 1129, 1143, 1155, 1161, 1170, 1171, 1190, 1191, 1200, 1206, 1216, 1218, 1221, 1237, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1281, 1287, 1296, 1297, 1308, 1316, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333, 1338], "oper": [5, 37, 47, 56, 86, 91, 92, 99, 102, 104, 105, 106, 107, 108, 114, 116, 156, 161, 174, 177, 180, 187, 190, 197, 198, 209, 211, 218, 222, 224, 225, 229, 233, 235, 238, 239, 246, 257, 263, 264, 269, 272, 282, 283, 305, 313, 314, 317, 349, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 447, 448, 463, 465, 468, 470, 494, 497, 527, 528, 529, 530, 531, 532, 540, 547, 566, 569, 571, 572, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 595, 596, 603, 614, 616, 618, 620, 622, 625, 627, 629, 632, 635, 706, 707, 717, 724, 725, 727, 738, 739, 743, 759, 792, 803, 813, 825, 833, 836, 838, 842, 845, 851, 854, 857, 860, 864, 870, 871, 880, 885, 890, 900, 906, 926, 930, 966, 993, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1078, 1150, 1151, 1152, 1153, 1154, 1155, 1193, 1213, 1221, 1300, 1305, 1306, 1307, 1316, 1326, 1349], "environ": [5, 31, 126, 133, 147, 150, 262, 305], "ani": [5, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 53, 54, 55, 63, 64, 66, 102, 103, 104, 105, 106, 107, 108, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 134, 141, 143, 144, 146, 148, 153, 156, 163, 169, 174, 176, 177, 180, 203, 205, 206, 211, 215, 224, 225, 236, 237, 238, 251, 254, 258, 259, 262, 263, 264, 267, 270, 272, 273, 281, 305, 313, 316, 317, 320, 342, 365, 387, 388, 427, 428, 447, 448, 458, 459, 463, 466, 468, 470, 474, 484, 497, 504, 510, 517, 547, 548, 550, 551, 552, 558, 566, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 589, 594, 596, 598, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 648, 650, 673, 687, 688, 689, 690, 691, 693, 694, 696, 698, 706, 707, 710, 717, 724, 725, 726, 728, 729, 739, 740, 741, 772, 775, 789, 790, 792, 803, 813, 834, 835, 841, 847, 848, 874, 890, 896, 898, 905, 926, 930, 931, 935, 938, 959, 985, 1006, 1007, 1049, 1050, 1078, 1081, 1085, 1092, 1105, 1119, 1127, 1133, 1140, 1170, 1171, 1189, 1195, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1215, 1218, 1234, 1236, 1259, 1277, 1279, 1280, 1282, 1284, 1296, 1304, 1305, 1306, 1307, 1309, 1326, 1350, 1353], "local": [5, 36, 116, 118, 129, 130, 133, 305, 441, 592, 593, 813, 982, 984, 1019, 1020, 1049, 1053, 1063, 1186, 1187, 1326], "non": [5, 34, 36, 37, 43, 48, 63, 64, 107, 135, 158, 164, 189, 192, 206, 217, 235, 241, 242, 246, 268, 269, 273, 278, 279, 305, 363, 370, 376, 377, 395, 426, 479, 540, 550, 551, 552, 591, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 651, 652, 658, 665, 701, 705, 715, 716, 726, 728, 737, 738, 739, 741, 743, 747, 751, 758, 777, 779, 782, 789, 790, 791, 795, 797, 813, 829, 837, 853, 856, 870, 879, 881, 882, 885, 895, 898, 901, 902, 926, 930, 931, 990, 997, 1008, 1013, 1048, 1097, 1163, 1171, 1185, 1195, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1221, 1237, 1238, 1244, 1251, 1287, 1306, 1326, 1343], "env": [5, 149], "back": [5, 48, 174, 188, 191, 263, 264, 305, 564, 590, 699, 813, 852, 855, 883, 926, 1078, 1285, 1307, 1326], "valu": [5, 11, 12, 13, 14, 18, 29, 31, 33, 34, 37, 43, 47, 48, 56, 57, 60, 73, 74, 83, 86, 91, 104, 105, 107, 108, 114, 115, 116, 117, 119, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 155, 157, 158, 165, 169, 171, 174, 175, 176, 177, 181, 186, 188, 191, 193, 194, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 226, 227, 228, 230, 235, 236, 237, 238, 239, 243, 246, 247, 250, 252, 253, 254, 255, 258, 259, 263, 264, 268, 269, 272, 273, 274, 275, 282, 286, 287, 289, 292, 293, 295, 296, 305, 312, 313, 314, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 381, 387, 388, 391, 393, 394, 399, 403, 418, 424, 442, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 527, 532, 534, 535, 536, 537, 540, 541, 542, 544, 546, 547, 550, 551, 552, 553, 554, 555, 568, 569, 570, 571, 572, 582, 583, 584, 585, 588, 590, 591, 594, 595, 598, 599, 601, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 639, 640, 641, 642, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 657, 660, 661, 662, 663, 664, 666, 671, 672, 674, 675, 677, 680, 682, 683, 684, 692, 701, 703, 706, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 730, 734, 737, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 761, 762, 767, 768, 769, 770, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 789, 790, 796, 797, 803, 813, 828, 829, 838, 841, 846, 847, 848, 852, 855, 858, 859, 860, 861, 867, 868, 869, 870, 872, 873, 876, 877, 879, 883, 885, 886, 889, 891, 892, 895, 898, 899, 909, 910, 912, 915, 916, 918, 919, 926, 931, 933, 935, 936, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 955, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 983, 987, 990, 991, 992, 994, 995, 996, 997, 1006, 1007, 1008, 1009, 1011, 1012, 1017, 1021, 1040, 1046, 1064, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1080, 1081, 1084, 1085, 1086, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1099, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1121, 1122, 1123, 1124, 1125, 1126, 1129, 1130, 1131, 1132, 1135, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1150, 1155, 1157, 1158, 1159, 1160, 1164, 1165, 1170, 1171, 1172, 1173, 1175, 1176, 1178, 1180, 1181, 1182, 1184, 1185, 1188, 1189, 1190, 1191, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1222, 1226, 1227, 1228, 1229, 1231, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1252, 1257, 1258, 1260, 1261, 1263, 1266, 1268, 1269, 1270, 1278, 1287, 1290, 1294, 1295, 1296, 1297, 1298, 1299, 1306, 1307, 1308, 1312, 1314, 1316, 1317, 1326, 1334, 1338, 1340, 1342, 1343, 1345, 1346, 1352, 1353], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 73, 77, 85, 86, 88, 90, 91, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 123, 124, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 813, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 987, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1219, 1220, 1221, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1257, 1258, 1260, 1261, 1262, 1263, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1290, 1291, 1293, 1294, 1295, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1326, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1351, 1352], "contain": [6, 34, 35, 36, 37, 43, 48, 53, 104, 107, 109, 116, 117, 118, 129, 130, 137, 138, 143, 144, 146, 148, 158, 162, 169, 170, 188, 191, 201, 206, 222, 262, 263, 267, 268, 273, 286, 305, 316, 318, 320, 342, 361, 362, 390, 471, 484, 517, 551, 552, 648, 655, 657, 659, 660, 664, 683, 684, 701, 725, 726, 727, 728, 739, 743, 775, 813, 829, 836, 839, 841, 842, 852, 855, 875, 895, 898, 909, 926, 930, 931, 935, 936, 959, 1007, 1088, 1140, 1170, 1177, 1189, 1234, 1241, 1243, 1245, 1246, 1250, 1269, 1270, 1287, 1300, 1306, 1326, 1342], "save_to_fil": 6, "json_str": [6, 123, 124], "written": [7, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 243, 305, 564, 883, 926], "leav": [7, 217, 305, 540, 870, 926], "directli": [7, 31, 55, 116, 144, 148, 153, 238, 262, 305, 449, 451, 452, 605, 788, 813, 835, 926, 983, 1072, 1074, 1075, 1195, 1304, 1326, 1336, 1353], "ascii": [8, 21, 650, 661, 665, 666, 668, 676, 678, 680, 692, 701, 931, 1236, 1247, 1251, 1252, 1254, 1262, 1264, 1266, 1278, 1287], "charact": [8, 10, 13, 21, 27, 28, 29, 34, 35, 43, 113, 114, 115, 117, 128, 305, 423, 656, 658, 661, 665, 666, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 701, 875, 926, 931, 1045, 1242, 1244, 1247, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1264, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1274, 1278, 1287, 1346], "displai": [8, 11, 12, 13, 14, 18, 20, 24, 26, 37, 165, 186, 305, 838, 843, 926, 1352], "tabl": [8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 36, 37, 102, 109, 118, 119, 129, 130, 207, 226, 251, 257, 264, 272, 273, 305, 825, 860, 890, 898, 926, 1335, 1336, 1337, 1339, 1340, 1349, 1350], "outlin": 8, "fals": [8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 48, 54, 55, 56, 103, 104, 105, 107, 108, 109, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 155, 158, 159, 160, 161, 165, 171, 180, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 244, 248, 250, 251, 254, 258, 260, 263, 264, 268, 269, 270, 273, 274, 276, 278, 287, 289, 292, 293, 295, 298, 305, 316, 317, 318, 320, 330, 333, 334, 337, 341, 342, 350, 355, 358, 361, 362, 364, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 409, 426, 428, 441, 446, 447, 448, 449, 450, 451, 452, 470, 471, 474, 479, 480, 481, 483, 484, 485, 487, 488, 490, 491, 492, 493, 495, 497, 500, 501, 505, 510, 513, 515, 517, 527, 534, 538, 541, 547, 548, 550, 552, 556, 558, 560, 562, 565, 584, 585, 587, 589, 592, 593, 598, 601, 610, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 632, 634, 637, 642, 644, 645, 648, 649, 650, 652, 655, 660, 662, 673, 674, 675, 676, 681, 682, 684, 691, 693, 694, 696, 716, 718, 721, 724, 725, 726, 727, 728, 731, 734, 735, 736, 739, 740, 743, 744, 748, 753, 754, 755, 756, 757, 768, 769, 772, 785, 788, 792, 795, 800, 801, 803, 804, 813, 829, 831, 832, 833, 834, 835, 838, 843, 845, 851, 852, 853, 854, 855, 856, 860, 861, 863, 865, 866, 875, 879, 884, 887, 889, 890, 895, 896, 898, 901, 910, 912, 915, 916, 918, 921, 926, 930, 931, 935, 936, 947, 950, 951, 954, 958, 959, 967, 972, 974, 975, 977, 978, 980, 982, 985, 988, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1013, 1027, 1048, 1050, 1063, 1069, 1070, 1072, 1073, 1074, 1075, 1082, 1083, 1087, 1088, 1089, 1097, 1098, 1099, 1101, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1120, 1123, 1124, 1128, 1133, 1136, 1138, 1140, 1150, 1157, 1161, 1164, 1177, 1183, 1186, 1187, 1189, 1191, 1192, 1193, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1216, 1219, 1224, 1229, 1231, 1234, 1235, 1236, 1238, 1241, 1246, 1248, 1259, 1260, 1261, 1262, 1267, 1268, 1270, 1277, 1279, 1280, 1282, 1301, 1306, 1307, 1311, 1314, 1316, 1317, 1326, 1342, 1346, 1350], "revert": [8, 10, 11], "utf8_full_condens": [8, 21, 109], "format": [8, 12, 16, 17, 21, 33, 34, 37, 38, 39, 40, 43, 112, 114, 115, 116, 120, 122, 128, 134, 173, 186, 205, 217, 237, 238, 243, 259, 303, 305, 427, 430, 433, 564, 565, 691, 693, 694, 698, 758, 843, 844, 870, 883, 926, 1052, 1055, 1277, 1279, 1280, 1284, 1325, 1347], "style": [8, 21, 37, 116, 226, 305], "abc": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 313, 658, 674, 687, 813, 931, 1244, 1260, 1261], "xyz": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 313, 652, 658, 813, 1238, 1244, 1302, 1326], "f64": [8, 10, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 48, 50, 52, 56, 73, 103, 105, 123, 134, 141, 144, 159, 160, 161, 163, 165, 166, 167, 170, 175, 176, 180, 185, 186, 187, 188, 198, 199, 207, 208, 213, 214, 215, 216, 220, 226, 227, 228, 249, 250, 252, 254, 267, 275, 278, 283, 287, 289, 292, 293, 294, 295, 297, 298, 305, 312, 315, 322, 323, 324, 325, 326, 327, 345, 351, 356, 365, 368, 369, 373, 374, 375, 388, 389, 393, 394, 428, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 462, 463, 468, 470, 477, 478, 488, 490, 491, 492, 494, 495, 497, 510, 522, 523, 535, 542, 543, 544, 545, 547, 553, 554, 555, 568, 571, 573, 582, 583, 584, 585, 591, 595, 598, 599, 600, 601, 605, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 640, 641, 642, 646, 647, 705, 712, 713, 717, 722, 732, 733, 737, 738, 740, 742, 759, 760, 775, 778, 779, 780, 794, 802, 809, 813, 831, 832, 838, 840, 846, 847, 851, 852, 859, 860, 861, 868, 869, 876, 889, 891, 899, 901, 903, 906, 910, 912, 915, 916, 917, 918, 920, 921, 926, 931, 939, 940, 941, 942, 943, 944, 962, 968, 973, 986, 987, 994, 995, 996, 1007, 1008, 1011, 1012, 1050, 1072, 1073, 1074, 1075, 1076, 1080, 1084, 1092, 1095, 1096, 1133, 1145, 1146, 1158, 1165, 1166, 1167, 1168, 1185, 1189, 1191, 1195, 1201, 1203, 1204, 1206, 1207, 1208, 1210, 1211, 1212, 1227, 1228, 1232, 1298, 1299, 1313, 1326, 1334, 1341, 1342, 1345, 1348, 1353], "multi": [9, 37, 114, 115, 267, 305, 453, 657, 813, 1243], "automat": [9, 102, 104, 105, 106, 108, 109, 114, 115, 116, 117, 119, 123, 124, 128, 132, 144, 148, 150, 241, 251, 278, 305, 427, 441, 550, 551, 605, 686, 687, 688, 792, 813, 881, 890, 901, 926, 930, 1049, 1063, 1170, 1195, 1272, 1273, 1274, 1309, 1326, 1336, 1339, 1350], "turn": [9, 43, 44, 45, 46, 54, 55, 114, 115, 128, 699, 834, 835, 843, 845, 865, 866, 875, 926, 1285], "struct": [9, 100, 109, 222, 241, 266, 271, 278, 305, 354, 388, 474, 540, 575, 577, 579, 598, 608, 609, 659, 662, 682, 683, 721, 744, 745, 747, 748, 749, 774, 813, 881, 897, 901, 914, 926, 971, 1007, 1163, 1189, 1198, 1245, 1248, 1268, 1269, 1306, 1326], "v": [9, 10, 42, 172, 305, 633, 726, 728, 813, 1215, 1326, 1336, 1337], "v2": [9, 120, 131], "out": [9, 15, 35, 43, 44, 45, 46, 109, 136, 235, 238, 305, 341, 359, 513, 515, 538, 649, 653, 660, 803, 879, 926, 958, 975, 1136, 1138, 1161, 1235, 1239, 1246], "separ": [10, 11, 25, 28, 33, 34, 43, 111, 113, 114, 115, 119, 128, 224, 226, 260, 269, 271, 305, 320, 339, 342, 511, 517, 552, 656, 739, 744, 745, 748, 749, 813, 897, 926, 956, 959, 1134, 1140, 1242, 1293, 1301, 1326, 1346], "set_thousands_separ": 10, "thousand": [10, 28], "group": [10, 28, 37, 42, 46, 115, 159, 187, 188, 189, 190, 191, 192, 206, 222, 224, 226, 235, 238, 272, 274, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305, 314, 364, 387, 455, 461, 466, 469, 510, 550, 552, 561, 563, 590, 601, 609, 610, 644, 645, 649, 657, 658, 659, 660, 674, 675, 716, 721, 775, 813, 831, 851, 852, 853, 854, 855, 856, 879, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926, 930, 931, 1006, 1133, 1199, 1235, 1243, 1244, 1245, 1246, 1260, 1261, 1314, 1326, 1334, 1341, 1349], "9876": 10, "54321": 10, "1010101": 10, "123456": [10, 931], "78": 10, "tbl_cell_numeric_align": [10, 11, 28], "right": [10, 11, 16, 17, 19, 28, 37, 64, 114, 115, 137, 138, 139, 140, 188, 189, 191, 192, 207, 208, 235, 273, 305, 388, 449, 451, 452, 479, 528, 529, 530, 531, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 642, 678, 737, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 860, 861, 879, 898, 926, 1007, 1072, 1074, 1075, 1097, 1151, 1152, 1153, 1154, 1189, 1215, 1229, 1264, 1326, 1340, 1344], "thousands_separ": [10, 11, 28], "decimal_separ": [10, 28], "float_precis": [10, 11, 28, 34, 37, 43, 305, 926], "print": [10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 115, 136, 137, 139, 170, 186, 187, 206, 209, 261, 282, 305, 476, 565, 813, 834, 858, 926, 931, 1105, 1303, 1326, 1353], "876": 10, "543": 10, "010": [10, 696, 1282], "101": [10, 28, 399, 696, 931, 1282, 1353], "000": [10, 11, 28, 37, 305, 1353], "123": [10, 652, 658, 675, 701, 803, 931, 1238, 1244, 1287, 1302, 1326], "456": [10, 11, 399, 931, 1017, 1302, 1326], "780": 10, "precis": [11, 12, 34, 37, 43, 64, 116, 205, 237, 238, 259, 262, 267, 305, 397, 695, 926, 931, 1015, 1281], "int": [11, 13, 14, 15, 18, 26, 27, 34, 35, 37, 42, 43, 46, 50, 57, 64, 105, 108, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 158, 160, 165, 172, 175, 176, 178, 182, 184, 186, 193, 194, 195, 197, 198, 203, 205, 206, 208, 210, 211, 212, 214, 219, 221, 222, 232, 233, 236, 239, 245, 246, 247, 249, 252, 253, 255, 256, 261, 265, 268, 272, 275, 277, 280, 281, 288, 299, 305, 313, 337, 341, 349, 351, 354, 356, 357, 363, 364, 387, 391, 395, 449, 451, 452, 456, 457, 458, 464, 466, 467, 469, 472, 473, 474, 499, 505, 508, 513, 514, 515, 516, 527, 532, 533, 535, 537, 538, 539, 540, 542, 589, 591, 594, 595, 598, 601, 604, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 643, 647, 657, 661, 662, 663, 668, 671, 672, 673, 674, 678, 680, 682, 683, 692, 695, 696, 701, 709, 710, 711, 715, 716, 722, 724, 731, 740, 742, 752, 755, 758, 764, 766, 768, 769, 784, 785, 788, 789, 790, 794, 795, 798, 799, 802, 804, 813, 829, 832, 838, 845, 846, 847, 850, 857, 861, 864, 875, 885, 886, 888, 891, 893, 894, 895, 899, 900, 904, 905, 911, 922, 926, 931, 945, 946, 954, 958, 966, 968, 971, 973, 979, 980, 988, 989, 1006, 1009, 1010, 1013, 1071, 1072, 1074, 1075, 1079, 1080, 1081, 1085, 1086, 1090, 1091, 1092, 1119, 1121, 1122, 1128, 1129, 1131, 1136, 1137, 1138, 1139, 1150, 1155, 1156, 1158, 1160, 1161, 1162, 1163, 1165, 1177, 1178, 1180, 1181, 1182, 1184, 1185, 1188, 1189, 1191, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217, 1218, 1221, 1222, 1225, 1230, 1233, 1243, 1247, 1248, 1249, 1254, 1257, 1258, 1259, 1260, 1264, 1266, 1268, 1269, 1278, 1281, 1282, 1287, 1294, 1295, 1296, 1297, 1303, 1310, 1315, 1326, 1336, 1339, 1350, 1353], "control": [11, 12, 37, 55, 56, 119, 142, 144, 250, 251, 262, 305, 605, 645, 792, 813, 835, 843, 889, 890, 926, 1195, 1304, 1326, 1339], "number": [11, 12, 13, 14, 15, 18, 26, 34, 35, 37, 42, 43, 46, 47, 48, 62, 63, 64, 78, 86, 96, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 123, 124, 125, 126, 128, 131, 132, 133, 135, 142, 144, 147, 149, 150, 151, 158, 160, 164, 172, 173, 175, 176, 186, 194, 195, 205, 206, 209, 210, 221, 222, 239, 246, 247, 252, 255, 268, 272, 275, 277, 286, 288, 290, 299, 305, 331, 347, 349, 354, 357, 363, 364, 376, 387, 388, 391, 395, 398, 407, 410, 413, 416, 418, 428, 442, 443, 445, 449, 450, 451, 452, 456, 457, 458, 464, 473, 488, 490, 498, 499, 508, 516, 519, 520, 525, 527, 532, 535, 537, 540, 542, 590, 594, 598, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 647, 661, 662, 663, 665, 666, 667, 670, 674, 680, 682, 683, 692, 695, 709, 715, 716, 722, 736, 740, 741, 742, 758, 766, 771, 789, 790, 794, 798, 802, 813, 829, 832, 837, 844, 845, 846, 847, 857, 864, 875, 885, 886, 891, 893, 895, 899, 900, 909, 911, 913, 922, 926, 964, 966, 971, 979, 989, 1006, 1007, 1009, 1013, 1016, 1025, 1028, 1034, 1038, 1040, 1050, 1064, 1065, 1067, 1071, 1072, 1073, 1074, 1075, 1079, 1080, 1081, 1091, 1104, 1121, 1122, 1131, 1139, 1142, 1143, 1148, 1150, 1155, 1160, 1163, 1177, 1178, 1189, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1221, 1222, 1225, 1233, 1247, 1248, 1249, 1251, 1252, 1253, 1256, 1260, 1266, 1268, 1269, 1278, 1281, 1295, 1310, 1315, 1326, 1340, 1345, 1353], "place": [11, 12, 34, 43, 158, 168, 174, 196, 197, 198, 226, 231, 233, 238, 247, 250, 268, 276, 305, 330, 342, 350, 363, 364, 517, 534, 636, 644, 645, 715, 716, 734, 813, 829, 886, 889, 895, 926, 937, 947, 959, 967, 1078, 1140, 1157, 1192, 1222, 1231, 1326], "float": [11, 12, 34, 37, 43, 67, 68, 114, 115, 119, 128, 134, 137, 138, 139, 140, 141, 144, 148, 155, 165, 172, 175, 208, 228, 239, 247, 262, 263, 297, 305, 337, 369, 388, 393, 394, 428, 446, 447, 448, 449, 451, 452, 457, 462, 463, 468, 470, 477, 481, 485, 488, 490, 491, 492, 497, 505, 527, 543, 547, 550, 553, 568, 582, 583, 584, 585, 595, 598, 599, 611, 612, 613, 615, 617, 619, 621, 622, 624, 626, 628, 630, 632, 717, 786, 788, 813, 838, 846, 861, 876, 886, 887, 920, 926, 931, 954, 980, 987, 1007, 1008, 1010, 1011, 1012, 1030, 1031, 1050, 1069, 1071, 1072, 1074, 1075, 1080, 1084, 1092, 1104, 1120, 1128, 1129, 1150, 1166, 1180, 1181, 1188, 1189, 1190, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1213, 1217, 1218, 1229, 1233, 1294, 1306, 1315, 1326, 1353], "point": [11, 12, 37, 38, 43, 44, 45, 46, 54, 55, 64, 66, 67, 68, 126, 133, 134, 144, 148, 175, 188, 191, 209, 251, 262, 267, 272, 273, 305, 369, 387, 388, 393, 427, 428, 457, 462, 463, 474, 488, 490, 527, 552, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 789, 790, 792, 813, 834, 835, 846, 852, 855, 865, 866, 877, 890, 898, 926, 985, 987, 1006, 1007, 1011, 1049, 1050, 1080, 1084, 1092, 1104, 1150, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1304, 1309, 1326], "standard": [11, 37, 252, 262, 267, 305, 410, 451, 624, 625, 642, 647, 664, 794, 809, 813, 891, 926, 1028, 1074, 1229, 1233, 1250, 1326, 1341, 1353], "behaviour": [11, 48, 56, 169, 251, 305, 649, 657, 658, 660, 674, 675, 717, 792, 813, 841, 890, 926, 1235, 1243, 1244, 1246, 1260, 1261], "when": [11, 15, 18, 20, 24, 34, 35, 36, 37, 42, 43, 46, 47, 63, 77, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 114, 115, 116, 117, 119, 120, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 144, 148, 156, 158, 165, 170, 172, 174, 176, 180, 188, 189, 191, 192, 207, 211, 225, 235, 236, 238, 241, 242, 246, 250, 260, 262, 263, 267, 268, 270, 273, 279, 305, 349, 370, 390, 395, 449, 451, 452, 458, 532, 540, 551, 562, 594, 605, 635, 644, 645, 650, 656, 661, 665, 666, 676, 680, 686, 687, 688, 691, 692, 734, 736, 744, 748, 762, 813, 829, 838, 839, 847, 852, 853, 855, 856, 860, 865, 866, 879, 881, 882, 885, 889, 895, 896, 898, 902, 926, 966, 990, 1008, 1013, 1071, 1072, 1074, 1075, 1078, 1081, 1155, 1170, 1195, 1214, 1217, 1221, 1236, 1242, 1247, 1251, 1252, 1262, 1266, 1272, 1273, 1274, 1277, 1278, 1301, 1306, 1326, 1339], "larger": [11, 43, 44, 45, 46, 54, 55, 158, 268, 305, 363, 463, 715, 716, 740, 813, 829, 834, 835, 895, 926], "should": [11, 35, 37, 43, 44, 45, 46, 56, 102, 104, 106, 108, 118, 119, 123, 124, 128, 132, 134, 141, 142, 144, 148, 158, 167, 205, 208, 211, 236, 237, 238, 250, 259, 260, 268, 271, 291, 305, 314, 363, 364, 367, 387, 390, 444, 450, 453, 488, 490, 510, 552, 564, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 642, 645, 715, 716, 721, 734, 758, 760, 772, 775, 789, 790, 803, 813, 829, 839, 840, 845, 860, 861, 866, 883, 889, 895, 897, 926, 931, 983, 1006, 1066, 1073, 1133, 1171, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1215, 1229, 1305, 1314, 1326], "ensur": [11, 37, 117, 143, 146, 187, 190, 224, 236, 263, 305, 479, 550, 813, 851, 854, 865, 866, 926, 930, 931, 1306, 1326], "awar": [11, 116, 205, 237, 238, 259, 305, 450, 650, 676, 813, 845, 926, 1073, 1236, 1262, 1280, 1326], "both": [11, 26, 34, 43, 47, 85, 86, 116, 188, 189, 191, 192, 207, 208, 218, 235, 236, 264, 273, 305, 319, 370, 388, 453, 479, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 680, 753, 754, 756, 757, 800, 801, 809, 813, 824, 852, 853, 855, 856, 860, 861, 871, 879, 898, 926, 931, 990, 1097, 1107, 1266, 1307, 1326, 1351], "limit": [11, 12, 46, 116, 117, 128, 150, 176, 305, 357, 371, 372, 458, 464, 813, 847, 857, 926, 991, 992, 1081, 1326, 1349], "represent": [11, 40, 41, 62, 63, 65, 78, 109, 261, 305, 367, 398, 403, 407, 410, 411, 413, 414, 416, 418, 421, 424, 425, 428, 442, 443, 445, 714, 813, 843, 863, 926, 983, 984, 1016, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1064, 1065, 1067, 1303, 1308, 1326], "look": [11, 188, 305, 358, 540, 852, 926, 974], "appli": [11, 21, 34, 37, 43, 56, 116, 128, 141, 144, 148, 165, 180, 211, 225, 250, 251, 262, 291, 305, 330, 398, 401, 402, 403, 407, 409, 410, 411, 413, 414, 416, 418, 421, 424, 425, 428, 431, 442, 443, 445, 451, 452, 548, 550, 552, 594, 611, 613, 614, 615, 616, 619, 620, 626, 627, 645, 674, 675, 691, 693, 694, 698, 734, 744, 745, 748, 749, 762, 773, 774, 775, 787, 792, 803, 813, 838, 857, 864, 865, 866, 874, 889, 890, 914, 926, 990, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1053, 1064, 1065, 1067, 1074, 1075, 1171, 1200, 1202, 1203, 1205, 1209, 1260, 1261, 1277, 1279, 1280, 1284, 1326, 1334], "float64": [11, 34, 37, 43, 105, 114, 123, 141, 144, 170, 172, 180, 240, 267, 278, 305, 322, 323, 324, 325, 326, 327, 365, 373, 374, 375, 389, 428, 450, 453, 488, 490, 600, 640, 641, 712, 713, 760, 785, 788, 804, 813, 842, 880, 901, 926, 931, 1050, 1073, 1307, 1313, 1326], "dtype": [11, 37, 47, 51, 57, 63, 77, 85, 86, 102, 104, 106, 108, 109, 114, 115, 116, 117, 119, 123, 124, 125, 128, 141, 142, 143, 144, 148, 155, 159, 188, 189, 191, 192, 208, 235, 261, 262, 263, 264, 267, 272, 281, 305, 320, 365, 366, 380, 381, 444, 453, 466, 504, 513, 538, 546, 548, 550, 551, 552, 558, 603, 604, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 662, 663, 691, 708, 710, 714, 720, 729, 731, 760, 764, 768, 769, 771, 772, 773, 774, 775, 785, 788, 795, 804, 813, 831, 852, 853, 855, 856, 861, 879, 905, 926, 931, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 980, 981, 982, 984, 989, 1000, 1001, 1008, 1009, 1066, 1071, 1098, 1100, 1104, 1107, 1114, 1116, 1118, 1123, 1124, 1127, 1136, 1162, 1169, 1170, 1171, 1197, 1216, 1223, 1248, 1249, 1277, 1294, 1303, 1304, 1306, 1307, 1308, 1309, 1313, 1326, 1353], "doe": [11, 34, 36, 43, 48, 56, 96, 102, 104, 105, 106, 108, 109, 114, 115, 116, 117, 118, 119, 123, 124, 128, 129, 132, 134, 161, 174, 177, 188, 193, 206, 207, 236, 237, 238, 270, 278, 281, 305, 308, 444, 459, 463, 472, 540, 551, 687, 688, 719, 809, 813, 833, 838, 845, 848, 852, 855, 860, 866, 896, 901, 905, 926, 993, 1066, 1078, 1082, 1089, 1090, 1170, 1224, 1316, 1326, 1330], "cover": 11, "nativ": [11, 35, 114, 116, 119, 120, 122, 126, 205, 211, 237, 238, 259, 263, 291, 305, 552, 775, 792, 813, 819, 890, 914, 926, 1171, 1306, 1326, 1353], "level": [11, 37, 42, 46, 128, 131, 132, 133, 180, 211, 222, 251, 305, 459, 813, 825, 857, 864, 890, 926], "larg": [11, 12, 15, 48, 116, 119, 125], "maximum": [11, 27, 34, 43, 64, 105, 108, 114, 115, 116, 119, 123, 125, 128, 132, 134, 142, 143, 144, 146, 148, 186, 188, 212, 213, 305, 335, 502, 553, 582, 592, 601, 661, 662, 663, 666, 680, 692, 776, 777, 813, 852, 867, 926, 952, 1029, 1125, 1172, 1180, 1186, 1191, 1247, 1248, 1249, 1252, 1266, 1278, 1326, 1341], "import": [11, 17, 29, 32, 34, 36, 37, 38, 39, 42, 48, 63, 102, 103, 106, 107, 114, 116, 117, 123, 124, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 159, 165, 166, 167, 169, 186, 188, 206, 208, 217, 224, 226, 251, 260, 262, 267, 272, 274, 305, 308, 389, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 459, 558, 564, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 732, 733, 736, 752, 753, 754, 755, 756, 757, 758, 800, 801, 809, 813, 825, 831, 835, 838, 839, 840, 841, 852, 861, 866, 870, 883, 926, 994, 996, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1101, 1106, 1110, 1111, 1116, 1201, 1227, 1298, 1326, 1330, 1348, 1353], "pi": [11, 389, 813, 994, 996, 1227, 1298, 1326, 1344, 1348], "e": [11, 32, 34, 36, 38, 39, 42, 43, 103, 114, 120, 122, 131, 134, 146, 166, 186, 194, 204, 231, 255, 257, 263, 272, 305, 313, 320, 390, 446, 450, 453, 479, 543, 552, 557, 558, 559, 561, 562, 563, 565, 566, 637, 642, 660, 687, 688, 760, 775, 803, 813, 839, 863, 877, 926, 931, 1069, 1073, 1097, 1216, 1229, 1246, 1326, 1342, 1346, 1353], "const": 11, "15": [11, 37, 136, 165, 188, 198, 211, 235, 305, 387, 391, 420, 427, 441, 450, 594, 610, 626, 663, 745, 755, 799, 800, 813, 838, 852, 879, 926, 931, 1006, 1009, 1049, 1063, 1073, 1249, 1326], "141592653589793": 11, "718281828459045": [11, 446, 543, 813, 1069, 1166, 1326], "fix": [11, 57, 66, 119, 142, 444, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 758, 813, 1066, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "align": [11, 16, 17, 37, 48, 56, 305, 1351], "numer": [11, 17, 34, 37, 43, 118, 129, 159, 167, 208, 217, 226, 263, 264, 272, 305, 313, 370, 463, 479, 545, 569, 571, 595, 604, 637, 659, 701, 706, 717, 813, 825, 831, 840, 861, 870, 926, 931, 990, 1008, 1097, 1114, 1216, 1223, 1245, 1287, 1306, 1326, 1345, 1353], "column": [11, 17, 18, 19, 22, 23, 25, 36, 37, 47, 48, 49, 56, 63, 77, 86, 88, 90, 102, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 158, 159, 163, 164, 167, 168, 169, 170, 173, 177, 178, 179, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 250, 252, 253, 254, 258, 260, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 290, 305, 315, 316, 318, 330, 339, 348, 350, 353, 364, 370, 376, 377, 388, 398, 399, 401, 402, 403, 407, 409, 410, 411, 413, 414, 416, 418, 421, 424, 425, 428, 430, 431, 433, 442, 443, 445, 450, 453, 455, 459, 461, 474, 478, 479, 494, 498, 504, 511, 513, 534, 538, 539, 540, 551, 552, 558, 559, 561, 563, 564, 573, 576, 578, 580, 581, 590, 596, 598, 602, 604, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 644, 645, 648, 656, 660, 661, 682, 683, 691, 692, 693, 694, 695, 696, 698, 703, 705, 707, 716, 723, 725, 726, 727, 728, 730, 731, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 813, 829, 831, 837, 840, 841, 842, 844, 848, 851, 852, 853, 854, 855, 856, 860, 861, 866, 867, 868, 869, 870, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 889, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 913, 914, 926, 931, 935, 936, 956, 965, 967, 970, 982, 984, 990, 997, 1007, 1016, 1019, 1020, 1021, 1025, 1027, 1028, 1032, 1034, 1035, 1038, 1040, 1043, 1046, 1047, 1050, 1052, 1053, 1055, 1064, 1065, 1067, 1073, 1077, 1089, 1092, 1096, 1127, 1134, 1136, 1157, 1162, 1189, 1196, 1199, 1223, 1234, 1242, 1246, 1268, 1269, 1277, 1279, 1280, 1281, 1282, 1284, 1290, 1293, 1301, 1302, 1314, 1326, 1340, 1342, 1343, 1345, 1346, 1348, 1351, 1352, 1353], "order": [11, 37, 43, 44, 45, 46, 48, 54, 60, 105, 116, 135, 137, 138, 158, 162, 169, 170, 177, 187, 188, 189, 190, 191, 192, 207, 224, 225, 226, 235, 237, 239, 240, 244, 250, 262, 263, 268, 270, 274, 305, 330, 350, 355, 363, 364, 367, 393, 394, 459, 509, 527, 534, 541, 601, 610, 632, 633, 634, 644, 645, 677, 687, 688, 689, 690, 704, 715, 716, 718, 719, 721, 734, 792, 803, 813, 824, 829, 836, 841, 842, 848, 851, 852, 853, 854, 855, 856, 860, 870, 879, 880, 884, 889, 890, 895, 896, 926, 931, 947, 967, 972, 983, 985, 1011, 1012, 1082, 1115, 1132, 1150, 1157, 1164, 1191, 1197, 1213, 1215, 1219, 1231, 1263, 1291, 1311, 1312, 1314, 1326, 1334, 1336, 1342, 1349, 1353], "cleanli": [11, 186, 305], "line": [11, 21, 37, 114, 115, 119, 128, 186, 200, 202, 305, 308, 657, 1243], "up": [11, 37, 77, 117, 205, 208, 237, 238, 259, 305, 320, 369, 552, 661, 692, 813, 860, 861, 866, 926, 931, 987, 1247, 1278, 1326], "xx": [11, 49, 51, 148, 165, 251, 305, 838, 926, 931, 1340, 1346, 1352], "yy": [11, 49, 51, 148, 165, 251, 305, 838, 926, 931, 1340, 1346, 1352], "11111111": 11, "44444444444": 11, "100000": [11, 28], "987654321": 11, "23456789": 11, "11": [11, 17, 42, 46, 136, 144, 157, 165, 208, 235, 305, 315, 419, 420, 423, 427, 441, 465, 477, 514, 567, 591, 601, 610, 612, 626, 643, 724, 796, 801, 813, 828, 834, 835, 838, 857, 864, 875, 879, 893, 926, 931, 1045, 1049, 1063, 1171, 1201, 1326], "111": [11, 1343], "100": [11, 18, 28, 37, 105, 108, 114, 115, 116, 119, 123, 125, 128, 132, 246, 305, 605, 635, 650, 662, 663, 676, 695, 757, 813, 885, 926, 931, 1167, 1195, 1202, 1203, 1205, 1221, 1236, 1248, 1249, 1262, 1281, 1326, 1343, 1353], "988": 11, "44": [11, 218, 305, 392, 813, 871, 926], "444": 11, "23": [11, 144, 165, 188, 235, 267, 305, 399, 403, 407, 424, 427, 443, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 755, 758, 799, 800, 801, 813, 838, 852, 879, 890, 926, 931, 1017, 1025, 1309, 1326, 1352, 1353], "789": [11, 931], "fmt": [12, 208, 305, 476, 763, 813, 858, 926], "floatfmt": 12, "mix": [12, 208, 263, 305, 792, 890, 926, 931, 1008, 1280, 1326], "how": [12, 36, 37, 48, 56, 90, 117, 126, 133, 169, 207, 208, 226, 272, 273, 305, 338, 367, 391, 426, 427, 441, 477, 506, 507, 508, 590, 604, 623, 691, 694, 736, 755, 803, 813, 841, 860, 898, 926, 930, 955, 983, 1009, 1048, 1049, 1063, 1129, 1130, 1131, 1207, 1277, 1280, 1326], "full": [12, 48, 56, 63, 105, 108, 114, 115, 116, 118, 123, 128, 129, 130, 132, 134, 188, 189, 191, 192, 207, 235, 273, 305, 661, 662, 663, 691, 692, 693, 694, 698, 852, 853, 855, 856, 860, 865, 866, 879, 898, 926, 931, 1247, 1248, 1249, 1277, 1278, 1279, 1280, 1284, 1326, 1340, 1353], "scientif": 12, "notat": [12, 37, 305], "small": [12, 117, 209, 305, 427, 845, 926, 1353], "2304980958725870923": 12, "1e6": 12, "1e": [12, 137, 138, 139, 140], "230498": 12, "0000e": 12, "230498095872587": 12, "1000000": [12, 1061], "00000001": [12, 724, 813], "plai": [13, 739], "sam": 13, "As": [13, 47, 85, 86, 102, 104, 105, 106, 108, 119, 123, 124, 132, 262, 267, 305, 540, 803, 926], "time": [13, 36, 53, 54, 55, 63, 65, 118, 128, 129, 144, 145, 148, 165, 174, 188, 189, 191, 192, 208, 235, 274, 305, 337, 363, 364, 396, 397, 399, 400, 401, 405, 406, 419, 420, 423, 426, 427, 430, 432, 433, 441, 444, 450, 504, 505, 540, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 638, 691, 694, 698, 714, 715, 716, 738, 739, 753, 754, 755, 756, 757, 758, 764, 800, 801, 813, 834, 835, 838, 852, 853, 855, 856, 861, 875, 879, 926, 931, 954, 979, 1014, 1015, 1017, 1018, 1023, 1024, 1045, 1048, 1049, 1052, 1054, 1055, 1063, 1066, 1073, 1078, 1127, 1128, 1129, 1199, 1225, 1277, 1280, 1284, 1308, 1310, 1326, 1334, 1339, 1347, 1353], "goe": 13, "By": [13, 15, 31, 48, 114, 115, 128, 188, 207, 208, 235, 237, 246, 252, 273, 274, 275, 305, 349, 423, 427, 441, 532, 535, 542, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 635, 647, 722, 740, 742, 753, 754, 756, 757, 758, 772, 794, 800, 801, 802, 813, 834, 852, 860, 861, 879, 885, 891, 899, 926, 966, 1045, 1049, 1063, 1155, 1221, 1233, 1315, 1326], "begin": [13, 37, 305, 449, 451, 452, 657, 692, 813, 1072, 1074, 1075, 1243, 1278, 1326], "beauti": 13, "friendship": 13, "len_byt": [13, 666, 667, 1252, 1253], "len": [13, 37, 144, 148, 206, 226, 281, 286, 291, 305, 376, 520, 552, 561, 563, 741, 768, 813, 905, 909, 914, 926, 1143, 1326], "u32": [13, 116, 157, 159, 164, 223, 280, 281, 286, 290, 296, 298, 305, 314, 321, 328, 329, 330, 331, 332, 335, 336, 338, 347, 376, 377, 474, 498, 502, 503, 507, 519, 525, 572, 588, 601, 609, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 633, 652, 660, 665, 666, 714, 719, 721, 725, 730, 734, 735, 741, 743, 768, 771, 783, 813, 828, 831, 837, 873, 904, 905, 909, 913, 919, 921, 926, 931, 947, 948, 949, 952, 953, 955, 964, 980, 984, 997, 1092, 1125, 1126, 1130, 1142, 1148, 1191, 1199, 1215, 1238, 1246, 1251, 1252, 1308, 1312, 1314, 1326, 1334, 1341, 1342, 1346], "go": [13, 114, 115, 128, 655, 1241], "37": [13, 931], "bea": 13, "48": [13, 144, 235, 305, 610, 705, 813, 879, 926, 931], "fmt_str_length": [13, 754, 757], "50": [13, 28, 37, 165, 174, 186, 305, 370, 427, 441, 754, 813, 838, 926, 931, 990, 1008, 1063, 1326, 1340], "element": [14, 15, 26, 143, 146, 158, 164, 203, 226, 236, 250, 252, 268, 275, 305, 320, 322, 323, 324, 325, 326, 327, 338, 339, 363, 364, 368, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 454, 455, 459, 472, 484, 498, 506, 507, 509, 510, 511, 514, 519, 520, 528, 529, 530, 531, 535, 542, 544, 545, 550, 552, 590, 591, 601, 604, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 633, 639, 640, 641, 645, 646, 647, 682, 683, 695, 712, 713, 715, 716, 722, 734, 740, 742, 789, 790, 794, 802, 813, 829, 837, 889, 891, 895, 899, 926, 938, 939, 940, 941, 942, 943, 944, 955, 956, 979, 986, 989, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1076, 1077, 1082, 1091, 1105, 1119, 1121, 1122, 1129, 1130, 1132, 1133, 1134, 1137, 1142, 1143, 1151, 1152, 1153, 1154, 1167, 1168, 1171, 1185, 1191, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1215, 1226, 1227, 1228, 1232, 1233, 1268, 1269, 1281, 1295, 1298, 1299, 1303, 1310, 1311, 1315, 1326, 1341, 1342], "empti": [14, 32, 34, 43, 92, 105, 114, 115, 119, 125, 128, 160, 161, 188, 217, 305, 656, 772, 791, 832, 833, 852, 870, 926, 931, 989, 993, 1100, 1242, 1326], "alwai": [14, 34, 36, 43, 64, 66, 114, 187, 190, 207, 211, 291, 305, 550, 561, 691, 753, 803, 813, 860, 866, 926, 1171, 1277, 1326, 1334, 1350, 1353], "neg": [14, 62, 63, 64, 65, 114, 115, 120, 122, 126, 135, 188, 189, 191, 192, 194, 210, 235, 246, 247, 249, 255, 281, 305, 349, 532, 533, 594, 610, 635, 636, 643, 661, 680, 692, 813, 852, 853, 855, 856, 879, 885, 886, 888, 904, 905, 926, 931, 966, 1091, 1122, 1155, 1156, 1221, 1222, 1230, 1247, 1266, 1278, 1295, 1326], "result": [14, 34, 40, 41, 42, 43, 44, 45, 46, 48, 56, 106, 107, 108, 116, 117, 118, 119, 128, 131, 133, 134, 148, 174, 188, 191, 193, 207, 208, 222, 226, 235, 238, 243, 246, 247, 262, 263, 264, 274, 281, 283, 290, 305, 395, 427, 430, 433, 441, 449, 450, 451, 452, 456, 463, 472, 479, 495, 539, 540, 550, 552, 564, 590, 598, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 635, 636, 656, 681, 682, 694, 717, 721, 743, 744, 745, 748, 749, 753, 754, 755, 756, 757, 758, 772, 774, 785, 788, 789, 790, 792, 804, 813, 830, 834, 838, 852, 853, 855, 856, 860, 865, 866, 875, 879, 883, 885, 886, 905, 906, 913, 926, 937, 1007, 1049, 1052, 1055, 1063, 1072, 1074, 1075, 1078, 1079, 1090, 1097, 1120, 1162, 1171, 1189, 1195, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1219, 1221, 1222, 1242, 1267, 1268, 1280, 1305, 1306, 1307, 1314, 1326, 1340, 1350, 1351, 1353], "being": [14, 38, 43, 44, 45, 46, 54, 55, 64, 66, 114, 115, 116, 126, 128, 133, 134, 159, 173, 251, 260, 262, 267, 272, 273, 305, 320, 387, 388, 427, 474, 552, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 656, 736, 759, 789, 790, 792, 813, 831, 834, 835, 844, 845, 890, 898, 926, 985, 1006, 1007, 1049, 1092, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1242, 1301, 1304, 1309, 1326, 1353], "A": [14, 34, 37, 43, 54, 55, 60, 66, 109, 114, 115, 116, 117, 128, 130, 135, 150, 162, 170, 180, 188, 207, 208, 213, 215, 220, 226, 254, 258, 272, 273, 274, 278, 279, 305, 312, 393, 394, 399, 430, 433, 447, 448, 456, 468, 470, 481, 485, 488, 490, 497, 540, 547, 550, 562, 575, 584, 585, 607, 612, 613, 615, 617, 619, 621, 624, 626, 628, 649, 650, 651, 652, 657, 658, 659, 660, 661, 664, 666, 674, 675, 676, 680, 692, 701, 738, 758, 759, 763, 813, 836, 842, 852, 860, 861, 877, 898, 901, 902, 926, 931, 1011, 1012, 1017, 1052, 1055, 1079, 1201, 1202, 1203, 1205, 1208, 1209, 1210, 1235, 1236, 1237, 1238, 1243, 1244, 1245, 1246, 1247, 1250, 1252, 1260, 1261, 1262, 1266, 1278, 1287, 1326, 1334, 1337, 1350], "content": [14, 638, 813, 1225, 1326], "final": [14, 37, 48, 133, 208, 305, 449, 451, 452, 813, 838, 845, 926, 930, 1072, 1074, 1075, 1326, 1351], "item": [14, 56, 115, 186, 236, 239, 305, 337, 341, 342, 391, 455, 505, 508, 515, 517, 527, 632, 683, 813, 954, 958, 959, 1009, 1077, 1128, 1131, 1138, 1140, 1150, 1213, 1269, 1326], "num": [14, 37, 266, 305, 479, 813, 1097, 1326], "fmt_table_cell_list_len": 14, "10": [14, 17, 18, 28, 32, 34, 36, 37, 38, 39, 42, 46, 48, 56, 109, 117, 128, 136, 161, 165, 174, 185, 186, 188, 194, 196, 198, 199, 204, 208, 221, 225, 226, 227, 231, 233, 235, 241, 251, 255, 278, 283, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 315, 319, 328, 329, 330, 332, 370, 378, 381, 391, 395, 396, 398, 399, 401, 402, 405, 407, 411, 413, 414, 416, 419, 420, 421, 426, 427, 428, 431, 441, 444, 450, 471, 472, 473, 477, 484, 494, 499, 508, 514, 516, 523, 533, 535, 537, 542, 544, 561, 563, 573, 588, 591, 594, 605, 610, 643, 696, 705, 709, 724, 736, 737, 744, 753, 755, 756, 759, 762, 764, 766, 772, 774, 798, 801, 813, 834, 835, 838, 852, 857, 859, 864, 874, 875, 879, 881, 892, 893, 901, 906, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 931, 990, 1009, 1013, 1014, 1016, 1017, 1023, 1034, 1048, 1063, 1066, 1069, 1073, 1091, 1105, 1122, 1131, 1139, 1146, 1156, 1158, 1160, 1165, 1167, 1171, 1185, 1195, 1214, 1217, 1282, 1295, 1304, 1306, 1309, 1326, 1334, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1353], "size": [15, 42, 46, 114, 115, 116, 141, 142, 143, 144, 148, 150, 172, 272, 305, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 731, 768, 769, 789, 790, 813, 834, 926, 1071, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1326, 1353], "overwrit": [15, 35, 36, 102, 104, 105, 106, 108, 114, 115, 123, 124, 128, 132, 155, 273, 305, 315, 705, 813, 845, 926], "chunk": [15, 46, 111, 114, 115, 126, 128, 131, 132, 133, 144, 148, 174, 206, 221, 263, 305, 319, 602, 813, 926, 937, 988, 1078, 1087, 1177, 1192, 1300, 1306, 1326], "stream": [15, 38, 39, 43, 44, 45, 46, 54, 55, 122, 158, 187, 190, 207, 268, 270, 305, 550, 813, 829, 834, 835, 843, 845, 851, 854, 860, 865, 866, 870, 875, 887, 889, 895, 896, 926], "engin": [15, 35, 116, 117, 119, 150, 187, 190, 207, 211, 263, 270, 291, 305, 550, 813, 851, 854, 860, 865, 866, 870, 896, 914, 926, 1171, 1306, 1326], "determin": [15, 34, 37, 43, 48, 56, 83, 114, 115, 116, 119, 125, 126, 128, 133, 135, 156, 158, 180, 188, 191, 205, 206, 211, 226, 235, 268, 269, 274, 305, 363, 364, 367, 409, 426, 427, 441, 474, 540, 551, 561, 598, 604, 605, 613, 615, 617, 619, 621, 624, 626, 628, 642, 650, 661, 691, 692, 694, 695, 715, 716, 755, 785, 788, 804, 813, 829, 836, 842, 852, 855, 879, 895, 900, 926, 983, 1027, 1048, 1049, 1063, 1092, 1163, 1170, 1189, 1195, 1229, 1236, 1277, 1280, 1281, 1326], "thread": [15, 34, 43, 55, 111, 114, 115, 117, 150, 151, 250, 305, 320, 363, 364, 510, 552, 645, 715, 716, 734, 813, 829, 835, 889, 895, 926, 967, 1133, 1157, 1231, 1326], "pool": [15, 55, 150, 151, 835, 926], "For": [15, 36, 37, 116, 117, 118, 119, 129, 130, 169, 174, 207, 208, 235, 262, 291, 305, 308, 419, 420, 449, 451, 452, 463, 540, 552, 562, 603, 642, 649, 657, 658, 659, 660, 661, 692, 744, 748, 758, 762, 763, 809, 813, 841, 861, 879, 914, 926, 930, 1072, 1074, 1075, 1078, 1107, 1171, 1193, 1229, 1235, 1243, 1244, 1245, 1246, 1247, 1278, 1304, 1326, 1330], "some": [15, 31, 37, 47, 86, 105, 114, 115, 116, 119, 128, 155, 169, 238, 263, 305, 809, 841, 926, 1105, 1326, 1353], "dataset": [15, 42, 66, 114, 115, 119, 125, 128, 134, 207, 267, 305, 495, 813, 825, 860, 865, 866, 926, 1120, 1326, 1351], "esp": 15, "have": [15, 31, 37, 47, 48, 63, 86, 103, 112, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 166, 174, 205, 207, 208, 229, 235, 237, 238, 259, 267, 281, 305, 387, 390, 449, 451, 452, 552, 562, 601, 605, 610, 659, 813, 839, 860, 870, 879, 904, 905, 926, 930, 931, 1006, 1008, 1072, 1074, 1075, 1078, 1089, 1191, 1195, 1280, 1326, 1349, 1351, 1353], "too": [15, 845, 926], "optimist": 15, "lead": [15, 42, 109, 134, 188, 189, 191, 192, 215, 235, 246, 254, 305, 349, 450, 466, 469, 532, 550, 552, 610, 634, 635, 669, 685, 686, 688, 710, 740, 813, 852, 853, 855, 856, 865, 866, 879, 885, 908, 914, 926, 966, 1073, 1155, 1171, 1219, 1221, 1255, 1271, 1272, 1274, 1326], "memori": [15, 46, 54, 55, 56, 102, 103, 106, 107, 108, 114, 115, 116, 119, 120, 126, 128, 131, 132, 133, 155, 174, 211, 237, 238, 248, 263, 291, 305, 590, 602, 637, 813, 834, 835, 926, 1078, 1171, 1192, 1223, 1224, 1306, 1326], "error": [15, 36, 55, 94, 97, 104, 105, 108, 114, 115, 128, 159, 226, 236, 263, 305, 315, 341, 342, 359, 365, 395, 494, 513, 515, 517, 538, 573, 649, 653, 657, 659, 660, 662, 664, 691, 693, 694, 698, 813, 831, 835, 908, 914, 926, 958, 959, 975, 980, 1013, 1136, 1138, 1140, 1161, 1235, 1239, 1243, 1245, 1246, 1248, 1250, 1277, 1279, 1280, 1284, 1306, 1326], "row": [15, 21, 26, 34, 35, 37, 40, 42, 43, 46, 48, 49, 51, 56, 93, 96, 101, 105, 106, 107, 108, 109, 114, 115, 116, 119, 120, 122, 123, 125, 126, 128, 131, 132, 133, 134, 137, 138, 144, 156, 158, 160, 169, 174, 177, 180, 182, 186, 187, 188, 190, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 217, 222, 238, 239, 249, 255, 256, 259, 261, 262, 267, 268, 270, 272, 273, 280, 281, 286, 288, 290, 291, 299, 305, 330, 331, 339, 354, 364, 455, 463, 467, 473, 499, 511, 540, 590, 591, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 643, 645, 656, 662, 663, 709, 711, 716, 731, 734, 739, 741, 743, 748, 749, 762, 766, 768, 769, 771, 787, 789, 790, 798, 803, 813, 829, 832, 834, 841, 845, 848, 849, 850, 852, 857, 860, 861, 862, 864, 866, 870, 888, 893, 894, 895, 896, 898, 904, 905, 909, 911, 913, 914, 922, 926, 947, 956, 1077, 1078, 1086, 1091, 1122, 1134, 1185, 1196, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1230, 1242, 1248, 1249, 1295, 1297, 1326, 1340, 1342, 1351, 1352, 1353], "per": [15, 34, 37, 43, 119, 142, 144, 158, 186, 222, 223, 242, 250, 268, 279, 294, 296, 297, 305, 320, 341, 364, 510, 513, 515, 538, 550, 552, 573, 574, 576, 578, 580, 581, 645, 716, 721, 734, 813, 829, 882, 889, 895, 902, 917, 919, 920, 926, 930, 958, 1133, 1136, 1138, 1161, 1314, 1326], "everi": [15, 34, 43, 114, 115, 128, 182, 188, 191, 256, 259, 274, 305, 333, 334, 335, 336, 339, 341, 347, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 427, 441, 455, 467, 502, 503, 508, 511, 514, 515, 516, 525, 528, 533, 537, 609, 656, 711, 744, 745, 748, 749, 813, 845, 850, 852, 855, 894, 926, 950, 951, 952, 953, 956, 958, 964, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1049, 1063, 1077, 1086, 1089, 1125, 1126, 1131, 1134, 1137, 1138, 1139, 1148, 1151, 1156, 1160, 1199, 1242, 1297, 1326], "process": [15, 34, 43, 44, 45, 46, 54, 55, 114, 115, 116, 128, 150, 237, 305, 834, 835, 926], "liter": [16, 17, 21, 36, 116, 147, 148, 149, 241, 242, 246, 273, 278, 279, 305, 315, 358, 370, 399, 447, 448, 456, 463, 468, 470, 479, 497, 547, 551, 569, 571, 584, 585, 595, 605, 649, 652, 660, 674, 675, 705, 706, 717, 726, 728, 731, 737, 738, 739, 747, 751, 752, 755, 768, 772, 777, 779, 782, 791, 795, 797, 799, 813, 847, 881, 882, 885, 898, 901, 902, 926, 931, 974, 990, 1017, 1079, 1097, 1195, 1214, 1217, 1221, 1235, 1238, 1246, 1260, 1261, 1326], "left": [16, 17, 37, 48, 137, 138, 139, 140, 188, 189, 191, 192, 207, 208, 235, 273, 305, 388, 449, 451, 452, 477, 479, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 668, 714, 737, 744, 745, 748, 749, 753, 754, 756, 757, 762, 787, 800, 801, 803, 813, 852, 853, 855, 856, 860, 861, 879, 898, 926, 1007, 1072, 1074, 1075, 1097, 1189, 1215, 1254, 1308, 1326, 1336, 1340, 1344], "center": [16, 17, 37, 305, 449, 451, 452, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 813, 1072, 1074, 1075, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "cell": [16, 17, 37, 305], "valueerror": [16, 21], "recognis": [16, 17, 21, 931], "column_abc": 16, "column_xyz": 16, "keyerror": 17, "datetim": [17, 34, 37, 43, 48, 109, 118, 119, 129, 144, 145, 146, 148, 159, 165, 186, 188, 189, 191, 192, 206, 208, 235, 251, 274, 305, 308, 337, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 505, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 694, 714, 736, 752, 753, 754, 756, 757, 758, 764, 772, 800, 801, 813, 831, 838, 852, 853, 855, 856, 861, 879, 926, 931, 954, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1073, 1116, 1128, 1129, 1180, 1181, 1218, 1277, 1280, 1306, 1308, 1326, 1347], "date": [17, 37, 48, 63, 114, 115, 117, 119, 125, 128, 134, 159, 165, 186, 188, 189, 191, 192, 206, 208, 235, 251, 305, 308, 337, 395, 397, 398, 399, 400, 403, 406, 409, 410, 413, 418, 419, 420, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 505, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 693, 714, 736, 753, 754, 756, 757, 764, 772, 799, 813, 831, 838, 852, 853, 855, 856, 861, 879, 926, 931, 954, 1013, 1015, 1016, 1017, 1018, 1021, 1024, 1025, 1027, 1028, 1029, 1031, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1073, 1116, 1128, 1129, 1180, 1181, 1218, 1277, 1279, 1308, 1326, 1344], "333": [17, 631, 813, 1212, 1326], "mno": [17, 21], "2023": [17, 37, 109, 136, 206, 305, 399, 758, 772, 931, 1017], "29": [17, 136, 396, 419, 1014, 1041], "2001": [17, 397, 398, 403, 406, 409, 413, 418, 423, 424, 425, 427, 432, 441, 442, 443, 444, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 813, 931, 1015, 1016, 1021, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1038, 1040, 1043, 1045, 1046, 1047, 1049, 1054, 1063, 1064, 1065, 1066, 1067, 1277], "null": [17, 34, 36, 43, 48, 56, 63, 104, 105, 108, 114, 115, 124, 128, 132, 134, 141, 144, 148, 155, 158, 160, 164, 165, 169, 171, 176, 177, 180, 181, 199, 207, 214, 215, 216, 223, 226, 228, 246, 247, 250, 252, 253, 254, 258, 263, 264, 268, 271, 273, 275, 278, 286, 305, 316, 318, 319, 320, 330, 333, 334, 341, 342, 349, 350, 357, 359, 363, 364, 370, 376, 377, 378, 381, 391, 393, 394, 423, 426, 434, 435, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 453, 456, 457, 458, 459, 464, 471, 477, 478, 488, 490, 491, 492, 498, 500, 501, 508, 509, 512, 513, 515, 517, 518, 519, 528, 529, 530, 531, 532, 534, 538, 540, 550, 552, 572, 585, 586, 587, 588, 591, 602, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 637, 639, 644, 645, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 673, 680, 682, 683, 684, 691, 692, 694, 696, 701, 702, 703, 704, 714, 715, 716, 725, 726, 727, 728, 734, 737, 738, 739, 741, 743, 747, 755, 760, 771, 772, 777, 779, 782, 789, 790, 795, 797, 803, 813, 829, 832, 837, 838, 841, 847, 848, 859, 860, 873, 883, 885, 886, 889, 895, 897, 898, 901, 903, 909, 926, 931, 935, 936, 938, 947, 950, 951, 958, 959, 966, 967, 975, 989, 990, 997, 1009, 1011, 1012, 1048, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1070, 1072, 1073, 1074, 1075, 1079, 1081, 1082, 1088, 1089, 1095, 1096, 1112, 1113, 1115, 1121, 1123, 1124, 1127, 1131, 1132, 1135, 1136, 1138, 1140, 1141, 1142, 1152, 1154, 1155, 1157, 1161, 1163, 1171, 1184, 1185, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1216, 1221, 1222, 1226, 1231, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1252, 1257, 1258, 1259, 1266, 1268, 1269, 1270, 1277, 1278, 1280, 1282, 1287, 1290, 1303, 1306, 1307, 1308, 1316, 1326, 1336, 1340, 1342, 1343, 1350, 1351, 1353], "07": [17, 114, 144, 165, 305, 395, 398, 399, 413, 426, 427, 441, 691, 752, 753, 755, 756, 764, 838, 926, 931, 1013, 1017, 1048, 1277, 1347], "05": [17, 134, 137, 138, 139, 140, 144, 159, 165, 274, 305, 395, 398, 399, 400, 401, 402, 407, 411, 413, 414, 416, 419, 420, 421, 426, 428, 430, 431, 433, 434, 736, 752, 753, 755, 756, 831, 838, 861, 926, 931, 1017, 1018, 1019, 1020, 1048, 1049, 1052, 1053, 1055, 1056, 1063, 1347], "visibl": [18, 172, 305, 1071, 1326], "eg": [18, 26, 37, 56, 117, 153, 262, 305, 427, 691, 694, 717, 813, 931, 1089, 1277, 1280, 1326], "low": [18, 116, 598, 813, 1189, 1326], "rang": [18, 37, 116, 117, 165, 172, 188, 206, 305, 321, 389, 395, 403, 418, 424, 425, 427, 441, 442, 477, 731, 736, 738, 752, 753, 754, 755, 756, 757, 768, 769, 799, 800, 801, 813, 838, 852, 926, 931, 1008, 1013, 1021, 1040, 1046, 1047, 1049, 1063, 1064, 1071, 1185, 1326, 1346], "98": [18, 198, 305, 363, 466, 469, 644, 695, 715, 813, 1281], "99": [18, 37, 175, 176, 198, 201, 273, 305, 314, 363, 456, 458, 466, 469, 644, 715, 803, 813, 846, 847, 898, 926, 1069, 1079, 1326], "tbl_col": 18, "95": [18, 314, 813, 931], "96": [18, 165, 305, 314, 813, 838, 926, 1120, 1326], "97": [18, 198, 305, 314, 813, 1120, 1326], "move": [19, 238, 305, 395, 449, 450, 451, 452, 613, 615, 619, 626, 813, 1013, 1072, 1073, 1074, 1075, 1202, 1203, 1205, 1209, 1326], "inlin": [19, 238, 305, 649, 657, 658, 660, 674, 675, 1235, 1243, 1244, 1246, 1260, 1261], "parenthes": 19, "inform": [20, 24, 35, 53, 118, 126, 129, 130, 133, 137, 139, 163, 165, 305, 308, 495, 642, 649, 657, 658, 660, 674, 675, 813, 838, 875, 926, 930, 984, 1120, 1229, 1235, 1243, 1244, 1246, 1260, 1261, 1326, 1330], "below": [20, 36, 118, 119, 129, 130, 169, 226, 305, 458, 661, 692, 753, 754, 756, 757, 800, 801, 803, 809, 813, 841, 926, 1247, 1278, 1350], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 48, 109], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 657, 664, 1243, 1250], "rounded_corn": 21, "border": 21, "includ": [21, 31, 34, 36, 37, 43, 53, 107, 116, 118, 129, 130, 144, 145, 158, 165, 172, 177, 224, 238, 267, 268, 269, 272, 273, 305, 363, 388, 428, 459, 463, 474, 479, 558, 598, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 681, 682, 686, 687, 715, 716, 736, 744, 748, 789, 790, 813, 829, 838, 848, 895, 898, 926, 931, 1007, 1008, 1050, 1071, 1082, 1092, 1097, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1267, 1268, 1272, 1316, 1326], "divid": [21, 388, 427, 441, 449, 451, 452, 463, 495, 598, 813, 1007, 1049, 1063, 1072, 1074, 1075, 1120, 1189, 1326, 1345], "same": [21, 36, 37, 47, 48, 54, 55, 56, 85, 86, 120, 128, 137, 138, 139, 140, 142, 153, 177, 187, 211, 226, 237, 238, 250, 270, 278, 279, 283, 291, 305, 312, 319, 353, 393, 394, 459, 463, 465, 466, 469, 539, 556, 560, 590, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 656, 665, 704, 813, 834, 835, 848, 851, 865, 866, 889, 896, 901, 902, 906, 926, 933, 938, 970, 1007, 1011, 1012, 1017, 1162, 1171, 1189, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1242, 1251, 1305, 1317, 1326, 1338, 1340, 1347], "dens": [21, 186, 305, 601, 813, 1191, 1326], "space": [21, 188, 305, 852, 926, 931], "horizont": [21, 56, 90, 180, 196, 212, 213, 214, 215, 219, 220, 253, 254, 272, 305, 726, 728, 738, 739, 744, 745, 747, 748, 749, 751, 759, 762, 777, 779, 782, 787, 797], "markdown": 21, "compat": [21, 37, 42, 46, 305, 649, 651, 652, 657, 658, 659, 660, 674, 675, 926, 931, 1235, 1237, 1238, 1243, 1244, 1245, 1246, 1260, 1261, 1347], "utf8": [21, 114, 115, 128, 661, 680, 692, 1247, 1266, 1278], "No": [21, 699, 1285], "round": [21, 37, 50, 109, 116, 305, 369, 375, 462, 631, 712, 813, 987, 1084, 1212, 1326, 1344], "corner": [21, 37, 109, 305], "op": [21, 119, 148, 305, 558, 604, 813, 926, 1280, 1326], "The": [21, 35, 36, 37, 40, 42, 46, 47, 48, 53, 54, 57, 62, 63, 65, 66, 73, 77, 78, 86, 102, 104, 105, 106, 108, 114, 115, 116, 117, 119, 123, 124, 125, 126, 128, 132, 133, 134, 137, 138, 139, 140, 144, 145, 146, 148, 150, 165, 168, 169, 170, 173, 174, 177, 186, 187, 188, 191, 193, 199, 205, 208, 211, 218, 224, 235, 236, 237, 238, 241, 242, 251, 262, 263, 271, 274, 278, 279, 281, 282, 283, 291, 305, 315, 357, 358, 359, 360, 388, 393, 394, 395, 403, 418, 423, 424, 427, 430, 441, 442, 453, 456, 459, 463, 464, 472, 509, 513, 538, 550, 551, 552, 564, 590, 598, 601, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 639, 642, 648, 653, 654, 657, 661, 662, 663, 669, 671, 672, 674, 675, 679, 685, 686, 687, 688, 689, 690, 691, 692, 702, 705, 736, 760, 764, 772, 775, 789, 790, 791, 795, 803, 805, 806, 808, 809, 813, 814, 815, 818, 820, 821, 822, 838, 841, 843, 844, 848, 851, 852, 855, 857, 859, 861, 864, 866, 871, 875, 879, 881, 882, 883, 890, 897, 901, 902, 905, 906, 914, 926, 930, 931, 934, 937, 974, 975, 976, 989, 1007, 1008, 1011, 1012, 1013, 1021, 1040, 1045, 1046, 1049, 1052, 1063, 1064, 1078, 1079, 1082, 1090, 1132, 1136, 1170, 1171, 1189, 1191, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1226, 1229, 1234, 1239, 1240, 1247, 1248, 1249, 1255, 1257, 1258, 1260, 1261, 1265, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1305, 1306, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333, 1334, 1338, 1351, 1353], "one": [21, 34, 35, 37, 43, 48, 93, 102, 104, 105, 106, 107, 108, 114, 115, 119, 123, 124, 125, 128, 147, 149, 153, 159, 176, 177, 186, 187, 188, 189, 191, 192, 205, 217, 226, 235, 236, 237, 244, 246, 263, 266, 284, 305, 314, 349, 388, 458, 459, 463, 466, 469, 471, 532, 540, 545, 573, 574, 576, 578, 580, 581, 609, 610, 635, 644, 657, 658, 659, 676, 702, 775, 793, 803, 809, 813, 831, 847, 848, 851, 852, 853, 855, 856, 870, 879, 884, 885, 903, 907, 926, 937, 966, 971, 1007, 1081, 1088, 1116, 1155, 1163, 1168, 1189, 1199, 1221, 1243, 1244, 1245, 1262, 1288, 1306, 1326, 1330, 1339, 1340, 1342, 1345, 1352], "more": [21, 37, 40, 42, 46, 48, 56, 85, 86, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 137, 139, 144, 153, 163, 165, 177, 204, 205, 209, 211, 217, 222, 236, 237, 239, 251, 262, 263, 267, 270, 291, 305, 308, 317, 320, 355, 459, 463, 471, 495, 527, 541, 545, 550, 552, 589, 632, 642, 658, 665, 691, 693, 694, 718, 730, 741, 761, 767, 770, 778, 780, 783, 784, 792, 793, 803, 813, 838, 870, 890, 896, 926, 930, 931, 938, 972, 984, 1008, 1088, 1116, 1120, 1150, 1164, 1171, 1213, 1229, 1244, 1251, 1277, 1279, 1280, 1304, 1306, 1311, 1326, 1330, 1339, 1340, 1351, 1352, 1353], "semigraph": 21, "box": [21, 211, 305], "draw": [21, 26, 144, 148, 1353], "found": [21, 34, 37, 43, 88, 98, 100, 105, 109, 170, 251, 305, 633, 660, 664, 689, 690, 691, 694, 813, 890, 926, 1215, 1246, 1250, 1275, 1276, 1277, 1280, 1326, 1336, 1350], "unicod": [21, 661, 666, 680, 692, 931, 1247, 1252, 1266, 1278], "block": [21, 55, 187, 190, 270, 305, 803, 835, 851, 854, 877, 896, 904, 905, 914, 926, 1214, 1217, 1326], "http": [21, 37, 38, 39, 103, 116, 117, 120, 122, 155, 163, 305, 657, 659, 887, 926, 1243, 1245], "en": [21, 37, 305], "wikipedia": 21, "org": [21, 38, 39, 103, 116, 117, 120, 122, 155, 163, 305, 887, 926], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 37, 305], "etc": [22, 36, 37, 114, 118, 119, 120, 122, 129, 130, 131, 305, 813, 930, 931, 1214, 1217, 1326, 1347], "between": [25, 56, 141, 142, 144, 148, 163, 228, 237, 297, 305, 342, 365, 391, 392, 479, 508, 517, 528, 529, 530, 531, 591, 598, 599, 621, 622, 648, 732, 733, 736, 740, 742, 786, 789, 790, 813, 876, 920, 926, 959, 980, 984, 1009, 1010, 1097, 1131, 1140, 1151, 1152, 1153, 1154, 1185, 1189, 1190, 1206, 1234, 1326, 1348], "set_tbl_column_data_type_inlin": 25, "max": [26, 37, 42, 46, 165, 176, 187, 213, 226, 235, 305, 371, 378, 383, 458, 540, 550, 590, 601, 605, 610, 613, 614, 634, 683, 777, 793, 813, 838, 847, 851, 879, 926, 991, 998, 1002, 1008, 1081, 1163, 1191, 1202, 1219, 1269, 1326, 1334, 1342, 1344], "tbl_row": [26, 165, 305, 838, 926], "width": [27, 37, 57, 114, 115, 128, 305, 308, 539, 926, 1162], "id": [27, 37, 56, 114, 130, 262, 269, 281, 291, 305, 609, 674, 675, 719, 813, 905, 914, 926, 931, 1199, 1312, 1326, 1351, 1353], "seq1": 27, "seq2": 27, "seq": 27, "atgataaaggag": 27, "gcaacgcatata": 27, "12": [27, 37, 48, 109, 114, 136, 144, 165, 188, 204, 208, 235, 247, 251, 274, 305, 315, 371, 372, 380, 396, 398, 399, 403, 413, 418, 419, 420, 423, 424, 425, 427, 441, 442, 443, 450, 477, 494, 514, 549, 591, 596, 600, 610, 626, 636, 637, 652, 668, 678, 695, 707, 745, 752, 753, 754, 755, 756, 757, 774, 799, 800, 801, 813, 838, 852, 857, 861, 864, 879, 886, 887, 893, 926, 931, 991, 992, 1014, 1016, 1017, 1034, 1040, 1049, 1063, 1073, 1171, 1211, 1222, 1238, 1254, 1264, 1281, 1326, 1347, 1353], "atg": 27, "ata": 27, "aag": 27, "gag": 27, "gca": 27, "acg": 27, "cat": [27, 47, 85, 86, 388, 598, 649, 652, 697, 700, 714, 739, 808, 813, 931, 1007, 1092, 1189, 1235, 1238, 1283, 1286, 1322, 1326], "also": [28, 34, 37, 43, 47, 105, 116, 119, 120, 125, 128, 143, 144, 147, 148, 153, 170, 187, 188, 189, 191, 192, 218, 222, 235, 237, 241, 250, 262, 273, 278, 281, 305, 378, 381, 395, 423, 426, 459, 479, 552, 558, 601, 605, 613, 615, 617, 619, 621, 624, 626, 628, 645, 674, 675, 686, 687, 702, 736, 744, 745, 748, 749, 752, 753, 755, 762, 764, 787, 803, 812, 813, 819, 851, 852, 853, 855, 856, 871, 879, 881, 889, 898, 901, 903, 905, 926, 931, 1013, 1048, 1097, 1191, 1195, 1237, 1238, 1260, 1261, 1272, 1326, 1330, 1339, 1351], "char": [28, 658, 1244], "omit": [28, 105, 109, 142, 153, 222, 238, 262, 267, 305, 427, 441, 768, 769, 784, 800, 801, 931, 1049, 1063, 1351], "set_decimal_separ": 28, "x": [28, 48, 56, 77, 91, 103, 109, 114, 115, 117, 128, 141, 142, 144, 155, 172, 196, 200, 202, 207, 217, 226, 237, 238, 269, 272, 305, 308, 313, 315, 317, 337, 342, 377, 389, 447, 448, 463, 468, 470, 472, 497, 504, 517, 545, 547, 549, 550, 552, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 589, 595, 596, 604, 605, 609, 639, 642, 682, 705, 706, 707, 714, 717, 724, 726, 728, 732, 733, 744, 745, 747, 762, 772, 774, 777, 779, 782, 787, 792, 797, 803, 813, 860, 866, 870, 888, 890, 926, 931, 959, 984, 997, 1081, 1118, 1171, 1195, 1226, 1229, 1268, 1304, 1308, 1309, 1326, 1336, 1337, 1340, 1345, 1350, 1352], "1234567": 28, "987654": [28, 931], "10101": 28, "y": [28, 48, 56, 77, 91, 103, 109, 141, 142, 144, 155, 172, 200, 202, 207, 217, 226, 237, 238, 269, 272, 305, 308, 313, 315, 317, 337, 342, 430, 433, 447, 448, 468, 470, 497, 504, 517, 547, 549, 552, 572, 574, 576, 578, 580, 581, 584, 585, 589, 596, 604, 605, 609, 691, 693, 694, 705, 707, 717, 724, 726, 728, 732, 733, 747, 758, 772, 777, 779, 782, 792, 797, 813, 860, 870, 888, 890, 926, 931, 959, 984, 1052, 1055, 1195, 1277, 1279, 1280, 1326, 1340, 1347, 1352], "1234": [28, 631, 813, 1212, 1326], "7654321": 28, "234": 28, "567": 28, "987": 28, "654": [28, 792, 890, 926], "00": [28, 37, 63, 159, 188, 274, 305, 396, 397, 400, 405, 419, 420, 423, 426, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 694, 698, 755, 756, 757, 758, 799, 800, 801, 813, 831, 852, 861, 926, 931, 1014, 1015, 1018, 1019, 1020, 1023, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1277, 1280, 1284], "321": [28, 1353], "strip": [29, 669, 679, 686, 687, 688, 689, 690, 1255, 1265, 1272, 1273, 1274, 1346], "trail": [29, 186, 305, 679, 685, 686, 687, 1265, 1271, 1272, 1273], "zero": [29, 37, 102, 103, 112, 114, 115, 120, 122, 126, 143, 146, 155, 176, 205, 236, 251, 257, 263, 264, 305, 458, 540, 545, 633, 642, 701, 717, 813, 832, 847, 926, 989, 1081, 1163, 1229, 1287, 1300, 1306, 1307, 1326, 1345], "enabl": [29, 30, 47, 85, 86, 137, 138, 139, 140, 152, 241, 264, 278, 305, 316, 318, 605, 634, 650, 676, 721, 809, 813, 834, 881, 901, 926, 935, 936, 1195, 1219, 1236, 1262, 1307, 1314, 1326], "d": [29, 32, 34, 36, 37, 38, 39, 42, 105, 134, 186, 188, 193, 194, 198, 207, 255, 257, 267, 272, 276, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 313, 315, 377, 406, 430, 433, 479, 594, 637, 652, 658, 674, 675, 682, 691, 693, 694, 737, 758, 764, 792, 813, 852, 860, 890, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 931, 984, 997, 1024, 1052, 1055, 1097, 1127, 1238, 1244, 1260, 1261, 1268, 1277, 1279, 1280, 1291, 1326, 1340, 1342, 1343, 1346, 1347], "01": [29, 48, 62, 63, 144, 159, 165, 186, 188, 208, 235, 274, 305, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 409, 410, 411, 413, 414, 416, 418, 419, 420, 421, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 450, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 693, 694, 698, 736, 752, 753, 754, 755, 756, 757, 758, 813, 831, 838, 852, 879, 926, 931, 1013, 1015, 1017, 1018, 1019, 1020, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1277, 1279, 1280, 1284], "6789": [29, 931], "scale": [29, 64, 172, 305, 552, 594, 695, 813, 931, 1071, 1281, 1326], "trim_decimal_zero": 29, "01000": 29, "67890": 29, "addit": [30, 33, 35, 36, 37, 105, 113, 118, 119, 129, 130, 142, 144, 146, 148, 169, 173, 187, 190, 224, 241, 242, 244, 250, 264, 271, 278, 279, 283, 305, 313, 405, 453, 456, 590, 645, 649, 657, 658, 660, 674, 675, 702, 705, 734, 737, 738, 739, 760, 791, 795, 813, 844, 851, 854, 881, 882, 884, 889, 897, 901, 902, 906, 926, 931, 1014, 1023, 1079, 1235, 1243, 1244, 1246, 1260, 1261, 1307, 1326, 1330], "verbos": [30, 137, 139, 153, 658, 1244], "debug": [30, 834, 845, 865, 866, 926, 1353], "log": [30, 50, 363, 364, 446, 545, 571, 595, 715, 716, 813, 979, 1069, 1310, 1326, 1344], "do_polars_oper": 30, "if_set": 31, "env_onli": 31, "dict": [31, 35, 36, 37, 42, 49, 51, 53, 102, 104, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 179, 205, 224, 230, 236, 237, 238, 258, 259, 262, 267, 269, 305, 551, 813, 877, 926, 930, 931, 1170, 1326, 1337], "show": [31, 37, 165, 169, 186, 209, 223, 305, 474, 813, 838, 841, 875, 887, 926, 1092, 1326, 1338, 1349], "variabl": [31, 73, 126, 133, 147, 150, 217, 260, 305, 870, 926, 1301, 1326, 1336, 1350], "chang": [31, 38, 43, 44, 45, 46, 48, 54, 55, 64, 66, 114, 115, 116, 126, 133, 134, 251, 262, 267, 272, 273, 274, 280, 305, 320, 387, 388, 391, 427, 474, 551, 552, 590, 591, 598, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 789, 790, 792, 813, 834, 835, 890, 898, 904, 926, 930, 931, 983, 984, 985, 1006, 1007, 1049, 1092, 1170, 1185, 1189, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1224, 1304, 1309, 1326], "restrict": [31, 683, 1269], "dictionari": [31, 37, 53, 77, 102, 104, 105, 106, 108, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 205, 224, 236, 237, 238, 258, 259, 262, 267, 305, 551, 813, 926, 1170, 1326], "those": [31, 37, 114, 238, 264, 273, 305, 463, 601, 657, 775, 813, 898, 926, 931, 1191, 1243, 1307, 1326], "been": [31, 37, 151, 155, 156, 178, 181, 189, 190, 191, 192, 197, 232, 256, 285, 286, 305, 320, 382, 383, 384, 385, 386, 465, 482, 486, 489, 494, 506, 520, 538, 548, 549, 551, 552, 567, 596, 601, 611, 613, 615, 617, 619, 621, 624, 626, 628, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 707, 710, 711, 729, 748, 749, 750, 751, 773, 813, 853, 854, 855, 856, 865, 894, 908, 909, 926, 938, 1002, 1003, 1004, 1005, 1102, 1108, 1129, 1143, 1161, 1170, 1191, 1200, 1216, 1218, 1237, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1296, 1297, 1326], "set_fmt_float": 31, "via": [31, 114, 115, 116, 126, 128, 131, 132, 133, 166, 205, 237, 305, 320, 390, 552, 659, 813, 839, 926, 1245], "set_stat": 31, "all_stat": 31, "io": [32, 34, 37, 38, 39, 112, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 166, 305, 390, 465, 564, 813, 839, 883, 926], "byte": [32, 34, 37, 38, 39, 42, 43, 46, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 172, 305, 661, 665, 666, 667, 680, 692, 926, 1071, 1247, 1251, 1252, 1253, 1266, 1278, 1326, 1346], "compress": [32, 38, 39, 42, 44, 46, 305, 608, 813, 926, 1198, 1326], "avrocompress": [32, 305], "uncompress": [32, 38, 39, 42, 46, 120, 131, 305, 926], "write": [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 113, 115, 120, 153, 305, 370, 567, 813, 863, 887, 926, 931, 990, 1326], "apach": [32, 38, 39, 42, 112, 116, 117, 120, 122, 130, 305], "avro": [32, 112, 305, 825], "writabl": [32, 34, 38, 39, 40, 41, 42, 243, 263, 305, 1306, 1326], "like": [32, 34, 36, 38, 39, 40, 41, 42, 55, 103, 112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 166, 188, 200, 202, 207, 238, 243, 262, 263, 305, 390, 396, 465, 510, 550, 566, 601, 657, 687, 688, 721, 809, 813, 830, 835, 839, 852, 926, 930, 1014, 1133, 1191, 1243, 1314, 1326], "object": [32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 56, 77, 91, 103, 104, 109, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 142, 144, 145, 155, 166, 187, 188, 190, 191, 208, 209, 235, 238, 243, 251, 262, 263, 264, 305, 390, 564, 753, 754, 756, 757, 772, 792, 800, 801, 813, 825, 839, 852, 853, 855, 856, 861, 879, 890, 926, 931, 1300, 1326, 1339, 1350], "snappi": [32, 42, 46, 305, 926], "deflat": [32, 305], "pathlib": [32, 34, 38, 39, 42, 128, 305], "foo": [32, 34, 36, 38, 39, 40, 41, 42, 123, 124, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 193, 194, 195, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 243, 245, 249, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 269, 270, 271, 275, 276, 277, 282, 305, 366, 388, 390, 423, 467, 473, 476, 499, 556, 558, 560, 561, 562, 563, 564, 565, 566, 598, 606, 648, 652, 654, 656, 658, 659, 677, 681, 683, 686, 687, 688, 689, 690, 697, 700, 709, 730, 740, 741, 742, 761, 765, 766, 767, 770, 771, 776, 778, 780, 781, 783, 784, 786, 791, 794, 798, 802, 803, 809, 813, 831, 836, 840, 841, 842, 848, 858, 859, 860, 873, 877, 880, 881, 896, 897, 900, 903, 926, 931, 981, 1007, 1045, 1140, 1189, 1196, 1238, 1240, 1242, 1244, 1245, 1263, 1269, 1275, 1276, 1283, 1286, 1326, 1338, 1340, 1341, 1342, 1343, 1346], "bar": [32, 34, 36, 38, 39, 40, 41, 42, 123, 124, 159, 162, 163, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 194, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 243, 249, 252, 253, 254, 255, 257, 259, 260, 261, 263, 264, 265, 270, 271, 275, 276, 277, 282, 305, 366, 390, 476, 556, 558, 560, 561, 562, 563, 564, 565, 566, 642, 652, 654, 656, 658, 659, 677, 681, 683, 689, 690, 730, 740, 741, 742, 761, 766, 767, 770, 771, 776, 778, 780, 781, 783, 784, 791, 794, 798, 802, 803, 809, 813, 831, 836, 840, 841, 842, 848, 858, 859, 860, 873, 877, 880, 881, 896, 897, 900, 926, 931, 981, 1140, 1229, 1238, 1240, 1242, 1244, 1245, 1263, 1269, 1275, 1276, 1326, 1338, 1340, 1341, 1342, 1343, 1346], "ham": [32, 34, 36, 38, 39, 42, 159, 162, 163, 167, 168, 169, 170, 171, 177, 184, 193, 194, 196, 207, 212, 214, 216, 219, 223, 228, 230, 233, 236, 239, 240, 241, 249, 252, 253, 255, 260, 261, 263, 264, 265, 270, 275, 276, 305, 366, 565, 831, 836, 840, 841, 842, 848, 860, 873, 877, 880, 881, 896, 903, 926, 981, 1340, 1341], "dirpath": [32, 34, 38, 39, 42, 128, 305], "new_fil": [32, 34, 38, 39, 42, 305], "t": [33, 34, 36, 43, 56, 113, 114, 119, 125, 128, 188, 208, 211, 225, 270, 272, 305, 320, 387, 396, 405, 426, 446, 449, 451, 452, 510, 552, 594, 657, 660, 674, 675, 688, 691, 694, 803, 813, 852, 874, 896, 926, 931, 1006, 1048, 1069, 1072, 1074, 1075, 1133, 1171, 1216, 1243, 1246, 1260, 1261, 1273, 1274, 1277, 1280, 1316, 1326, 1336, 1337], "kwarg": [33, 47, 58, 59, 61, 62, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 113, 116, 117, 144, 146, 148, 163, 177, 225, 264, 305, 594, 813, 848, 874, 926, 930, 1307, 1326, 1337, 1350], "copi": [33, 102, 103, 113, 155, 160, 161, 206, 257, 263, 264, 278, 305, 456, 813, 832, 833, 901, 926, 989, 993, 1079, 1300, 1305, 1306, 1307, 1326], "csv": [33, 34, 43, 44, 45, 46, 113, 114, 115, 119, 128, 305, 825, 926], "system": [33, 114, 115, 305, 400, 1018], "clipboard": [33, 113, 305, 825], "write_csv": [33, 115, 128, 305], "past": [33, 305, 865, 866, 926], "excel": [33, 37, 113, 119, 305, 825], "similar": [33, 42, 113, 150, 180, 208, 246, 305, 349, 430, 433, 532, 590, 635, 705, 771, 803, 813, 845, 861, 885, 926, 966, 1052, 1055, 1155, 1221, 1326], "spreadsheet": [33, 113, 119, 125, 226, 305], "softwar": [33, 113, 305], "field": [33, 34, 36, 43, 77, 98, 100, 105, 271, 305, 354, 540, 575, 577, 579, 608, 658, 659, 662, 682, 683, 704, 705, 721, 744, 745, 748, 749, 774, 795, 813, 897, 926, 971, 1007, 1163, 1189, 1198, 1245, 1268, 1269, 1291, 1293, 1326, 1347], "symbol": [33, 34, 43, 305, 813, 926], "argument": [33, 36, 42, 86, 113, 114, 118, 126, 128, 129, 144, 146, 148, 163, 167, 173, 187, 188, 189, 190, 191, 192, 208, 212, 214, 219, 224, 225, 235, 241, 242, 244, 250, 253, 264, 271, 274, 278, 279, 283, 305, 427, 441, 450, 453, 459, 479, 550, 590, 594, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 686, 687, 688, 705, 725, 732, 733, 734, 737, 738, 739, 741, 743, 760, 791, 795, 803, 813, 840, 844, 851, 852, 853, 854, 855, 856, 874, 879, 881, 882, 884, 889, 897, 901, 902, 906, 926, 930, 931, 1049, 1063, 1097, 1272, 1273, 1274, 1307, 1326, 1345, 1346], "pass": [33, 35, 36, 37, 42, 48, 104, 113, 116, 117, 119, 126, 128, 134, 137, 139, 142, 144, 146, 148, 158, 163, 167, 187, 188, 191, 194, 210, 224, 225, 235, 241, 246, 250, 255, 264, 267, 268, 274, 278, 282, 283, 305, 308, 320, 349, 364, 395, 406, 423, 426, 456, 476, 532, 550, 551, 552, 590, 594, 605, 610, 613, 615, 617, 619, 621, 624, 626, 628, 635, 645, 686, 687, 688, 716, 725, 734, 736, 743, 753, 764, 795, 803, 809, 813, 829, 840, 851, 852, 853, 855, 856, 858, 865, 866, 874, 879, 881, 885, 887, 889, 895, 901, 906, 914, 926, 930, 938, 966, 1013, 1024, 1048, 1079, 1091, 1122, 1155, 1170, 1171, 1195, 1221, 1272, 1273, 1274, 1295, 1307, 1326, 1330, 1337], "read_clipboard": [33, 305], "read": [33, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 166, 174, 305, 390, 465, 803, 813, 839, 845, 926, 1078, 1326], "comma": [33, 34, 114, 115, 128, 305], "include_bom": [34, 43, 305, 926], "include_head": [34, 37, 43, 115, 269, 305, 926], "line_termin": [34, 43, 305, 926], "quote_char": [34, 43, 114, 115, 128, 305, 926], "batch_siz": [34, 43, 114, 115, 116, 132, 134, 267, 305, 926], "1024": [34, 42, 43, 46, 114, 115, 116, 132, 305, 926], "datetime_format": [34, 43, 305, 926], "date_format": [34, 43, 305, 926], "time_format": [34, 43, 305, 926], "null_valu": [34, 43, 114, 115, 128, 305, 926], "quote_styl": [34, 43, 305, 926], "csvquotestyl": [34, 43, 305, 926], "If": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 53, 54, 55, 56, 64, 102, 103, 104, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 145, 146, 147, 155, 156, 169, 174, 186, 188, 189, 191, 192, 194, 203, 204, 205, 208, 210, 211, 215, 222, 224, 226, 235, 237, 238, 239, 243, 246, 249, 251, 254, 255, 259, 260, 262, 263, 269, 270, 272, 273, 282, 305, 316, 318, 320, 342, 349, 354, 395, 399, 400, 419, 420, 430, 433, 459, 474, 479, 495, 517, 527, 532, 533, 540, 550, 552, 558, 564, 565, 590, 598, 601, 603, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 635, 638, 642, 643, 648, 658, 659, 660, 661, 662, 663, 669, 679, 680, 681, 682, 683, 685, 686, 687, 688, 691, 692, 693, 694, 698, 701, 721, 725, 727, 729, 731, 735, 736, 739, 740, 743, 744, 753, 754, 756, 757, 758, 761, 762, 768, 769, 770, 772, 775, 784, 785, 788, 789, 790, 795, 800, 801, 803, 804, 813, 834, 835, 841, 843, 852, 853, 855, 856, 860, 861, 866, 870, 877, 879, 883, 885, 888, 890, 896, 898, 908, 914, 926, 930, 931, 935, 936, 938, 959, 966, 971, 990, 1007, 1013, 1017, 1018, 1041, 1042, 1052, 1055, 1078, 1089, 1091, 1092, 1097, 1119, 1120, 1122, 1140, 1150, 1155, 1156, 1163, 1171, 1189, 1191, 1193, 1195, 1196, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1213, 1215, 1219, 1221, 1225, 1229, 1230, 1234, 1244, 1245, 1246, 1247, 1248, 1249, 1255, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 1284, 1287, 1295, 1300, 1304, 1306, 1314, 1316, 1326, 1334, 1343, 1350], "instead": [34, 36, 40, 41, 48, 55, 56, 104, 105, 108, 114, 115, 116, 119, 125, 126, 128, 134, 141, 142, 143, 144, 148, 157, 158, 186, 188, 204, 205, 208, 211, 222, 224, 231, 236, 237, 238, 241, 242, 243, 246, 247, 262, 263, 264, 268, 274, 278, 279, 280, 282, 305, 308, 330, 349, 364, 371, 372, 388, 402, 404, 408, 412, 415, 417, 422, 426, 427, 429, 441, 450, 453, 463, 532, 550, 564, 598, 613, 615, 617, 619, 621, 624, 626, 628, 635, 636, 656, 665, 666, 669, 674, 675, 679, 685, 686, 687, 688, 689, 690, 691, 694, 701, 716, 723, 731, 735, 741, 753, 754, 755, 756, 757, 758, 768, 769, 785, 788, 792, 795, 800, 801, 804, 813, 828, 829, 835, 843, 852, 881, 882, 883, 885, 886, 895, 901, 902, 904, 926, 931, 947, 966, 975, 991, 992, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1073, 1089, 1098, 1104, 1107, 1114, 1116, 1118, 1155, 1189, 1214, 1217, 1221, 1222, 1231, 1242, 1251, 1252, 1255, 1260, 1261, 1265, 1271, 1272, 1273, 1274, 1277, 1280, 1287, 1306, 1307, 1326, 1330, 1334, 1338, 1350, 1351], "whether": [34, 43, 106, 108, 148, 152, 158, 171, 181, 188, 189, 191, 192, 204, 208, 235, 244, 250, 268, 305, 316, 318, 333, 334, 363, 364, 409, 428, 450, 471, 500, 501, 610, 634, 645, 715, 716, 734, 813, 829, 852, 853, 855, 856, 865, 866, 879, 884, 889, 895, 926, 931, 935, 936, 950, 951, 982, 985, 1027, 1050, 1070, 1073, 1088, 1123, 1124, 1216, 1326, 1350], "utf": [34, 43, 76, 305, 926], "bom": [34, 43, 305, 926], "header": [34, 37, 42, 43, 46, 109, 114, 115, 119, 128, 170, 226, 269, 305, 926], "end": [34, 37, 43, 114, 115, 128, 188, 305, 358, 361, 362, 396, 427, 453, 533, 649, 655, 658, 661, 671, 680, 684, 686, 687, 690, 731, 736, 752, 753, 754, 755, 756, 757, 760, 768, 769, 800, 801, 803, 813, 852, 857, 864, 875, 926, 931, 977, 1014, 1049, 1115, 1156, 1241, 1244, 1247, 1257, 1266, 1270, 1272, 1273, 1278, 1326, 1346], "each": [34, 37, 43, 48, 57, 64, 73, 115, 116, 119, 132, 137, 138, 139, 140, 142, 162, 164, 170, 177, 186, 187, 188, 189, 190, 191, 192, 206, 208, 211, 224, 235, 237, 239, 262, 267, 271, 273, 274, 282, 283, 286, 288, 290, 291, 299, 305, 330, 364, 388, 427, 441, 459, 482, 483, 486, 487, 516, 519, 520, 527, 537, 545, 552, 590, 598, 601, 608, 609, 617, 621, 624, 628, 632, 638, 645, 658, 661, 665, 666, 667, 670, 680, 682, 683, 692, 716, 731, 734, 739, 768, 769, 795, 803, 813, 834, 836, 837, 842, 848, 852, 853, 855, 856, 861, 875, 879, 897, 898, 906, 908, 909, 911, 913, 914, 922, 926, 947, 988, 1007, 1049, 1063, 1102, 1103, 1108, 1109, 1139, 1142, 1143, 1150, 1160, 1189, 1191, 1198, 1199, 1213, 1225, 1244, 1247, 1251, 1252, 1253, 1256, 1266, 1268, 1269, 1278, 1293, 1326, 1351, 1353], "quot": [34, 35, 43, 114, 115, 117, 128, 305, 926], "specifi": [34, 36, 37, 43, 48, 88, 98, 100, 119, 125, 145, 158, 159, 172, 173, 176, 187, 188, 189, 190, 191, 192, 207, 224, 235, 236, 238, 241, 242, 244, 246, 250, 262, 268, 271, 278, 279, 283, 305, 364, 370, 449, 451, 452, 453, 458, 590, 604, 605, 613, 615, 617, 619, 621, 624, 626, 628, 635, 645, 705, 716, 734, 737, 738, 739, 753, 754, 756, 757, 758, 760, 791, 795, 800, 801, 813, 829, 831, 844, 847, 851, 852, 853, 854, 855, 856, 860, 879, 881, 882, 884, 885, 889, 895, 897, 901, 902, 906, 926, 931, 990, 1071, 1072, 1074, 1075, 1081, 1195, 1221, 1304, 1326, 1340, 1352], "defin": [34, 37, 43, 63, 116, 123, 141, 142, 144, 156, 159, 169, 173, 188, 189, 191, 192, 211, 222, 225, 235, 273, 285, 291, 305, 320, 479, 513, 538, 552, 594, 598, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 661, 666, 680, 692, 729, 753, 754, 756, 757, 775, 795, 800, 801, 813, 831, 841, 844, 852, 853, 855, 856, 874, 879, 898, 908, 914, 926, 931, 938, 1097, 1136, 1171, 1189, 1199, 1247, 1252, 1266, 1278, 1326], "chrono": [34, 43, 305, 430, 433, 691, 693, 694, 698, 926, 1052, 1055, 1277, 1279, 1280, 1284], "rust": [34, 42, 43, 95, 120, 122, 126, 211, 291, 305, 659, 926, 930, 1171, 1245, 1326], "crate": [34, 43, 305, 649, 651, 652, 657, 658, 659, 660, 674, 675, 691, 693, 694, 698, 926, 931, 1235, 1237, 1238, 1243, 1244, 1245, 1246, 1260, 1261, 1277, 1279, 1280, 1284], "fraction": [34, 43, 137, 138, 139, 140, 239, 305, 428, 527, 591, 632, 691, 694, 813, 926, 1050, 1150, 1185, 1213, 1277, 1280, 1326], "second": [34, 43, 137, 138, 139, 140, 188, 208, 235, 274, 305, 407, 411, 414, 416, 421, 423, 427, 440, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 674, 675, 691, 694, 753, 754, 755, 756, 757, 758, 799, 800, 801, 803, 813, 852, 861, 879, 926, 931, 1045, 1049, 1062, 1063, 1073, 1260, 1261, 1277, 1280, 1326, 1346, 1347, 1353], "infer": [34, 43, 64, 77, 102, 104, 105, 106, 107, 108, 114, 115, 116, 119, 123, 124, 125, 126, 128, 132, 133, 156, 211, 305, 427, 441, 550, 552, 606, 662, 663, 691, 693, 694, 695, 698, 758, 772, 788, 813, 926, 1049, 1063, 1171, 1196, 1248, 1249, 1277, 1279, 1280, 1281, 1284, 1326], "timeunit": [34, 43, 63, 65, 305, 397, 399, 432, 444, 694, 753, 754, 755, 756, 757, 758, 926, 931, 1015, 1017, 1054, 1066, 1280], "frame": [34, 35, 37, 43, 48, 55, 56, 105, 115, 119, 125, 137, 138, 159, 160, 165, 205, 206, 211, 218, 222, 225, 236, 237, 238, 251, 267, 272, 273, 305, 792, 831, 832, 838, 871, 874, 890, 898, 926, 931, 989, 1326, 1334, 1335, 1336, 1337, 1338, 1339, 1350, 1353], "datatyp": [34, 43, 102, 104, 105, 106, 108, 110, 119, 121, 123, 124, 127, 132, 145, 146, 148, 170, 180, 240, 243, 305, 365, 453, 637, 714, 760, 772, 813, 825, 842, 880, 883, 926, 931, 938, 980, 983, 1008, 1107, 1114, 1116, 1118, 1171, 1223, 1308, 1326], "repres": [34, 37, 43, 62, 63, 65, 74, 78, 83, 102, 104, 106, 107, 108, 116, 119, 251, 252, 262, 263, 275, 282, 305, 463, 488, 490, 535, 542, 550, 647, 661, 666, 680, 692, 722, 725, 740, 742, 758, 760, 772, 774, 775, 784, 789, 790, 794, 802, 809, 813, 890, 891, 899, 926, 931, 1214, 1218, 1233, 1247, 1252, 1266, 1278, 1306, 1315, 1326], "necessari": [34, 35, 43, 47, 86, 119, 263, 305, 926, 1306, 1326], "non_numer": [34, 43, 305, 926], "never": [34, 43, 116, 207, 236, 305, 860, 926], "strategi": [34, 43, 48, 56, 114, 141, 142, 143, 144, 145, 146, 148, 176, 188, 191, 207, 208, 221, 273, 305, 320, 458, 540, 552, 813, 847, 852, 855, 860, 861, 898, 926, 1081, 1163, 1326], "put": [34, 43, 305, 926], "around": [34, 43, 305, 926], "thei": [34, 37, 43, 47, 55, 56, 85, 86, 105, 128, 153, 208, 209, 238, 305, 676, 687, 688, 813, 926, 930, 931], "record": [34, 39, 43, 122, 134, 305, 861, 926], "termin": [34, 43, 305, 926], "indistinguish": [34, 43, 305, 926], "even": [34, 43, 114, 305, 450, 594, 598, 813, 926, 931, 1073, 1189, 1326], "invalid": [34, 43, 114, 115, 128, 305, 662, 664, 696, 717, 813, 926, 975, 1248, 1250, 1282], "g": [34, 43, 114, 118, 120, 122, 129, 131, 134, 146, 155, 166, 204, 231, 263, 272, 305, 313, 320, 390, 450, 453, 552, 637, 760, 813, 839, 877, 926, 1073, 1216, 1326, 1353], "pars": [34, 43, 113, 114, 115, 117, 119, 124, 125, 128, 131, 132, 158, 187, 190, 241, 242, 246, 250, 268, 278, 279, 283, 305, 364, 370, 479, 551, 590, 605, 645, 662, 663, 673, 695, 696, 705, 716, 726, 728, 734, 737, 738, 739, 747, 751, 764, 777, 779, 782, 791, 793, 795, 797, 803, 813, 829, 851, 854, 881, 882, 885, 889, 895, 901, 902, 906, 926, 990, 1097, 1195, 1221, 1248, 1249, 1259, 1280, 1281, 1282, 1326, 1334], "valid": [34, 37, 43, 63, 116, 120, 122, 126, 148, 153, 172, 207, 305, 387, 649, 651, 652, 657, 658, 659, 660, 664, 674, 675, 803, 813, 860, 926, 931, 1006, 1071, 1089, 1235, 1237, 1238, 1243, 1244, 1245, 1246, 1250, 1260, 1261, 1326, 1334], "integ": [34, 37, 43, 62, 63, 65, 69, 70, 71, 72, 78, 79, 80, 81, 82, 135, 142, 144, 147, 149, 169, 188, 235, 260, 263, 305, 317, 369, 428, 462, 463, 589, 598, 603, 609, 610, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 661, 673, 692, 696, 724, 731, 764, 768, 769, 788, 813, 841, 852, 879, 926, 931, 987, 1050, 1084, 1107, 1189, 1193, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1218, 1247, 1259, 1278, 1282, 1306, 1326, 1345, 1350, 1353], "aren": [34, 43, 305, 926], "strictli": [34, 43, 47, 86, 305, 845, 926], "table_nam": [35, 37, 251, 305, 890, 926], "connect": [35, 114, 116, 117, 120, 122, 126, 131, 133, 134, 305, 826], "connectionorcursor": [35, 116, 305], "if_table_exist": [35, 305], "dbwritemod": [35, 305], "fail": [35, 36, 103, 118, 120, 124, 126, 129, 131, 132, 133, 137, 138, 155, 263, 270, 305, 331, 431, 540, 691, 693, 694, 698, 813, 896, 926, 1171, 1277, 1279, 1280, 1284, 1306, 1326], "dbwriteengin": [35, 305], "engine_opt": [35, 119, 305], "databas": [35, 116, 117, 305, 825], "new": [35, 36, 37, 119, 128, 153, 166, 182, 196, 197, 198, 211, 222, 223, 230, 231, 243, 251, 256, 262, 267, 269, 271, 272, 273, 278, 279, 305, 315, 399, 455, 465, 467, 477, 549, 558, 574, 575, 590, 605, 609, 674, 675, 682, 683, 702, 704, 705, 711, 792, 809, 813, 825, 850, 877, 890, 894, 897, 898, 901, 902, 908, 914, 926, 931, 934, 1017, 1077, 1086, 1182, 1194, 1195, 1199, 1260, 1261, 1268, 1269, 1288, 1291, 1297, 1302, 1304, 1309, 1326, 1350, 1352], "version": [35, 36, 40, 53, 86, 118, 119, 129, 136, 141, 142, 143, 144, 148, 151, 155, 156, 157, 158, 166, 178, 181, 188, 189, 190, 191, 192, 193, 197, 212, 214, 219, 231, 232, 235, 243, 247, 251, 253, 256, 262, 263, 267, 268, 274, 280, 285, 286, 305, 320, 363, 364, 371, 372, 382, 383, 384, 385, 386, 402, 404, 408, 412, 415, 417, 419, 420, 422, 426, 427, 429, 441, 444, 450, 465, 472, 482, 486, 489, 494, 506, 520, 538, 548, 549, 551, 558, 567, 596, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 636, 650, 651, 656, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 705, 707, 710, 711, 715, 716, 723, 729, 748, 749, 750, 751, 753, 755, 773, 787, 792, 813, 828, 829, 843, 852, 853, 854, 855, 856, 865, 879, 886, 890, 894, 895, 904, 908, 909, 926, 931, 938, 983, 991, 992, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1041, 1042, 1044, 1048, 1049, 1051, 1063, 1066, 1089, 1090, 1098, 1102, 1104, 1107, 1108, 1114, 1116, 1118, 1129, 1143, 1161, 1170, 1189, 1200, 1216, 1218, 1222, 1236, 1237, 1242, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1277, 1280, 1296, 1297, 1304, 1305, 1306, 1309, 1316, 1326], "20": [35, 36, 37, 40, 114, 119, 136, 141, 142, 143, 144, 148, 151, 157, 158, 165, 166, 174, 188, 196, 198, 218, 225, 227, 231, 233, 235, 243, 251, 262, 263, 267, 268, 274, 280, 286, 305, 328, 329, 330, 363, 364, 391, 398, 401, 402, 407, 411, 413, 414, 416, 421, 427, 428, 431, 441, 444, 450, 465, 472, 477, 558, 567, 594, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 656, 705, 715, 716, 723, 755, 764, 772, 792, 800, 813, 828, 829, 838, 843, 852, 871, 874, 879, 890, 895, 904, 909, 926, 931, 1009, 1016, 1020, 1034, 1049, 1063, 1066, 1076, 1089, 1242, 1304, 1306, 1309, 1326, 1340, 1341, 1343, 1348], "26": [35, 136, 141, 142, 143, 144, 148, 165, 305, 405, 442, 838, 926, 1023, 1348], "instanti": [35, 37, 116, 146, 241, 262, 278, 305, 881, 901, 926, 1304, 1326], "uri": [35, 36, 116, 117, 118, 129, 130, 305], "qualifi": [35, 305], "creat": [35, 37, 47, 86, 102, 106, 108, 114, 115, 116, 117, 120, 122, 126, 129, 130, 142, 143, 144, 145, 146, 147, 148, 149, 160, 161, 188, 189, 192, 223, 226, 235, 262, 263, 274, 278, 281, 305, 399, 427, 441, 450, 540, 602, 606, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 738, 752, 753, 754, 755, 756, 757, 758, 799, 800, 801, 809, 813, 832, 833, 838, 843, 852, 853, 856, 879, 901, 905, 926, 989, 993, 1007, 1017, 1049, 1063, 1073, 1182, 1189, 1192, 1196, 1304, 1306, 1326, 1349, 1350, 1353], "append": [35, 36, 144, 174, 207, 208, 305, 602, 803, 813, 860, 861, 926, 1078, 1326], "your": [35, 37, 47, 48, 86, 114, 115, 116, 117, 119, 134, 205, 211, 237, 238, 241, 259, 278, 283, 291, 305, 320, 400, 450, 465, 550, 552, 659, 691, 693, 694, 701, 775, 813, 857, 864, 866, 881, 901, 906, 914, 926, 1018, 1073, 1171, 1245, 1277, 1279, 1280, 1287, 1326, 1353], "special": [35, 114, 115, 117, 128, 267, 281, 305, 612, 658, 674, 675, 813, 905, 926, 938, 1171, 1201, 1244, 1260, 1261, 1326], "sqlalchemi": [35, 116, 136, 305], "adbc": [35, 116, 117, 305], "against": [35, 91, 114, 116, 251, 305, 510, 660, 792, 890, 926, 1133, 1246, 1334, 1350, 1352, 1353], "postgresql": [35, 116, 117, 305, 590, 813], "user": [35, 116, 117, 156, 211, 225, 285, 291, 305, 320, 550, 552, 594, 634, 729, 775, 813, 874, 908, 914, 926, 930, 938, 1171, 1219, 1326], "server": [35, 116, 117, 305], "port": [35, 114, 116, 117, 120, 122, 131, 305], "sqlite": [35, 116, 305], "db": [35, 116, 117, 305], "replac": [35, 36, 114, 115, 128, 175, 176, 232, 233, 269, 278, 279, 305, 399, 426, 457, 550, 551, 675, 676, 813, 846, 901, 902, 926, 1017, 1048, 1080, 1170, 1214, 1217, 1218, 1261, 1262, 1326, 1344], "insert": [35, 114, 115, 120, 122, 126, 128, 131, 132, 133, 197, 198, 231, 269, 271, 305, 633, 648, 701, 813, 897, 926, 1215, 1234, 1287, 1326], "mode": [35, 36, 43, 44, 45, 46, 54, 55, 137, 139, 226, 251, 305, 658, 785, 788, 804, 813, 834, 835, 926, 1244, 1326, 1334, 1350], "alreadi": [35, 36, 90, 262, 305, 387, 510, 721, 813, 887, 926, 1006, 1133, 1314, 1326], "suppli": [35, 37, 102, 104, 105, 106, 108, 116, 123, 124, 132, 177, 236, 262, 305, 459, 594, 813, 848, 926, 1304, 1326], "unset": [35, 143, 290, 305, 426, 540, 913, 1048, 1334], "associ": [35, 37, 48, 117, 119, 143, 146, 238, 305, 1335, 1337], "panda": [35, 103, 107, 136, 188, 264, 305, 419, 420, 714, 813, 852, 926, 1041, 1042, 1307, 1308, 1326], "to_sql": [35, 305], "though": [35, 116, 188, 305, 809, 852, 926], "eventu": [35, 305], "phase": [35, 272, 305], "favour": [35, 305], "solut": [35, 305], "cursor": [35, 116, 305], "adbc_ingest": [35, 305], "affect": [35, 137, 138, 139, 140, 305], "driver": [35, 116, 117, 305], "provid": [35, 37, 114, 115, 117, 118, 119, 126, 128, 129, 130, 133, 144, 148, 177, 203, 251, 262, 305, 359, 360, 453, 474, 540, 550, 552, 653, 654, 657, 662, 664, 687, 688, 689, 690, 764, 795, 813, 825, 848, 890, 926, 975, 976, 1092, 1119, 1171, 1239, 1240, 1243, 1248, 1250, 1304, 1326, 1337, 1343, 1347, 1350, 1353], "otherwis": [35, 116, 119, 143, 146, 150, 211, 218, 238, 241, 262, 267, 291, 305, 354, 359, 370, 388, 449, 450, 451, 452, 540, 552, 561, 590, 594, 598, 603, 649, 653, 656, 660, 661, 666, 680, 692, 725, 758, 761, 770, 775, 784, 803, 813, 871, 881, 914, 926, 971, 975, 990, 1007, 1072, 1073, 1074, 1075, 1163, 1171, 1189, 1193, 1214, 1217, 1235, 1239, 1242, 1246, 1247, 1252, 1266, 1278, 1326, 1343], "target_t": [35, 305], "pyodbc": [35, 305], "wa": [35, 53, 137, 224, 262, 263, 282, 305, 605, 676, 758, 813, 931, 1195, 1262, 1306, 1326], "fast_executemani": [35, 305], "improv": [35, 46, 120, 131, 305, 550, 813, 926], "perform": [35, 42, 44, 46, 48, 89, 92, 99, 103, 114, 115, 116, 120, 126, 128, 131, 132, 133, 155, 158, 187, 188, 189, 190, 191, 192, 208, 211, 212, 214, 219, 229, 235, 237, 238, 253, 263, 268, 291, 305, 320, 463, 540, 550, 552, 590, 610, 650, 665, 666, 676, 691, 693, 694, 813, 829, 852, 853, 855, 856, 861, 879, 889, 895, 904, 905, 926, 1171, 1236, 1251, 1252, 1262, 1277, 1279, 1280, 1305, 1306, 1326], "pyodbc_uri": [35, 305], "mssql": [35, 305], "1433": [35, 305], "odbc": [35, 116, 305], "18": [35, 109, 165, 218, 235, 305, 381, 427, 441, 444, 477, 494, 573, 610, 705, 813, 838, 871, 875, 879, 926, 931, 1066, 1280, 1341], "create_engin": [35, 305], "deltalak": [36, 118, 129, 136, 305], "deltat": [36, 305], "ignor": [36, 116, 143, 144, 148, 214, 215, 253, 254, 273, 305, 316, 318, 342, 391, 426, 449, 451, 452, 508, 517, 582, 583, 648, 725, 727, 739, 813, 931, 935, 936, 959, 1009, 1048, 1072, 1074, 1075, 1131, 1140, 1180, 1181, 1234, 1326], "merg": [36, 207, 218, 305, 860, 871, 926], "overwrite_schema": [36, 305], "storage_opt": [36, 114, 118, 120, 122, 126, 129, 130, 131, 133, 305], "delta_write_opt": [36, 305], "delta_merge_opt": [36, 305], "tablemerg": [36, 305], "delta": [36, 118, 129, 252, 275, 305, 535, 542, 624, 625, 628, 629, 647, 722, 740, 742, 789, 790, 794, 802, 813, 825, 891, 899, 926, 1208, 1210, 1233, 1315, 1326], "handl": [36, 54, 55, 56, 109, 114, 115, 128, 134, 305, 391, 508, 656, 701, 813, 834, 835, 926, 930, 1009, 1131, 1242, 1287, 1326], "throw": [36, 104, 105, 108, 159, 305, 365, 662, 664, 813, 831, 926, 980, 1248, 1250, 1326], "add": [36, 37, 115, 174, 188, 191, 211, 278, 279, 280, 281, 305, 388, 576, 577, 578, 579, 596, 598, 705, 707, 758, 762, 803, 813, 852, 855, 860, 901, 902, 903, 904, 905, 926, 1078, 1326], "anyth": [36, 236, 305], "updat": [36, 165, 305, 838, 926], "deprec": [36, 40, 86, 87, 141, 142, 143, 144, 148, 151, 156, 157, 158, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 231, 232, 235, 247, 253, 256, 263, 268, 274, 280, 285, 286, 305, 320, 363, 364, 371, 372, 382, 383, 384, 385, 386, 402, 404, 408, 412, 415, 417, 422, 426, 427, 429, 441, 444, 450, 465, 482, 486, 489, 494, 506, 520, 538, 548, 549, 551, 567, 596, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 636, 651, 656, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 707, 710, 711, 715, 716, 723, 729, 741, 748, 749, 750, 751, 753, 755, 773, 813, 828, 829, 843, 852, 853, 854, 855, 856, 865, 879, 886, 894, 895, 904, 908, 909, 926, 938, 983, 991, 992, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1066, 1089, 1098, 1102, 1104, 1107, 1108, 1114, 1116, 1118, 1129, 1143, 1161, 1170, 1189, 1200, 1216, 1218, 1222, 1237, 1242, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1277, 1280, 1296, 1297, 1305, 1306, 1316, 1326], "sinc": [36, 40, 62, 63, 78, 86, 116, 118, 129, 141, 142, 143, 144, 148, 151, 156, 157, 158, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 231, 232, 235, 247, 253, 256, 263, 268, 274, 280, 285, 286, 305, 320, 363, 364, 371, 372, 382, 383, 384, 385, 386, 402, 404, 406, 408, 412, 415, 417, 422, 426, 427, 429, 441, 444, 450, 465, 482, 486, 489, 494, 506, 520, 538, 548, 549, 550, 551, 567, 596, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 636, 651, 656, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 707, 710, 711, 715, 716, 723, 729, 748, 749, 750, 751, 753, 755, 764, 773, 813, 828, 829, 843, 852, 853, 854, 855, 856, 865, 879, 886, 889, 894, 895, 904, 908, 909, 926, 938, 983, 991, 992, 1002, 1003, 1004, 1005, 1007, 1020, 1022, 1024, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1066, 1089, 1098, 1102, 1104, 1107, 1108, 1114, 1116, 1118, 1129, 1143, 1161, 1170, 1189, 1200, 1216, 1218, 1222, 1237, 1242, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1277, 1280, 1296, 1297, 1305, 1306, 1316, 1326], "14": [36, 136, 165, 178, 197, 211, 212, 214, 219, 232, 253, 256, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 382, 383, 384, 385, 386, 396, 401, 402, 407, 411, 414, 416, 421, 428, 431, 477, 538, 601, 673, 710, 711, 748, 749, 750, 751, 755, 799, 800, 813, 838, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 931, 1002, 1003, 1004, 1005, 1014, 1049, 1098, 1118, 1161, 1218, 1259, 1296, 1297, 1316, 1326], "schema_mod": [36, 305], "extra": [36, 114, 115, 118, 120, 122, 128, 129, 130, 131, 174, 188, 305, 813, 852, 926, 930, 1078, 1326], "storag": [36, 114, 118, 120, 122, 126, 129, 130, 131, 305], "backend": [36, 116, 117, 118, 129, 130, 305], "cloud": [36, 116, 118, 126, 129, 130, 131, 133, 134, 305], "configur": [36, 118, 129, 130, 153, 305], "authent": [36, 118, 129, 130, 305], "see": [36, 37, 38, 39, 54, 55, 63, 116, 117, 118, 119, 120, 122, 126, 129, 130, 133, 137, 138, 139, 140, 144, 148, 163, 188, 207, 225, 226, 305, 308, 370, 458, 495, 550, 642, 649, 657, 658, 660, 661, 674, 675, 692, 753, 754, 756, 757, 787, 800, 801, 809, 813, 834, 835, 852, 926, 930, 931, 984, 990, 1120, 1229, 1235, 1243, 1244, 1246, 1247, 1260, 1261, 1278, 1326, 1330, 1353], "here": [36, 37, 42, 102, 104, 105, 106, 108, 116, 117, 118, 123, 124, 126, 129, 130, 132, 133, 142, 144, 148, 305, 395, 550, 552, 659, 664, 736, 813, 887, 926, 931, 1013, 1250], "gc": [36, 118, 129, 130, 305], "azur": [36, 118, 126, 129, 130, 133, 305], "keyword": [36, 118, 126, 129, 144, 148, 163, 187, 225, 236, 241, 242, 264, 278, 279, 283, 305, 459, 594, 705, 791, 795, 803, 813, 851, 874, 881, 882, 901, 902, 906, 926, 1307, 1326, 1337], "while": [36, 55, 115, 118, 119, 129, 144, 148, 153, 205, 217, 269, 273, 305, 666, 835, 870, 898, 926, 1089, 1252, 1326], "lake": [36, 118, 129, 305, 825], "typeerror": [36, 305], "unsupport": [36, 305], "arrowinvaliderror": [36, 305], "could": [36, 83, 89, 159, 305, 365, 744, 748, 758, 762, 813, 831, 838, 841, 926, 980, 1089, 1326], "primit": [36, 305, 484, 813], "tablenotfounderror": [36, 305], "doesn": [36, 114, 128, 188, 208, 305, 446, 813, 852, 926, 1069, 1316, 1326], "action": [36, 305], "trigger": [36, 264, 305, 813, 930, 1307, 1326], "protocol": [36, 103, 117, 155, 305], "categor": [36, 47, 66, 85, 86, 137, 138, 139, 140, 207, 260, 305, 366, 367, 388, 598, 605, 714, 813, 931, 981, 982, 983, 984, 985, 1007, 1189, 1195, 1308, 1326], "convert": [36, 103, 107, 118, 119, 125, 129, 155, 258, 259, 260, 261, 262, 263, 264, 266, 267, 305, 353, 354, 389, 400, 430, 433, 539, 540, 549, 550, 574, 600, 659, 673, 691, 693, 694, 695, 696, 698, 703, 813, 926, 930, 970, 971, 984, 1018, 1052, 1055, 1162, 1163, 1245, 1259, 1277, 1279, 1280, 1281, 1282, 1284, 1290, 1293, 1303, 1304, 1305, 1306, 1307, 1309, 1316, 1326, 1347, 1348], "normal": [36, 188, 305, 446, 495, 642, 813, 852, 926, 1069, 1120, 1229, 1326], "nullabl": [36, 305], "To": [36, 55, 175, 212, 214, 219, 253, 305, 370, 393, 394, 457, 458, 649, 656, 657, 658, 660, 674, 675, 687, 688, 689, 690, 699, 813, 846, 926, 990, 1011, 1012, 1080, 1089, 1235, 1242, 1243, 1244, 1246, 1260, 1261, 1285, 1306, 1326], "pyarrow": [36, 42, 102, 107, 114, 117, 118, 120, 122, 126, 129, 134, 136, 257, 263, 264, 305, 825, 1300, 1305, 1306, 1307, 1326], "ha": [36, 37, 48, 55, 107, 116, 128, 151, 155, 156, 178, 181, 188, 189, 190, 191, 192, 197, 232, 235, 256, 274, 280, 285, 286, 305, 320, 363, 364, 382, 383, 384, 385, 386, 387, 465, 482, 486, 489, 494, 506, 520, 538, 548, 549, 550, 551, 562, 567, 596, 611, 613, 615, 617, 619, 621, 624, 626, 628, 651, 661, 663, 667, 668, 669, 670, 673, 678, 679, 685, 692, 702, 707, 710, 711, 715, 716, 729, 748, 749, 750, 751, 761, 770, 773, 784, 809, 813, 835, 852, 853, 854, 855, 856, 865, 879, 894, 904, 908, 909, 914, 926, 938, 979, 989, 1002, 1003, 1004, 1005, 1006, 1008, 1089, 1102, 1104, 1108, 1129, 1143, 1161, 1170, 1200, 1216, 1218, 1237, 1247, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1278, 1296, 1297, 1310, 1326], "last": [36, 137, 138, 139, 140, 158, 194, 208, 210, 226, 238, 250, 255, 263, 268, 270, 299, 305, 330, 341, 350, 363, 364, 387, 403, 419, 424, 442, 486, 487, 494, 515, 534, 537, 540, 573, 574, 576, 578, 580, 581, 596, 644, 645, 661, 683, 692, 707, 709, 715, 716, 734, 798, 813, 829, 861, 889, 893, 895, 896, 922, 926, 931, 947, 958, 967, 1006, 1021, 1041, 1046, 1064, 1091, 1108, 1109, 1122, 1138, 1157, 1160, 1231, 1247, 1269, 1278, 1295, 1306, 1326, 1344, 1346], "filesystem": [36, 118, 129, 130, 305], "table_path": [36, 118, 129, 130, 305], "match": [36, 37, 56, 63, 96, 102, 104, 105, 106, 108, 116, 123, 124, 132, 137, 138, 139, 140, 159, 176, 207, 208, 236, 273, 305, 558, 559, 605, 623, 649, 650, 651, 652, 655, 657, 658, 660, 662, 664, 674, 675, 676, 684, 691, 693, 694, 803, 813, 831, 847, 860, 861, 898, 926, 931, 1070, 1107, 1116, 1195, 1207, 1235, 1236, 1237, 1238, 1241, 1243, 1244, 1246, 1248, 1250, 1260, 1261, 1262, 1270, 1277, 1279, 1280, 1326, 1346], "old": [36, 230, 305, 605, 813, 877, 926, 1195, 1326], "existing_table_path": [36, 305], "store": [36, 114, 130, 174, 205, 237, 305, 366, 608, 813, 981, 1078, 1198, 1326], "bucket": [36, 118, 129, 130, 133, 305, 427, 441, 474, 813, 1049, 1063, 1092, 1326], "prefix": [36, 114, 115, 128, 153, 305, 315, 362, 549, 559, 574, 577, 578, 580, 581, 684, 688, 689, 701, 707, 813, 931, 978, 1270, 1275, 1287], "aws_region": [36, 129, 133, 305], "the_aws_region": [36, 305], "aws_access_key_id": [36, 118, 129, 133, 305], "the_aws_access_key_id": [36, 118, 129, 130, 305], "aws_secret_access_kei": [36, 118, 129, 133, 305], "the_aws_secret_access_kei": [36, 118, 129, 130, 305], "pa": [36, 102, 134, 305], "check": [36, 63, 91, 114, 115, 128, 137, 138, 139, 140, 152, 171, 181, 188, 189, 191, 192, 203, 207, 235, 305, 337, 358, 361, 362, 450, 471, 479, 484, 505, 610, 649, 655, 660, 684, 813, 852, 853, 855, 856, 860, 865, 866, 879, 926, 954, 974, 977, 978, 1070, 1073, 1088, 1098, 1100, 1104, 1105, 1107, 1114, 1115, 1116, 1118, 1119, 1128, 1216, 1235, 1241, 1246, 1270, 1326], "doc": [36, 38, 39, 117, 120, 122, 137, 139, 163, 305], "predic": [36, 43, 44, 45, 46, 54, 55, 128, 131, 132, 133, 134, 177, 203, 236, 305, 459, 723, 762, 803, 813, 834, 835, 843, 845, 848, 865, 866, 875, 877, 887, 904, 905, 926, 1082, 1214, 1217, 1326], "source_alia": [36, 305], "target_alia": [36, 305], "when_matched_update_al": [36, 305], "when_not_matched_insert_al": [36, 305], "execut": [36, 47, 56, 116, 117, 209, 251, 305, 390, 510, 721, 792, 813, 830, 839, 865, 866, 875, 890, 926, 930, 1133, 1314, 1326, 1335, 1336, 1338, 1350], "workbook": [37, 119, 125, 305], "worksheet": [37, 119, 125, 305], "posit": [37, 167, 173, 187, 190, 224, 241, 242, 244, 246, 250, 271, 278, 279, 283, 305, 349, 449, 451, 452, 453, 532, 590, 598, 635, 645, 659, 660, 673, 674, 675, 696, 705, 732, 733, 734, 737, 738, 739, 760, 791, 795, 813, 840, 844, 851, 854, 881, 882, 884, 885, 889, 897, 901, 902, 906, 926, 931, 966, 1072, 1074, 1075, 1155, 1189, 1221, 1245, 1259, 1282, 1326, 1351], "tupl": [37, 57, 117, 119, 125, 156, 205, 211, 224, 236, 237, 238, 245, 267, 282, 305, 606, 813, 875, 887, 926, 931, 1196, 1326], "a1": [37, 49, 51, 305], "table_styl": [37, 305], "column_format": [37, 305], "columnformatdict": [37, 305], "dtype_format": [37, 305], "oneormoredatatyp": [37, 142, 305, 1116, 1326], "conditional_format": [37, 305], "conditionalformatdict": [37, 305], "header_format": [37, 305], "column_tot": [37, 305], "columntotalsdefinit": [37, 305], "column_width": [37, 305], "columnwidthsdefinit": [37, 305], "row_tot": [37, 305], "rowtotalsdefinit": [37, 305], "row_height": [37, 305], "sparklin": [37, 305], "sequenc": [37, 48, 77, 102, 104, 105, 106, 108, 114, 115, 116, 119, 123, 124, 125, 128, 132, 142, 143, 144, 145, 146, 158, 165, 173, 174, 207, 208, 217, 222, 224, 225, 226, 238, 250, 260, 262, 267, 268, 272, 273, 274, 305, 354, 364, 388, 466, 484, 540, 548, 550, 594, 598, 605, 645, 689, 690, 704, 716, 729, 734, 744, 745, 748, 749, 762, 764, 773, 774, 775, 784, 787, 793, 813, 829, 838, 844, 860, 861, 870, 874, 889, 895, 898, 926, 931, 971, 1007, 1008, 1078, 1163, 1189, 1195, 1218, 1291, 1326], "formula": [37, 305, 446, 813, 1069, 1326], "autofilt": [37, 305], "autofit": [37, 305], "hidden_column": [37, 305], "selectortyp": [37, 305, 931], "hide_gridlin": [37, 305], "sheet_zoom": [37, 305], "freeze_pan": [37, 305], "bytesio": [37, 38, 39, 42, 112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 166, 305, 390, 813, 839, 926], "open": [37, 112, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 166, 305, 390, 813, 839, 926], "xlsxwriter": [37, 136, 305], "close": [37, 116, 188, 189, 191, 192, 235, 251, 305, 388, 479, 545, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 642, 753, 754, 756, 757, 792, 800, 801, 813, 852, 853, 855, 856, 879, 890, 926, 1007, 1097, 1189, 1229, 1326], "xlsx": [37, 119, 305], "work": [37, 64, 66, 115, 134, 231, 242, 279, 305, 316, 318, 320, 355, 369, 370, 453, 462, 510, 541, 550, 552, 573, 574, 576, 578, 580, 581, 590, 661, 665, 666, 680, 692, 718, 813, 882, 902, 926, 931, 935, 936, 972, 987, 990, 1084, 1133, 1164, 1247, 1251, 1252, 1266, 1278, 1311, 1326], "directori": [37, 42, 126, 305, 930], "sheet1": [37, 305], "medium": [37, 305], "kei": [37, 48, 53, 56, 126, 130, 133, 188, 205, 207, 208, 218, 224, 226, 230, 234, 237, 238, 273, 282, 305, 459, 552, 605, 795, 813, 845, 852, 860, 861, 871, 877, 878, 898, 926, 931, 1195, 1326, 1340], "follow": [37, 42, 53, 114, 115, 116, 118, 128, 129, 130, 137, 188, 208, 211, 225, 235, 263, 274, 305, 423, 427, 441, 450, 550, 594, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 704, 717, 753, 754, 756, 757, 775, 800, 801, 803, 805, 806, 808, 813, 814, 815, 818, 820, 821, 822, 852, 861, 874, 879, 926, 1045, 1049, 1063, 1073, 1191, 1214, 1217, 1306, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333, 1353], "first_column": [37, 305], "last_column": [37, 305], "banded_column": [37, 305], "banded_row": [37, 305], "sheet": [37, 119, 125, 305], "chart": [37, 305, 875, 926], "subsequ": [37, 229, 264, 305, 540, 792, 803, 843, 926, 1307, 1326, 1339], "colnam": [37, 128, 305], "given": [37, 48, 91, 102, 104, 105, 106, 108, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 128, 132, 133, 139, 140, 141, 142, 144, 146, 147, 148, 149, 156, 172, 173, 175, 188, 189, 191, 192, 203, 211, 224, 225, 235, 236, 237, 238, 246, 247, 250, 267, 273, 305, 337, 349, 354, 364, 370, 396, 400, 430, 432, 433, 446, 450, 474, 479, 505, 532, 540, 543, 552, 590, 594, 601, 604, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 635, 636, 658, 659, 671, 672, 691, 694, 701, 704, 716, 729, 760, 761, 770, 773, 774, 775, 784, 788, 789, 790, 813, 844, 852, 853, 855, 856, 865, 866, 874, 879, 885, 886, 889, 898, 908, 914, 926, 931, 938, 954, 966, 971, 990, 1014, 1018, 1052, 1054, 1055, 1069, 1071, 1073, 1092, 1097, 1119, 1128, 1155, 1163, 1166, 1169, 1171, 1182, 1191, 1196, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1215, 1221, 1222, 1244, 1245, 1257, 1258, 1277, 1280, 1287, 1313, 1317, 1326, 1334, 1335, 1342, 1345, 1346, 1350, 1353], "dd": [37, 305, 1346], "mm": [37, 305], "yyyi": [37, 305], "overridden": [37, 102, 104, 106, 108, 123, 124, 150, 305, 926], "basi": [37, 119, 144, 305], "param": [37, 102, 104, 105, 106, 108, 114, 115, 123, 124, 128, 143, 144, 148, 236, 305, 926], "It": [37, 38, 43, 44, 45, 46, 47, 54, 55, 64, 66, 86, 126, 133, 134, 165, 218, 225, 251, 262, 267, 272, 273, 281, 291, 305, 387, 388, 427, 474, 552, 561, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 789, 790, 792, 809, 813, 830, 834, 835, 838, 865, 866, 871, 890, 898, 905, 914, 926, 985, 1006, 1007, 1049, 1092, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1214, 1217, 1304, 1309, 1326], "float_dtyp": [37, 305], "simplifi": [37, 43, 44, 45, 46, 54, 55, 305, 834, 835, 843, 845, 875, 887, 926], "uniform": [37, 305, 598, 813, 1189, 1326], "condit": [37, 169, 177, 236, 305, 459, 479, 655, 684, 735, 762, 803, 813, 841, 848, 926, 1097, 1326, 1340, 1344, 1349], "typenam": [37, 305], "3_color_scal": [37, 305], "data_bar": [37, 305], "make": [37, 56, 77, 102, 107, 114, 115, 119, 120, 122, 126, 131, 218, 222, 229, 263, 274, 305, 451, 452, 474, 580, 581, 590, 604, 682, 813, 871, 926, 930, 1074, 1075, 1092, 1268, 1306, 1326, 1350], "icon": [37, 305], "multipl": [37, 54, 55, 56, 114, 115, 119, 125, 128, 131, 132, 133, 142, 144, 148, 167, 172, 174, 177, 187, 188, 196, 206, 224, 226, 238, 241, 244, 250, 273, 278, 283, 305, 363, 364, 513, 538, 557, 562, 570, 571, 590, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 702, 715, 716, 734, 741, 748, 749, 762, 773, 774, 776, 781, 787, 793, 796, 803, 809, 813, 829, 834, 835, 840, 848, 851, 852, 881, 884, 889, 895, 898, 901, 906, 914, 926, 937, 967, 1071, 1078, 1136, 1157, 1161, 1176, 1195, 1196, 1231, 1326, 1337, 1342], "singl": [37, 48, 54, 55, 56, 113, 114, 115, 116, 117, 119, 126, 128, 133, 142, 159, 167, 168, 169, 174, 183, 193, 203, 211, 224, 236, 238, 250, 262, 263, 282, 305, 320, 338, 370, 395, 423, 466, 469, 472, 506, 507, 513, 538, 550, 552, 602, 605, 606, 608, 645, 648, 661, 666, 680, 692, 723, 729, 734, 738, 739, 769, 774, 775, 793, 801, 813, 831, 834, 835, 840, 841, 889, 926, 931, 955, 990, 1013, 1045, 1078, 1090, 1129, 1130, 1136, 1192, 1195, 1196, 1198, 1234, 1247, 1252, 1266, 1278, 1300, 1306, 1326, 1335], "across": [37, 48, 117, 193, 213, 215, 220, 254, 305, 472, 726, 728, 744, 745, 747, 751, 777, 779, 782, 797, 813, 1090, 1326], "effect": [37, 180, 188, 191, 305, 405, 463, 552, 575, 577, 579, 753, 754, 813, 852, 855, 904, 905, 926, 1014, 1023], "heatmap": [37, 305], "min": [37, 42, 46, 165, 176, 220, 226, 235, 305, 372, 379, 384, 458, 590, 601, 610, 619, 620, 782, 791, 813, 838, 847, 879, 926, 930, 992, 999, 1003, 1008, 1081, 1191, 1205, 1326, 1342, 1344, 1353], "entir": [37, 54, 55, 119, 125, 305, 834, 835, 926], "made": [37, 116, 305], "abov": [37, 137, 208, 226, 305, 803], "than": [37, 43, 44, 45, 46, 54, 55, 101, 106, 108, 114, 115, 116, 119, 125, 128, 134, 158, 160, 187, 190, 205, 208, 211, 224, 236, 237, 239, 268, 272, 291, 305, 363, 463, 465, 468, 470, 479, 497, 527, 547, 550, 552, 565, 598, 609, 632, 642, 661, 665, 671, 672, 683, 692, 701, 715, 716, 740, 753, 775, 813, 829, 834, 835, 851, 854, 861, 895, 914, 926, 1097, 1150, 1171, 1189, 1199, 1213, 1229, 1247, 1251, 1257, 1258, 1269, 1278, 1287, 1306, 1326, 1353], "bold": [37, 305], "font_color": [37, 305], "702963": [37, 305], "total": [37, 172, 286, 305, 404, 408, 412, 415, 417, 422, 429, 434, 435, 436, 437, 438, 439, 440, 498, 519, 813, 909, 1022, 1026, 1033, 1036, 1039, 1044, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1071, 1121, 1142, 1326], "export": [37, 205, 206, 237, 238, 259, 262, 305, 809, 931], "sum": [37, 172, 180, 187, 188, 203, 226, 235, 254, 283, 305, 380, 381, 386, 390, 446, 459, 540, 552, 561, 563, 564, 565, 566, 605, 610, 626, 627, 723, 725, 744, 746, 747, 748, 750, 751, 762, 775, 787, 797, 813, 834, 835, 839, 843, 845, 851, 852, 873, 875, 879, 883, 887, 906, 926, 930, 931, 1000, 1001, 1005, 1069, 1071, 1209, 1326, 1334, 1340, 1342, 1344], "must": [37, 66, 103, 104, 118, 129, 130, 134, 165, 173, 188, 189, 191, 192, 208, 218, 235, 236, 305, 388, 540, 598, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 803, 813, 838, 844, 852, 853, 855, 856, 861, 865, 866, 871, 879, 887, 926, 930, 1007, 1008, 1189, 1195, 1326], "funcnam": [37, 305], "averag": [37, 305, 449, 450, 451, 452, 601, 813, 1072, 1073, 1074, 1075, 1191, 1326, 1341], "count_num": [37, 305], "count": [37, 134, 157, 165, 188, 222, 223, 235, 269, 274, 280, 296, 305, 321, 338, 347, 377, 382, 395, 450, 474, 498, 506, 507, 519, 525, 552, 572, 588, 610, 613, 615, 617, 619, 621, 624, 626, 628, 651, 652, 719, 721, 730, 736, 743, 771, 783, 813, 828, 838, 852, 873, 879, 904, 919, 926, 931, 955, 964, 997, 1008, 1013, 1073, 1092, 1121, 1129, 1130, 1142, 1148, 1178, 1184, 1237, 1238, 1312, 1314, 1326, 1334, 1344], "std_dev": [37, 305], "var": [37, 149, 305, 628, 629, 813, 926, 1326], "pixel": [37, 305], "unit": [37, 63, 65, 137, 138, 139, 140, 144, 148, 172, 305, 397, 399, 406, 432, 444, 450, 456, 546, 562, 691, 694, 720, 753, 754, 755, 756, 757, 758, 764, 813, 875, 926, 930, 931, 1015, 1017, 1024, 1054, 1066, 1071, 1073, 1079, 1169, 1277, 1280, 1313, 1326, 1353], "hand": [37, 114, 115, 128, 305, 528, 529, 530, 531, 1151, 1152, 1153, 1154], "side": [37, 188, 189, 191, 192, 235, 305, 479, 528, 529, 530, 531, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 879, 926, 930, 1097, 1151, 1152, 1153, 1154, 1215, 1326], "call": [37, 47, 54, 55, 86, 107, 115, 116, 119, 137, 138, 139, 140, 144, 148, 153, 187, 188, 191, 209, 211, 235, 251, 263, 304, 305, 320, 378, 381, 395, 494, 552, 573, 574, 576, 578, 580, 581, 596, 638, 707, 736, 741, 809, 813, 834, 835, 843, 845, 851, 852, 853, 855, 856, 875, 879, 887, 890, 925, 926, 930, 931, 938, 1013, 1171, 1225, 1305, 1306, 1326, 1338], "ad": [37, 105, 119, 188, 191, 269, 273, 278, 279, 305, 319, 456, 744, 745, 748, 749, 813, 852, 855, 898, 901, 902, 926, 931, 1007, 1079, 1189, 1326], "wise": [37, 48, 116, 180, 305, 322, 323, 324, 325, 326, 327, 373, 374, 375, 454, 544, 639, 640, 641, 712, 713, 748, 749, 762, 787, 813, 939, 940, 941, 942, 943, 944, 994, 995, 996, 1076, 1167, 1168, 1226, 1227, 1228, 1298, 1299, 1326], "particip": [37, 305], "distinct": [37, 148, 224, 282, 305, 355, 482, 483, 486, 487, 541, 601, 609, 758, 813, 972, 1102, 1103, 1108, 1109, 1164, 1191, 1199, 1326, 1341, 1351, 1353], "referenc": [37, 305, 704], "differ": [37, 114, 119, 134, 137, 139, 174, 188, 193, 205, 235, 237, 238, 259, 262, 263, 269, 305, 391, 403, 423, 424, 426, 442, 448, 463, 472, 508, 528, 530, 540, 552, 582, 583, 585, 605, 691, 719, 761, 764, 770, 784, 813, 843, 852, 879, 926, 931, 984, 1009, 1021, 1045, 1046, 1048, 1064, 1078, 1090, 1131, 1151, 1153, 1171, 1180, 1181, 1195, 1216, 1277, 1326, 1347], "row_index": [37, 305], "height": [37, 144, 169, 305], "intersect": [37, 305, 529, 931, 1152], "bodi": [37, 305], "start": [37, 112, 114, 115, 117, 120, 122, 125, 126, 128, 131, 132, 133, 150, 182, 187, 188, 190, 191, 209, 249, 256, 274, 280, 281, 305, 358, 361, 362, 395, 403, 418, 424, 427, 441, 442, 453, 467, 514, 533, 609, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 643, 649, 655, 658, 672, 680, 684, 686, 688, 689, 692, 701, 711, 731, 736, 744, 748, 752, 753, 754, 755, 756, 757, 760, 762, 768, 769, 800, 801, 803, 813, 850, 851, 852, 854, 855, 875, 888, 894, 904, 905, 926, 931, 978, 1013, 1015, 1018, 1021, 1024, 1025, 1032, 1035, 1038, 1040, 1043, 1046, 1049, 1054, 1063, 1064, 1086, 1137, 1156, 1199, 1230, 1241, 1244, 1258, 1266, 1270, 1272, 1274, 1278, 1287, 1297, 1326, 1340, 1346, 1353], "unless": [37, 48, 104, 262, 267, 305, 686, 687, 788, 926, 1272, 1316, 1326, 1347], "marker": [37, 305], "compliant": [37, 305], "case": [37, 47, 48, 55, 102, 104, 105, 106, 108, 116, 123, 124, 132, 133, 150, 156, 174, 188, 189, 191, 192, 205, 211, 226, 235, 237, 238, 259, 262, 263, 305, 396, 450, 549, 550, 561, 562, 574, 610, 613, 615, 617, 619, 621, 624, 626, 628, 649, 650, 658, 660, 674, 675, 676, 813, 835, 852, 853, 855, 856, 879, 926, 930, 931, 1014, 1073, 1078, 1235, 1236, 1244, 1246, 1260, 1261, 1262, 1304, 1326], "three": [37, 235, 266, 305, 388, 598, 610, 633, 661, 692, 813, 879, 926, 971, 1007, 1163, 1189, 1247, 1278, 1326], "avail": [37, 38, 111, 116, 117, 118, 129, 130, 142, 153, 226, 251, 304, 305, 601, 792, 805, 806, 808, 812, 813, 814, 815, 818, 819, 820, 821, 822, 825, 845, 890, 925, 926, 930, 931, 1008, 1191, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333, 1350], "insert_befor": [37, 305], "insert_aft": [37, 305], "respect": [37, 305, 650, 676, 931, 1236, 1262, 1309, 1326], "direct": [37, 117, 126, 130, 133, 137, 246, 262, 272, 305, 349, 532, 635, 813, 885, 926, 966, 1155, 1221, 1326], "far": [37, 305], "strongli": [37, 150, 211, 236, 291, 305, 552, 813, 1171, 1326], "advis": [37, 47, 86, 209, 305], "structur": [37, 38, 91, 92, 99, 174, 225, 238, 263, 305, 594, 813, 874, 926, 1078, 1326], "wherev": [37, 211, 291, 305, 552, 813, 1171, 1326], "possibl": [37, 91, 104, 105, 108, 114, 119, 141, 144, 148, 158, 187, 190, 205, 211, 237, 268, 270, 291, 305, 546, 552, 561, 612, 683, 720, 813, 829, 836, 842, 851, 854, 880, 889, 895, 896, 900, 926, 1171, 1201, 1269, 1326], "simpl": [37, 222, 305], "colx": [37, 305, 580, 581, 931, 1339, 1353], "coli": [37, 305, 580, 581, 931, 1353], "after": [37, 56, 105, 112, 114, 115, 120, 122, 126, 128, 131, 132, 133, 174, 271, 304, 305, 453, 551, 590, 601, 701, 813, 897, 926, 1078, 1170, 1191, 1287, 1326, 1339], "befor": [37, 62, 63, 114, 116, 119, 128, 134, 137, 138, 139, 140, 150, 153, 174, 188, 191, 208, 251, 262, 267, 271, 305, 380, 381, 387, 550, 551, 590, 591, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 656, 701, 708, 789, 790, 813, 852, 855, 858, 861, 897, 926, 930, 1000, 1001, 1006, 1078, 1170, 1185, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1242, 1287, 1294, 1326, 1340], "most": [37, 102, 114, 115, 117, 128, 137, 138, 139, 140, 263, 305, 562, 570, 591, 683, 813, 1176, 1185, 1269, 1306, 1326, 1336, 1350], "mandatori": [37, 305], "return_dtyp": [37, 156, 211, 305, 320, 548, 550, 551, 552, 605, 724, 729, 773, 774, 775, 813, 938, 1170, 1171, 1195, 1326], "latter": [37, 174, 305, 1078, 1326], "appropri": [37, 134, 263, 305, 601, 813, 1191, 1326], "pure": [37, 305, 558], "actual": [37, 105, 144, 148, 238, 305, 1224, 1326, 1347], "indic": [37, 62, 63, 65, 78, 112, 114, 115, 116, 120, 122, 126, 128, 133, 141, 142, 148, 188, 189, 191, 192, 235, 238, 244, 246, 260, 305, 331, 349, 466, 474, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 513, 532, 538, 556, 557, 558, 559, 560, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 635, 639, 710, 734, 735, 784, 813, 852, 853, 855, 856, 879, 884, 885, 926, 930, 931, 966, 1085, 1092, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1136, 1155, 1161, 1214, 1215, 1218, 1221, 1226, 1296, 1301, 1326, 1353], "calcul": [37, 48, 165, 188, 252, 275, 305, 391, 449, 450, 451, 452, 495, 508, 528, 535, 542, 546, 623, 642, 647, 720, 722, 740, 742, 789, 790, 794, 802, 813, 838, 852, 891, 899, 926, 1008, 1009, 1072, 1073, 1074, 1075, 1120, 1131, 1151, 1207, 1229, 1233, 1315, 1326], "individu": [37, 46, 153, 235, 262, 263, 267, 305, 552, 658, 813, 834, 879, 926, 988, 1244, 1326], "gridlin": [37, 305], "zoom": [37, 305], "freez": [37, 305], "pane": [37, 305], "top": [37, 251, 268, 305, 716, 813, 890, 895, 926], "index": [37, 103, 107, 110, 114, 115, 120, 122, 126, 128, 131, 132, 133, 136, 155, 178, 182, 184, 188, 189, 191, 192, 197, 198, 203, 205, 226, 232, 233, 235, 236, 237, 246, 249, 256, 262, 263, 265, 273, 274, 280, 281, 305, 314, 328, 329, 330, 332, 335, 336, 341, 349, 354, 450, 466, 467, 469, 502, 503, 513, 514, 515, 532, 533, 538, 540, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 635, 643, 649, 657, 660, 661, 680, 692, 702, 710, 711, 734, 768, 771, 813, 850, 852, 853, 855, 856, 879, 885, 888, 894, 898, 904, 905, 926, 931, 945, 946, 947, 948, 949, 952, 953, 958, 966, 971, 1073, 1085, 1086, 1119, 1125, 1126, 1136, 1137, 1138, 1155, 1156, 1161, 1163, 1182, 1214, 1215, 1218, 1221, 1230, 1243, 1246, 1247, 1266, 1278, 1296, 1297, 1326, 1342, 1346], "thu": [37, 174, 305, 740, 1078, 1326], "altern": [37, 305, 809, 1343], "a2": [37, 49, 51, 305], "occur": [37, 54, 55, 305, 338, 506, 507, 570, 601, 813, 834, 835, 843, 845, 875, 887, 926, 955, 1129, 1130, 1176, 1191, 1306, 1326], "equival": [37, 102, 104, 105, 106, 108, 118, 123, 124, 132, 188, 203, 222, 305, 313, 317, 447, 448, 450, 463, 468, 470, 497, 547, 569, 571, 584, 585, 586, 589, 595, 666, 706, 717, 724, 813, 852, 926, 1073, 1119, 1252, 1283, 1285, 1286, 1326], "top_row": [37, 305], "top_col": [37, 305], "base": [37, 61, 94, 146, 169, 177, 188, 189, 191, 192, 235, 305, 396, 405, 446, 449, 450, 451, 452, 459, 474, 478, 543, 544, 550, 552, 598, 605, 610, 614, 616, 618, 620, 622, 625, 627, 629, 673, 696, 813, 841, 848, 852, 853, 855, 856, 879, 926, 931, 1014, 1023, 1069, 1072, 1073, 1074, 1075, 1092, 1096, 1166, 1167, 1171, 1189, 1195, 1259, 1282, 1317, 1326, 1340, 1345, 1353], "scroll": [37, 305], "region": [37, 130, 305], "initi": [37, 77, 153, 305, 744, 748, 762, 803, 1350], "5th": [37, 305], "properti": [37, 155, 162, 170, 179, 195, 240, 245, 277, 281, 305, 836, 842, 880, 900, 905, 926, 931, 1326, 1353], "readthedoc": [37, 305], "html": [37, 38, 39, 103, 116, 120, 122, 155, 163, 305], "definit": [37, 305, 495, 813, 931, 1120, 1326], "take": [37, 119, 125, 144, 145, 153, 180, 182, 188, 191, 215, 218, 225, 226, 230, 256, 305, 330, 395, 423, 459, 466, 467, 513, 514, 575, 577, 579, 645, 711, 734, 736, 753, 754, 759, 761, 770, 784, 813, 850, 852, 855, 871, 877, 894, 926, 947, 1013, 1045, 1085, 1086, 1136, 1137, 1297, 1317, 1326, 1342], "care": [37, 305, 320, 552, 634, 813, 1219, 1326], "rel": [37, 117, 118, 129, 130, 137, 138, 139, 140, 305, 423, 449, 451, 452, 617, 621, 624, 628, 813, 1045, 1072, 1074, 1075, 1326], "working_with_conditional_format": [37, 305], "similarli": [37, 105, 188, 208, 235, 274, 305, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063], "well": [37, 114, 115, 116, 128, 305, 479, 813, 1097, 1326, 1350], "adjac": [37, 305], "two": [37, 47, 85, 86, 104, 106, 108, 117, 180, 208, 217, 218, 226, 237, 266, 284, 291, 305, 314, 392, 399, 463, 466, 469, 540, 598, 644, 732, 733, 740, 742, 789, 790, 792, 813, 870, 871, 907, 914, 926, 931, 971, 1010, 1017, 1163, 1189, 1326, 1339, 1340, 1343, 1351], "help": [37, 137, 138, 139, 140, 305, 308, 845, 926, 1326, 1330], "where": [37, 48, 116, 117, 119, 169, 174, 177, 188, 205, 217, 237, 251, 252, 262, 267, 273, 275, 305, 331, 443, 446, 448, 450, 459, 535, 542, 550, 585, 604, 633, 642, 645, 647, 676, 722, 735, 740, 742, 789, 790, 792, 794, 802, 803, 813, 841, 848, 852, 870, 890, 891, 898, 899, 926, 948, 1065, 1069, 1073, 1078, 1082, 1215, 1229, 1233, 1262, 1315, 1317, 1326, 1334, 1349, 1350, 1352], "appear": [37, 60, 105, 305, 719, 813, 931, 1312, 1326], "working_with_sparklin": [37, 305], "inject": [37, 48, 305], "locat": [37, 174, 232, 233, 265, 271, 305, 633, 813, 897, 926, 1078, 1085, 1214, 1215, 1218, 1296, 1326], "syntax": [37, 177, 211, 222, 305, 649, 657, 658, 660, 674, 675, 768, 769, 809, 848, 887, 926, 1235, 1243, 1244, 1246, 1260, 1261, 1326, 1347], "correctli": [37, 119, 305, 550, 813], "microsoft": [37, 305], "com": [37, 117, 305, 449, 451, 452, 657, 658, 659, 813, 1072, 1074, 1075, 1243, 1244, 1245, 1326], "u": [37, 63, 65, 133, 146, 208, 305, 397, 399, 406, 432, 444, 691, 694, 726, 728, 753, 754, 755, 756, 757, 758, 764, 931, 1015, 1017, 1024, 1054, 1066, 1277, 1280, 1337], "offic": [37, 305], "f5ed2452": [37, 305], "2337": [37, 305], "4f71": [37, 305], "bed3": [37, 305], "c8ae6d2b276": [37, 305], "basic": [37, 305, 1353], "random": [37, 38, 120, 135, 142, 193, 239, 305, 472, 527, 601, 632, 638, 721, 813, 825, 1090, 1150, 1191, 1213, 1225, 1314, 1326], "dtm": [37, 305, 399, 931, 1017], "500": [37, 273, 305, 401, 402, 407, 411, 414, 416, 421, 428, 431, 845, 898, 926, 1032, 1035, 1043, 1202, 1203, 1205, 1326], "val": [37, 234, 305, 552, 594, 714, 803, 813, 878, 926], "10_000": [37, 305], "20_000": [37, 305], "30_000": [37, 305], "increas": [37, 48, 114, 125, 126, 133, 305, 387, 609, 813, 1006, 1199, 1326], "b4": [37, 305], "light": [37, 305], "twice": [37, 305], "titl": [37, 305, 1334], "explicit": [37, 116, 128, 142, 251, 273, 305, 787, 890, 898, 926], "integr": [37, 267, 305, 1353], "multi_fram": [37, 305], "wb": [37, 305], "coordin": [37, 305], "advanc": [37, 119, 226, 305, 354, 540, 573, 576, 578, 580, 581, 971, 1163, 1353], "min_color": [37, 305], "76933c": [37, 305], "mid_color": [37, 305], "c4d79b": [37, 305], "max_color": [37, 305], "ebf1d": [37, 305], "data_bar_2010": [37, 305], "bar_color": [37, 305], "9bbb59": [37, 305], "bar_negative_color_sam": [37, 305], "bar_negative_border_color_sam": [37, 305], "white": [37, 305], "w": [37, 116, 188, 191, 238, 305, 652, 657, 659, 726, 728, 852, 855, 926, 931, 1238, 1243, 1245, 1273, 1336, 1337], "get_worksheet_by_nam": [37, 305], "fmt_titl": [37, 305], "add_format": [37, 305], "4f6228": [37, 305], "font_siz": [37, 305], "ital": [37, 305], "customis": [37, 305], "trend": [37, 305], "win_loss": [37, 305], "subtl": [37, 305], "tone": [37, 305], "hidden": [37, 305], "q1": [37, 305], "55": [37, 50, 305], "35": [37, 305, 391, 755, 813, 1009, 1326], "q2": [37, 305], "30": [37, 165, 174, 188, 196, 225, 231, 233, 258, 278, 305, 328, 329, 330, 391, 399, 401, 402, 407, 411, 414, 416, 418, 419, 421, 425, 426, 427, 428, 431, 434, 441, 442, 472, 558, 637, 755, 772, 799, 800, 813, 838, 843, 852, 874, 901, 926, 931, 1009, 1017, 1041, 1048, 1049, 1056, 1063, 1089, 1326, 1340, 1341, 1343, 1345, 1347, 1348, 1351, 1353], "60": [37, 174, 305, 407, 414, 416, 428, 440, 463, 626, 627, 691, 813, 1046, 1050, 1062, 1193, 1277, 1326, 1348], "q3": [37, 305], "40": [37, 165, 174, 208, 225, 305, 427, 441, 472, 542, 695, 705, 813, 838, 874, 926, 931, 1028, 1063, 1165, 1281, 1340, 1341, 1343, 1348], "80": [37, 305], "q4": [37, 305], "75": [37, 165, 305, 317, 589, 598, 613, 615, 617, 619, 624, 626, 628, 775, 813, 838, 926, 931, 1008, 1092, 1120, 1189, 1326, 1353], "account": [37, 109, 117, 130, 305, 423, 449, 451, 452, 813, 1045, 1072, 1074, 1075, 1326], "flavour": [37, 116, 305], "integer_dtyp": [37, 241, 305, 881, 926, 931], "0_": [37, 305], "just": [37, 107, 116, 128, 217, 305, 870, 926, 931], "unifi": [37, 262, 267, 305, 931], "2_color_scal": [37, 305], "95b3d7": [37, 305], "ffffff": [37, 305], "standardis": [37, 305], "z": [37, 56, 77, 109, 142, 172, 200, 202, 207, 217, 237, 238, 269, 272, 305, 313, 315, 317, 472, 504, 549, 552, 574, 576, 578, 580, 581, 589, 596, 604, 605, 650, 658, 676, 691, 694, 707, 726, 728, 747, 777, 779, 782, 788, 792, 797, 813, 860, 870, 888, 890, 926, 931, 1081, 1195, 1236, 1244, 1262, 1277, 1280, 1326, 1336, 1340, 1350, 1352], "score": [37, 305], "conjunct": [37, 85, 116, 119, 125, 142, 305, 768, 771], "a123": [37, 305], "b345": [37, 305], "c567": [37, 305], "d789": [37, 305], "e101": [37, 305], "45": [37, 165, 235, 305, 399, 427, 441, 610, 626, 627, 652, 658, 703, 732, 733, 755, 772, 799, 800, 813, 838, 879, 926, 931, 1017, 1049, 1063, 1238, 1244, 1290, 1348, 1351, 1353], "85": [37, 305, 1120, 1326, 1353], "font": [37, 305], "consola": [37, 305], "stdev": [37, 305], "ipccompress": [38, 39, 305], "futur": [38, 55, 119, 155, 165, 212, 214, 219, 253, 305, 753, 835, 838, 926, 1316, 1326], "arrow": [38, 39, 44, 102, 116, 117, 120, 122, 131, 205, 237, 238, 257, 259, 263, 305, 926, 1300, 1306, 1326], "ipc": [38, 39, 44, 120, 121, 122, 131, 134, 305, 825, 926], "binari": [38, 116, 119, 305, 358, 359, 360, 361, 362, 653, 931, 974, 975, 977, 978, 1239], "feather": [38, 120, 131, 305, 825], "access": [38, 49, 50, 51, 52, 120, 126, 130, 131, 133, 155, 205, 236, 237, 251, 305, 659, 702, 836, 842, 880, 890, 900, 903, 926, 1245, 1353], "lz4": [38, 39, 42, 44, 46, 305, 926], "zstd": [38, 39, 42, 44, 46, 305, 926], "intern": [38, 116, 135, 205, 305, 463, 813, 1350], "might": [38, 114, 115, 128, 150, 158, 263, 268, 305, 320, 552, 719, 813, 829, 889, 895, 926], "implement": [38, 42, 103, 116, 155, 193, 211, 291, 305, 308, 472, 494, 552, 573, 574, 576, 578, 580, 581, 596, 702, 707, 775, 813, 914, 1090, 1171, 1214, 1217, 1326, 1330], "unstabl": [38, 43, 44, 45, 46, 54, 55, 64, 66, 116, 126, 133, 134, 251, 262, 267, 272, 273, 305, 387, 388, 427, 474, 552, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 789, 790, 792, 813, 834, 835, 890, 898, 926, 985, 1006, 1007, 1049, 1092, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1304, 1309, 1326], "break": [38, 40, 43, 44, 45, 46, 54, 55, 64, 66, 126, 133, 134, 158, 251, 262, 267, 268, 272, 273, 274, 305, 320, 363, 364, 387, 388, 427, 441, 474, 552, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 715, 716, 789, 790, 792, 813, 829, 834, 835, 890, 895, 898, 926, 983, 985, 1006, 1007, 1049, 1063, 1092, 1189, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1304, 1309, 1326], "batch": [39, 54, 55, 111, 115, 116, 122, 132, 134, 237, 267, 305, 834, 835, 865, 866, 926], "iobas": [40, 41, 123, 124, 166, 243, 305, 390, 564, 567, 813, 839, 883, 926], "row_ori": [40, 305], "pretti": [40, 305], "serial": [40, 41, 166, 305, 390, 567, 813, 839, 926], "orient": [40, 49, 51, 106, 108, 305, 926], "slower": [40, 106, 108, 119, 187, 190, 211, 224, 274, 291, 305, 552, 775, 813, 851, 854, 914, 926, 1171, 1326], "common": [40, 48, 54, 55, 56, 114, 115, 128, 273, 305, 549, 574, 813, 819, 834, 835, 843, 845, 875, 887, 898, 926], "31": [40, 52, 158, 165, 166, 188, 235, 243, 251, 268, 305, 363, 364, 398, 399, 403, 413, 419, 423, 434, 656, 691, 715, 716, 752, 755, 764, 772, 792, 813, 829, 838, 852, 879, 895, 926, 931, 1014, 1016, 1017, 1021, 1034, 1041, 1056, 1242, 1277, 1347, 1353], "next": [40, 50, 158, 188, 208, 235, 268, 274, 305, 357, 363, 364, 395, 423, 427, 441, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 715, 716, 753, 754, 756, 757, 800, 801, 813, 829, 852, 861, 879, 895, 926, 983, 1013, 1045, 1049, 1063, 1191, 1326], "releas": [40, 55, 119, 158, 268, 274, 305, 320, 363, 364, 427, 441, 552, 715, 716, 813, 829, 835, 895, 926, 1049, 1063, 1326, 1353], "regular": [40, 110, 205, 236, 237, 274, 281, 305, 453, 649, 651, 652, 657, 658, 659, 660, 674, 675, 736, 760, 813, 905, 926, 931, 1235, 1237, 1238, 1243, 1244, 1245, 1246, 1260, 1261], "write_ndjson": [40, 305], "newlin": [41, 124, 132, 305], "delimit": [41, 43, 124, 132, 226, 260, 305, 648, 926, 1234, 1301, 1326], "parquetcompress": [42, 305], "compression_level": [42, 46, 305, 926], "statist": [42, 46, 114, 115, 126, 133, 165, 305, 451, 452, 495, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 813, 838, 926, 1008, 1074, 1075, 1120, 1207, 1229, 1326], "row_group_s": [42, 46, 305, 926], "data_page_s": [42, 305], "use_pyarrow": [42, 114, 120, 122, 126, 263, 305, 1305, 1306, 1326], "pyarrow_opt": [42, 118, 126, 129, 305], "parquet": [42, 46, 126, 127, 133, 305, 825, 926], "gzip": [42, 46, 305, 926], "lzo": [42, 46, 305, 926], "brotli": [42, 46, 305, 926], "choos": [42, 44, 46, 188, 226, 305, 852, 926], "good": [42, 44, 46, 205, 305, 926, 1345], "fast": [42, 44, 46, 147, 149, 305, 456, 634, 813, 926, 930, 1079, 1219, 1326, 1353], "decompress": [42, 44, 46, 305, 926], "backward": [42, 46, 176, 208, 305, 357, 395, 420, 458, 813, 847, 861, 926, 1013, 1042, 1081, 1326], "guarante": [42, 46, 114, 115, 158, 165, 193, 268, 270, 305, 363, 364, 472, 715, 716, 813, 829, 838, 845, 895, 896, 926, 1089, 1090, 1326], "deal": [42, 46, 205, 305, 316, 318, 426, 427, 441, 601, 691, 694, 725, 726, 727, 728, 755, 813, 926, 935, 936, 1048, 1049, 1063, 1191, 1277, 1280, 1326], "older": [42, 46, 305, 926], "reader": [42, 46, 111, 114, 115, 119, 120, 122, 126, 305, 926], "higher": [42, 46, 165, 228, 297, 305, 599, 621, 622, 786, 813, 838, 876, 920, 926, 1008, 1190, 1206, 1326], "mean": [42, 46, 114, 115, 120, 128, 165, 176, 187, 188, 208, 215, 226, 235, 274, 283, 305, 423, 427, 441, 455, 458, 463, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 642, 648, 657, 753, 754, 756, 757, 758, 779, 800, 801, 803, 813, 838, 847, 851, 852, 861, 865, 866, 879, 906, 926, 1008, 1045, 1049, 1063, 1077, 1081, 1089, 1203, 1229, 1234, 1243, 1326, 1341, 1342], "smaller": [42, 46, 172, 305, 845, 926, 1071, 1326], "disk": [42, 43, 44, 45, 46, 120, 305, 887, 926], "22": [42, 46, 136, 144, 305, 403, 424, 427, 441, 443, 444, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 755, 813, 926, 931, 1049, 1063, 1066, 1201, 1277, 1326, 1347, 1353], "behavior": [42, 46, 169, 207, 305, 341, 465, 513, 515, 538, 551, 656, 761, 770, 784, 813, 841, 860, 926, 958, 1007, 1136, 1138, 1161, 1170, 1189, 1242, 1326], "512": [42, 116, 205, 305, 595, 813, 1185, 1326], "page": [42, 46, 120, 126, 131, 133, 305, 813, 825, 926, 1326, 1349], "At": [42, 305], "moment": [42, 163, 305, 495, 642, 813, 1120, 1229, 1326], "write_t": [42, 305], "partition_col": [42, 117, 305], "write_to_dataset": [42, 305], "spark": [42, 305], "partit": [42, 117, 118, 126, 129, 133, 134, 206, 224, 305], "we": [42, 112, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 165, 166, 188, 208, 235, 274, 305, 390, 423, 427, 441, 474, 510, 540, 550, 552, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 659, 673, 696, 752, 753, 754, 755, 756, 757, 772, 800, 801, 803, 813, 838, 839, 852, 861, 865, 866, 879, 926, 938, 1045, 1049, 1063, 1092, 1133, 1171, 1245, 1259, 1282, 1326], "use_pyarrow_write_to_dataset": [42, 305], "first": [42, 48, 114, 115, 119, 120, 122, 126, 128, 137, 138, 139, 140, 156, 186, 188, 191, 194, 208, 210, 211, 221, 225, 226, 235, 255, 260, 261, 269, 270, 274, 281, 288, 305, 330, 332, 341, 387, 391, 420, 423, 427, 444, 463, 473, 482, 483, 499, 508, 510, 515, 516, 540, 550, 551, 552, 562, 594, 610, 633, 645, 649, 656, 657, 660, 661, 662, 664, 674, 675, 692, 737, 744, 762, 766, 803, 813, 834, 852, 855, 857, 861, 864, 874, 879, 896, 903, 905, 911, 926, 931, 947, 958, 1006, 1008, 1009, 1042, 1045, 1049, 1066, 1091, 1102, 1103, 1122, 1131, 1133, 1138, 1139, 1163, 1170, 1171, 1215, 1231, 1242, 1243, 1245, 1246, 1247, 1248, 1250, 1260, 1261, 1278, 1295, 1301, 1303, 1306, 1326, 1343, 1344, 1346, 1353], "watermark": [42, 305], "partitioned_object": [42, 305], "maintain_ord": [43, 44, 45, 46, 158, 187, 190, 224, 226, 250, 268, 270, 274, 284, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 314, 355, 363, 364, 466, 469, 541, 552, 645, 715, 716, 718, 734, 813, 829, 835, 843, 845, 851, 854, 875, 887, 889, 895, 896, 907, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 972, 1164, 1311, 1326], "type_coercion": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 875, 887, 926], "predicate_pushdown": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 865, 866, 875, 887, 926], "projection_pushdown": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 865, 866, 875, 887, 926], "simplify_express": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 875, 887, 926], "slice_pushdown": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 865, 866, 875, 887, 926], "no_optim": [43, 44, 45, 46, 54, 55, 834, 835, 845, 865, 866, 875, 926], "evalu": [43, 44, 45, 46, 175, 177, 208, 305, 317, 331, 333, 334, 387, 459, 476, 500, 501, 540, 589, 725, 727, 731, 735, 753, 754, 756, 757, 759, 768, 769, 785, 788, 795, 800, 801, 803, 804, 813, 834, 848, 858, 860, 861, 926, 948, 950, 951, 1006, 1082, 1123, 1124, 1317, 1326, 1343], "queri": [43, 44, 45, 46, 54, 55, 116, 117, 120, 128, 131, 132, 133, 174, 209, 225, 251, 305, 550, 552, 664, 792, 813, 834, 835, 843, 845, 857, 864, 875, 887, 890, 904, 905, 908, 914, 926, 1078, 1171, 1250, 1326, 1334, 1336, 1340, 1350, 1351, 1352], "ram": [43, 44, 45, 46, 926], "maintain": [43, 44, 45, 46, 158, 250, 268, 305, 355, 363, 364, 541, 633, 645, 715, 716, 718, 734, 813, 829, 838, 889, 895, 926, 972, 1164, 1215, 1311, 1326], "slightli": [43, 44, 45, 46, 463, 813, 926, 1347], "faster": [43, 44, 45, 46, 116, 119, 174, 263, 272, 305, 320, 552, 719, 813, 926, 938, 1078, 1171, 1326], "coercion": [43, 44, 45, 46, 54, 55, 604, 813, 834, 835, 843, 845, 875, 887, 926], "optim": [43, 44, 45, 46, 54, 55, 126, 128, 131, 132, 133, 205, 209, 225, 229, 237, 270, 305, 830, 834, 835, 843, 845, 865, 866, 875, 887, 896, 904, 905, 914, 926, 986, 1214, 1326], "pushdown": [43, 44, 45, 46, 54, 55, 834, 835, 843, 845, 865, 866, 875, 877, 887, 904, 905, 926, 1214, 1217, 1326], "project": [43, 44, 45, 46, 54, 55, 128, 130, 131, 132, 133, 320, 644, 645, 813, 834, 835, 843, 845, 865, 866, 875, 877, 883, 887, 926], "run": [43, 44, 45, 46, 54, 55, 63, 116, 144, 147, 148, 149, 187, 190, 209, 211, 226, 242, 270, 279, 291, 305, 320, 387, 510, 550, 552, 608, 609, 666, 791, 813, 834, 835, 843, 845, 851, 854, 865, 866, 870, 875, 882, 887, 896, 902, 926, 931, 1006, 1133, 1171, 1198, 1199, 1252, 1326, 1350, 1353], "slice": [43, 44, 45, 46, 49, 54, 55, 172, 194, 206, 255, 305, 516, 537, 552, 561, 563, 611, 613, 615, 617, 619, 621, 624, 626, 628, 661, 692, 813, 834, 835, 843, 845, 865, 866, 875, 887, 926, 930, 1071, 1091, 1139, 1160, 1200, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1247, 1278, 1295, 1326, 1346], "off": [43, 44, 45, 46, 54, 55, 114, 115, 128, 395, 736, 834, 835, 843, 845, 865, 866, 875, 926, 1013], "certain": [43, 44, 45, 46, 55, 118, 129, 197, 198, 274, 305, 687, 688, 834, 835, 875, 926, 1326], "lf": [43, 44, 45, 46, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 883, 885, 887, 888, 889, 891, 892, 893, 895, 896, 898, 899, 900, 901, 903, 904, 905, 909, 913, 926, 1341, 1350, 1353], "scan_csv": [43, 44, 45, 46, 114, 115, 926], "my_larger_than_ram_fil": [43, 44, 45, 46, 926], "ndjson": [45, 926], "data_pagesize_limit": [46, 926], "reduc": [46, 114, 115, 126, 128, 131, 132, 133, 237, 292, 293, 295, 298, 305, 637, 745, 762, 813, 915, 916, 918, 921, 926, 1173, 1188, 1223, 1294, 1326], "pressur": [46, 114, 115, 126, 128, 132, 133, 637, 813, 926, 1223, 1326], "speed": [46, 320, 552, 813, 926, 1353], "context": [47, 85, 86, 150, 222, 251, 305, 314, 320, 459, 510, 550, 552, 561, 644, 645, 721, 729, 741, 743, 761, 764, 770, 771, 775, 784, 788, 791, 812, 813, 824, 825, 890, 903, 926, 1133, 1314, 1326, 1339, 1350, 1352], "manag": [47, 85, 86, 824, 825, 1339, 1350], "disabl": [47, 85, 86, 145, 205, 305, 834, 926], "global": [47, 85, 86, 119, 135, 144, 152, 251, 305, 605, 792, 813, 890, 926, 982, 984, 1195, 1326, 1336, 1350], "cach": [47, 54, 55, 85, 86, 120, 128, 131, 133, 137, 138, 139, 140, 152, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 693, 694, 698, 813, 824, 834, 835, 843, 845, 875, 887, 926, 982, 1195, 1277, 1279, 1280, 1284, 1326], "under": [47, 49, 50, 51, 52, 85, 86, 251, 305, 805, 806, 808, 809, 814, 815, 818, 820, 821, 822, 890, 926, 1318, 1320, 1322, 1327, 1331, 1332, 1333], "physic": [47, 60, 86, 114, 115, 208, 305, 367, 714, 813, 830, 860, 861, 926, 983, 984, 1308, 1326], "equal": [47, 86, 114, 115, 116, 128, 137, 138, 139, 140, 158, 181, 188, 191, 208, 218, 250, 268, 305, 363, 364, 388, 441, 447, 448, 450, 468, 497, 540, 585, 598, 604, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 645, 671, 672, 701, 715, 716, 734, 789, 790, 803, 809, 813, 829, 852, 855, 861, 871, 889, 895, 926, 1007, 1049, 1073, 1163, 1189, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1216, 1257, 1258, 1287, 1326, 1343, 1353], "concaten": [47, 56, 85, 86, 180, 225, 305, 594, 648, 738, 739, 813, 874, 926, 988, 1177, 1234, 1326, 1346], "join": [47, 48, 54, 55, 56, 86, 177, 208, 273, 305, 459, 477, 590, 792, 813, 834, 835, 843, 845, 848, 861, 875, 887, 898, 903, 926, 1336, 1342, 1349], "introduc": [47, 86, 691, 693, 694, 1277, 1279, 1280], "overhead": [47, 86, 128, 131, 132, 133], "amount": [47, 65, 86, 320, 552, 758, 813, 1341], "depend": [47, 53, 86, 116, 136, 335, 336, 502, 503, 552, 561, 598, 601, 758, 761, 764, 770, 784, 813, 952, 953, 1125, 1126, 1189, 1191, 1326, 1353], "categori": [47, 66, 86, 260, 305, 366, 367, 388, 474, 598, 813, 981, 983, 1007, 1092, 1189, 1301, 1326], "nest": [47, 109, 145, 146, 172, 305, 606, 813, 825, 1071, 1196, 1326, 1350, 1353], "clear": [47, 85, 161, 305, 833, 926, 993, 1326], "outermost": 47, "exit": [47, 85, 153, 1339, 1350], "construct": [47, 85, 86, 102, 104, 105, 106, 107, 108, 109, 116, 305, 465, 785, 788, 804, 809, 813, 839, 926, 982, 1326, 1339], "s1": [47, 85, 86, 139, 140, 180, 305, 971, 1070, 1087, 1119, 1127, 1163, 1192, 1317, 1326], "color": [47, 85, 86, 291, 358, 359, 360, 361, 362, 653, 721, 813, 914, 974, 975, 976, 977, 978, 1239, 1314, 1326, 1346], "red": [47, 85, 86, 291, 721, 813, 914, 1314, 1326], "green": [47, 85, 86, 291, 721, 813, 914, 1314, 1326], "blue": [47, 85, 86, 358, 359, 360, 361, 362, 721, 813, 1314, 1326], "concat": [47, 85, 86, 90, 115, 208, 305, 988, 1087, 1177, 1192, 1326, 1344], "decor": [47, 49, 50, 51, 52, 144, 148, 211, 305, 552, 813, 824, 825, 1171, 1326], "dure": [47, 114, 115, 128, 153, 174, 305, 1078, 1326], "afterward": [47, 803], "construct_categor": 47, "arg": [47, 58, 59, 61, 62, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 177, 225, 305, 330, 594, 734, 763, 813, 848, 874, 926, 930, 1171, 1326, 1337], "frametyp": [48, 1350], "joinstrategi": [48, 207, 305, 860, 926], "descend": [48, 158, 244, 250, 268, 305, 330, 350, 364, 534, 601, 634, 644, 645, 716, 721, 734, 813, 829, 884, 889, 895, 926, 947, 967, 1115, 1157, 1191, 1219, 1231, 1314, 1326], "fill": [48, 56, 160, 175, 176, 246, 247, 272, 305, 357, 378, 381, 457, 458, 464, 477, 478, 613, 615, 619, 626, 635, 636, 668, 678, 763, 785, 788, 804, 813, 846, 847, 885, 886, 903, 926, 1080, 1081, 1095, 1096, 1182, 1202, 1203, 1205, 1208, 1209, 1210, 1221, 1222, 1254, 1264, 1326], "sort": [48, 49, 137, 138, 158, 188, 189, 191, 192, 208, 218, 225, 226, 235, 244, 268, 274, 288, 299, 305, 330, 363, 364, 367, 450, 459, 552, 590, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 645, 715, 716, 721, 723, 734, 775, 813, 829, 843, 852, 853, 855, 856, 861, 871, 874, 875, 879, 884, 887, 895, 911, 922, 926, 931, 947, 983, 1073, 1115, 1219, 1311, 1314, 1326, 1340, 1351, 1353], "origin": [48, 114, 115, 128, 169, 177, 270, 305, 393, 394, 426, 427, 441, 459, 494, 509, 551, 573, 590, 603, 604, 605, 606, 608, 651, 652, 657, 664, 732, 733, 813, 841, 848, 896, 926, 1007, 1011, 1012, 1048, 1049, 1063, 1082, 1132, 1170, 1189, 1195, 1196, 1198, 1237, 1238, 1243, 1250, 1326], "In": [48, 55, 116, 118, 129, 130, 133, 144, 148, 153, 172, 174, 188, 189, 191, 192, 208, 211, 222, 235, 263, 305, 550, 552, 610, 753, 813, 835, 852, 853, 855, 856, 879, 926, 1071, 1078, 1192, 1326], "duplic": [48, 90, 200, 207, 208, 270, 273, 305, 315, 480, 494, 573, 598, 813, 860, 861, 896, 898, 926, 1099, 1189, 1326, 1351], "outer": [48, 56, 273, 305, 898, 926], "suitabl": [48, 56, 116, 142, 211, 305, 552, 633, 813, 1171, 1215, 1326], "get": [48, 55, 121, 127, 134, 158, 162, 170, 179, 183, 185, 188, 189, 191, 192, 194, 195, 200, 202, 203, 210, 213, 220, 221, 226, 235, 236, 240, 245, 249, 255, 264, 268, 277, 288, 299, 305, 314, 328, 329, 330, 332, 340, 343, 355, 364, 366, 378, 379, 380, 381, 382, 383, 384, 385, 386, 395, 406, 460, 466, 473, 493, 496, 499, 512, 518, 541, 553, 554, 555, 561, 563, 568, 582, 583, 592, 593, 599, 609, 610, 643, 647, 656, 708, 709, 715, 716, 718, 722, 734, 736, 761, 766, 770, 775, 776, 777, 778, 780, 781, 782, 784, 794, 798, 802, 813, 829, 834, 835, 836, 842, 849, 852, 853, 855, 856, 857, 862, 864, 879, 880, 888, 893, 895, 900, 911, 922, 926, 930, 945, 946, 947, 948, 949, 957, 960, 972, 981, 988, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1013, 1024, 1068, 1083, 1087, 1091, 1097, 1099, 1117, 1122, 1135, 1141, 1164, 1172, 1174, 1175, 1177, 1179, 1180, 1181, 1186, 1187, 1190, 1199, 1230, 1233, 1242, 1295, 1301, 1307, 1311, 1315, 1316, 1326], "speedup": [48, 205, 211, 305, 552, 813, 1171, 1326], "receiv": [48, 116, 128, 211, 225, 291, 305, 552, 594, 813, 874, 926, 1353], "now": [48, 119, 188, 235, 263, 305, 427, 441, 450, 813, 852, 879, 926, 1049, 1063, 1280, 1306, 1326], "One": [48, 165, 222, 226, 262, 267, 305, 317, 589, 730, 741, 761, 767, 770, 778, 780, 783, 784, 793, 813, 838, 926, 931, 1008, 1326], "whose": [48, 208, 226, 305, 453, 760, 813, 861, 926, 931], "uniqu": [48, 141, 142, 143, 146, 148, 157, 202, 207, 222, 226, 238, 296, 305, 321, 332, 347, 388, 493, 525, 572, 598, 691, 693, 694, 698, 719, 721, 730, 783, 813, 828, 860, 919, 926, 930, 949, 964, 1007, 1117, 1148, 1178, 1189, 1277, 1279, 1280, 1284, 1312, 1314, 1326, 1342], "post": 48, "constrain": [48, 169, 305, 841, 926, 931], "newli": 48, "boolean": [48, 144, 158, 177, 180, 250, 268, 305, 316, 317, 318, 333, 334, 337, 358, 361, 362, 364, 409, 459, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 500, 501, 505, 587, 589, 592, 593, 645, 662, 716, 723, 724, 734, 735, 795, 803, 813, 829, 848, 889, 895, 926, 931, 935, 936, 948, 950, 951, 954, 974, 1027, 1082, 1097, 1098, 1099, 1101, 1102, 1103, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1117, 1123, 1124, 1128, 1183, 1186, 1187, 1217, 1235, 1317, 1326, 1343], "know": [48, 116, 226, 305, 540, 550, 813, 1316, 1326], "df1": [48, 56, 137, 138, 171, 174, 218, 251, 276, 305, 871, 926, 1336, 1338, 1339, 1340, 1351], "2022": [48, 159, 165, 186, 305, 399, 427, 441, 691, 753, 754, 756, 757, 758, 764, 831, 838, 926, 931, 1017, 1028, 1049, 1063, 1277], "df2": [48, 56, 137, 138, 171, 174, 276, 305, 1336, 1338, 1339, 1340, 1351], "df3": [48, 305], "set_tbl_format": 48, "09": [48, 114, 165, 235, 305, 395, 399, 419, 420, 610, 695, 752, 753, 755, 801, 813, 838, 879, 926, 931, 1013, 1281], "02": [48, 159, 165, 186, 188, 235, 274, 305, 395, 397, 399, 406, 419, 420, 423, 426, 432, 435, 438, 440, 444, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 691, 693, 694, 698, 736, 752, 753, 754, 755, 756, 757, 758, 813, 831, 838, 852, 879, 926, 931, 971, 1015, 1017, 1019, 1020, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1048, 1049, 1053, 1054, 1057, 1060, 1062, 1063, 1163, 1277, 1279, 1280, 1284, 1347], "03": [48, 109, 114, 159, 188, 208, 235, 274, 305, 397, 399, 400, 406, 419, 420, 423, 426, 427, 430, 432, 433, 434, 435, 438, 440, 441, 444, 450, 463, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 693, 698, 752, 753, 754, 755, 756, 757, 758, 813, 831, 852, 879, 926, 931, 1015, 1017, 1018, 1024, 1025, 1031, 1032, 1041, 1042, 1043, 1048, 1049, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1279, 1284], "af1": 48, "af2": 48, "af3": 48, "keep": [48, 114, 115, 128, 270, 273, 274, 305, 465, 494, 550, 551, 566, 574, 605, 737, 813, 896, 898, 926, 1170, 1195, 1326, 1352], "easili": [48, 241, 267, 278, 283, 305, 795, 881, 901, 906, 926], "dot": [48, 813, 887, 926, 1326], "product": [48, 163, 207, 305, 380, 385, 392, 813, 845, 860, 926, 1000, 1004, 1010, 1326], "fill_nul": [48, 175, 305, 457, 813, 846, 903, 926, 1080, 1326], "sum_horizont": [48, 253, 305, 796], "167": 48, "47": [48, 165, 305, 626, 627, 813, 838, 926, 931], "callabl": [49, 50, 51, 52, 128, 156, 180, 211, 225, 230, 285, 291, 305, 320, 354, 540, 548, 549, 550, 552, 574, 575, 594, 611, 612, 729, 744, 745, 748, 749, 762, 773, 774, 775, 787, 813, 865, 866, 874, 877, 908, 914, 926, 938, 971, 1163, 1171, 1200, 1201, 1326], "by_first_letter_of_column_nam": 49, "f": [49, 115, 116, 186, 206, 257, 263, 269, 272, 305, 313, 354, 540, 637, 656, 691, 694, 729, 738, 773, 813, 931, 971, 1163, 1242, 1277, 1280, 1342], "fromkei": [49, 51], "by_first_letter_of_column_valu": 49, "starts_with": [49, 358, 361, 558, 649, 655, 792, 890, 926, 931, 1241, 1344], "to_seri": [49, 183, 305, 691, 735, 788, 1277], "xy": [49, 51], "yz": [49, 51], "b1": [49, 51], "b2": [49, 51], "pow_n": 50, "powersofn": 50, "p": [50, 225, 305, 594, 795, 813, 874, 926, 931, 1246, 1247, 1337], "ceil": [50, 813, 1326, 1344], "previou": [50, 153, 395, 573, 574, 576, 578, 580, 581, 591, 596, 704, 707, 813, 1013, 1185, 1326], "floor": [50, 463, 813, 1326, 1344], "nearest": [50, 165, 208, 228, 297, 305, 369, 462, 477, 599, 621, 622, 786, 813, 838, 861, 876, 920, 926, 987, 1008, 1084, 1095, 1190, 1206, 1326, 1345], "24": [50, 136, 188, 208, 211, 235, 251, 274, 305, 380, 387, 403, 423, 424, 427, 435, 441, 443, 571, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 1006, 1045, 1049, 1057, 1063, 1119, 1326, 1346, 1352], "001": [50, 701, 758, 1058, 1059, 1061, 1287], "next_pow2": 50, "prev_pow2": 50, "nearest_pow2": 50, "32": [50, 62, 67, 70, 80, 203, 208, 235, 305, 571, 610, 637, 813, 879, 926, 1010, 1046, 1185, 1206, 1326, 1341, 1346], "128": [50, 64, 1185, 1326], "split_by_column_dtyp": 51, "collect": [51, 54, 55, 128, 129, 130, 134, 144, 145, 148, 169, 209, 226, 251, 257, 270, 271, 305, 453, 484, 552, 738, 760, 764, 792, 795, 813, 828, 829, 831, 832, 835, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 883, 885, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 901, 903, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 926, 931, 1105, 1326, 1335, 1336, 1339, 1340, 1350, 1351, 1353], "collect_al": [51, 55, 834, 835, 926], "42": [52, 165, 193, 218, 235, 305, 610, 813, 838, 871, 879, 926, 1090, 1326, 1340, 1352], "961": 52, "1764": 52, "4160": 52, "detail": [53, 103, 116, 117, 137, 139, 155, 188, 305, 852, 926, 1350, 1353], "build": [53, 103, 931, 1353], "compil": [53, 335, 336, 502, 503, 952, 953, 1125, 1126], "host": [53, 114, 120, 122, 131, 133], "git": 53, "flag": [53, 141, 263, 305, 634, 649, 657, 658, 660, 674, 675, 813, 843, 865, 866, 926, 931, 1219, 1235, 1243, 1244, 1246, 1260, 1261, 1306, 1326, 1346], "lazy_fram": [54, 55], "iter": [54, 55, 56, 66, 102, 116, 147, 149, 158, 167, 177, 187, 188, 189, 190, 191, 192, 204, 205, 206, 235, 236, 237, 238, 241, 242, 244, 250, 268, 269, 278, 279, 282, 283, 305, 364, 387, 395, 459, 590, 645, 705, 716, 726, 728, 734, 736, 737, 738, 739, 747, 751, 777, 779, 782, 791, 795, 797, 803, 809, 813, 829, 840, 848, 851, 852, 853, 854, 855, 856, 879, 881, 882, 884, 889, 895, 901, 902, 906, 926, 930, 1006, 1013, 1214, 1326, 1353], "comm_subplan_elim": [54, 55, 834, 835, 843, 845, 875, 887, 926], "comm_subexpr_elim": [54, 55, 834, 835, 843, 845, 875, 887, 926], "cluster_with_column": [54, 55, 834, 835, 843, 845, 875, 887, 926], "comput": [54, 56, 89, 172, 187, 208, 264, 270, 283, 297, 305, 312, 322, 323, 324, 325, 326, 327, 344, 345, 346, 351, 352, 356, 368, 373, 374, 375, 378, 379, 380, 381, 382, 383, 384, 385, 386, 392, 446, 454, 495, 521, 522, 523, 524, 528, 529, 530, 531, 535, 542, 543, 544, 545, 570, 590, 591, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 639, 640, 641, 642, 646, 712, 713, 721, 726, 728, 732, 733, 734, 740, 742, 759, 779, 789, 790, 803, 813, 834, 851, 858, 860, 861, 896, 903, 906, 920, 926, 933, 939, 940, 941, 942, 943, 944, 961, 962, 963, 968, 969, 973, 986, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1069, 1071, 1076, 1120, 1144, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1158, 1165, 1166, 1167, 1168, 1176, 1185, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1226, 1227, 1228, 1229, 1232, 1298, 1299, 1307, 1314, 1326, 1345, 1348], "graph": [54, 116, 209, 305, 834, 858, 903, 926], "parallel": [54, 56, 111, 117, 126, 133, 188, 191, 208, 209, 225, 242, 279, 305, 387, 510, 721, 803, 813, 825, 852, 855, 860, 861, 882, 902, 914, 926, 1006, 1133, 1314, 1326], "threadpool": 54, "Will": [54, 55, 834, 835, 843, 845, 875, 887, 926, 1326], "try": [54, 55, 99, 114, 115, 120, 126, 128, 131, 133, 834, 835, 843, 845, 875, 887, 926], "branch": [54, 55, 834, 835, 843, 845, 875, 887, 926], "subplan": [54, 55, 834, 835, 843, 845, 875, 887, 926], "union": [54, 55, 56, 531, 834, 835, 843, 845, 875, 887, 926, 931, 1154, 1349], "subexpress": [54, 55, 834, 835, 843, 845, 875, 887, 926], "reus": [54, 55, 834, 835, 843, 845, 875, 887, 926], "combin": [54, 55, 56, 177, 188, 193, 208, 235, 274, 305, 317, 331, 441, 450, 463, 589, 605, 610, 669, 679, 685, 686, 687, 688, 753, 754, 756, 757, 800, 801, 803, 813, 834, 835, 843, 845, 852, 861, 875, 879, 887, 926, 1049, 1063, 1073, 1195, 1255, 1265, 1271, 1272, 1273, 1274, 1326, 1340, 1351], "sequenti": [54, 55, 242, 279, 305, 834, 835, 843, 845, 875, 882, 887, 902, 926], "independ": [54, 55, 141, 144, 148, 267, 305, 834, 835, 843, 845, 875, 887, 926], "explain": [54, 55, 834, 835, 926, 1349], "gevent": [55, 136, 835, 926], "await": [55, 116, 835, 926], "_geventdataframeresult": [55, 835, 926], "asynchron": [55, 116, 835, 926], "them": [55, 102, 104, 105, 106, 108, 116, 117, 123, 124, 125, 126, 128, 132, 133, 173, 174, 188, 208, 218, 235, 267, 274, 305, 342, 450, 479, 517, 582, 583, 590, 610, 738, 753, 754, 756, 757, 800, 801, 813, 835, 844, 852, 861, 871, 879, 926, 931, 959, 1073, 1078, 1140, 1180, 1181, 1326, 1342], "schedul": [55, 835, 926], "insid": [55, 835, 926], "almost": [55, 211, 291, 305, 691, 693, 694, 835, 926, 1171, 1277, 1279, 1280, 1326], "instantli": [55, 835, 926], "asyncio": [55, 116, 835, 926], "want": [55, 105, 107, 119, 174, 211, 222, 251, 305, 395, 459, 550, 552, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 650, 665, 676, 736, 744, 753, 762, 785, 788, 804, 813, 835, 857, 864, 890, 926, 931, 1013, 1078, 1171, 1236, 1251, 1262, 1326, 1339], "greenlet": [55, 835, 926], "task": [55, 835, 926], "wrapper": [55, 835, 926], "event": [55, 835, 926], "asyncresult": [55, 835, 926], "timeout": [55, 835, 926], "collect_async": [55, 926], "set_except": [55, 835, 926], "rerais": [55, 835, 926], "polarstyp": 56, "concatmethod": 56, "vertic": [56, 174, 212, 214, 219, 253, 272, 276, 305, 648, 1234], "rechunk": [56, 102, 107, 114, 115, 120, 122, 126, 128, 131, 132, 133, 174, 305, 813, 988, 1078, 1087, 1177, 1326], "vertical_relax": 56, "diagon": [56, 269, 305], "diagonal_relax": 56, "vstack": [56, 174, 305], "addition": [56, 236, 305, 931], "coerc": [56, 604, 813], "supertyp": [56, 176, 263, 267, 305, 319, 813, 847, 926, 930, 1326], "mismatch": [56, 97, 124, 132, 137, 139], "find": [56, 178, 184, 305, 633, 649, 650, 813, 1215, 1236, 1326], "miss": [56, 114, 115, 128, 175, 305, 357, 449, 451, 452, 457, 464, 488, 490, 540, 813, 846, 926, 1072, 1074, 1075, 1080, 1316, 1326], "stack": [56, 196, 276, 305], "length": [56, 57, 73, 125, 128, 142, 146, 186, 188, 189, 191, 192, 235, 249, 305, 308, 387, 427, 441, 533, 540, 562, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 643, 661, 665, 666, 668, 670, 671, 672, 678, 680, 692, 701, 785, 788, 789, 790, 804, 813, 852, 853, 855, 856, 875, 879, 888, 926, 930, 988, 1006, 1017, 1049, 1063, 1156, 1163, 1182, 1195, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1230, 1247, 1251, 1252, 1254, 1256, 1257, 1258, 1264, 1266, 1278, 1287, 1326, 1342, 1344], "don": [56, 188, 208, 211, 270, 272, 305, 320, 387, 510, 552, 813, 852, 896, 926, 931, 1006, 1133, 1171, 1216, 1316, 1326], "auto": [56, 102, 104, 105, 106, 108, 123, 124, 126, 132, 133, 269, 305, 926, 1353], "logic": [56, 211, 291, 305, 308, 316, 318, 390, 552, 714, 725, 726, 727, 728, 775, 813, 839, 843, 860, 883, 914, 926, 935, 936, 1171, 1306, 1308, 1326, 1330, 1352], "align_fram": 56, "pattern": [56, 114, 115, 128, 131, 132, 133, 205, 305, 559, 649, 650, 651, 652, 657, 658, 659, 660, 674, 675, 676, 914, 931, 1214, 1217, 1235, 1236, 1237, 1238, 1243, 1244, 1245, 1246, 1260, 1261, 1262, 1326, 1346], "collis": 56, "need": [56, 109, 114, 115, 117, 188, 189, 191, 192, 235, 238, 248, 305, 540, 610, 637, 695, 758, 785, 788, 804, 813, 852, 853, 855, 856, 879, 926, 1223, 1281, 1326, 1353], "sure": [56, 102, 107, 114, 115, 120, 122, 126, 188, 189, 191, 192, 229, 235, 305, 610, 813, 852, 853, 855, 856, 879, 926, 930], "contigu": [56, 102, 107, 114, 115, 120, 122, 126, 128, 131, 132, 133, 229, 263, 305], "relev": 56, "df_h1": 56, "l1": 56, "l2": 56, "df_h2": 56, "r1": 56, "r2": 56, "r3": 56, "df_d1": 56, "df_d2": 56, "df_a1": 56, "df_a2": 56, "df_a3": 56, "inner": [57, 73, 143, 207, 273, 305, 342, 353, 392, 517, 539, 552, 604, 714, 792, 813, 860, 883, 898, 926, 959, 970, 1010, 1140, 1162, 1171, 1308, 1326, 1340], "polarsdatatyp": [57, 73, 114, 115, 128, 141, 142, 143, 144, 145, 148, 156, 159, 211, 262, 267, 305, 320, 365, 453, 548, 550, 551, 552, 605, 662, 663, 729, 760, 772, 773, 774, 775, 785, 788, 804, 809, 813, 831, 926, 931, 938, 980, 1170, 1171, 1195, 1248, 1249, 1326], "pythondatatyp": [57, 73], "within": [57, 73, 137, 138, 139, 140, 187, 188, 189, 190, 191, 192, 193, 208, 235, 274, 305, 472, 601, 645, 813, 852, 853, 855, 856, 861, 879, 926, 1090, 1326, 1350], "attribut": [57, 60, 63, 64, 65, 66, 73, 77, 141, 305, 805, 806, 808, 809, 814, 815, 818, 820, 821, 822, 926, 1318, 1320, 1322, 1326, 1327, 1331, 1332, 1333], "categoricalord": [60, 367, 983], "encod": [60, 66, 76, 114, 115, 128, 260, 305, 359, 465, 608, 653, 703, 813, 975, 1198, 1239, 1301, 1326], "lexic": [60, 367, 931, 983, 985], "calendar": [62, 63, 188, 208, 235, 274, 305, 398, 410, 413, 423, 427, 441, 445, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 1016, 1028, 1034, 1045, 1049, 1063, 1067, 1073, 1326], "bit": [62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 78, 79, 80, 81, 82, 603, 649, 813, 1193, 1235, 1326, 1346], "sign": [62, 63, 65, 69, 70, 71, 72, 78, 423, 603, 674, 675, 701, 813, 931, 1045, 1107, 1193, 1260, 1261, 1287, 1326, 1344], "dai": [62, 63, 78, 188, 191, 206, 208, 235, 274, 305, 395, 419, 420, 423, 424, 427, 430, 433, 434, 441, 443, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 736, 752, 753, 754, 755, 756, 757, 758, 800, 801, 813, 852, 855, 861, 879, 926, 931, 1013, 1041, 1042, 1045, 1046, 1049, 1052, 1055, 1056, 1063, 1065, 1073, 1326, 1347], "unix": [62, 63, 406, 764, 1024], "epoch": [62, 63, 764, 1347], "1970": [62, 63, 134, 1334], "time_unit": [63, 65, 397, 399, 406, 432, 444, 694, 753, 754, 755, 756, 757, 758, 764, 931, 1015, 1017, 1024, 1054, 1066, 1280], "time_zon": [63, 400, 402, 426, 694, 753, 754, 755, 756, 757, 931, 1014, 1018, 1023, 1048, 1280], "timezon": [63, 118, 129, 402, 931], "m": [63, 65, 207, 305, 396, 397, 399, 405, 406, 430, 432, 433, 444, 657, 691, 693, 694, 698, 753, 754, 755, 756, 757, 758, 764, 860, 926, 931, 1014, 1015, 1017, 1023, 1024, 1052, 1054, 1055, 1066, 1243, 1277, 1279, 1280, 1284, 1337, 1346, 1347], "microsecond": [63, 65, 188, 205, 208, 235, 237, 238, 259, 274, 305, 423, 427, 436, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 755, 756, 757, 758, 799, 800, 801, 813, 852, 861, 875, 879, 926, 931, 1045, 1049, 1058, 1063, 1073, 1326, 1347], "zone": [63, 144, 145, 148, 396, 400, 426, 450, 694, 753, 754, 755, 756, 757, 813, 931, 1014, 1018, 1048, 1073, 1280, 1326], "zoneinfo": [63, 931], "available_timezon": [63, 931], "progress": [64, 66], "expect": [64, 66, 93, 96, 101, 114, 116, 128, 540, 552, 772, 813, 863, 865, 866, 926], "digit": [64, 594, 630, 631, 658, 813, 931, 1211, 1212, 1238, 1244, 1326, 1353], "offset": [65, 114, 115, 119, 120, 122, 126, 128, 131, 132, 133, 182, 188, 189, 191, 192, 235, 249, 256, 274, 280, 281, 305, 395, 396, 405, 419, 420, 423, 427, 441, 467, 514, 533, 610, 643, 680, 711, 813, 850, 852, 853, 855, 856, 879, 888, 894, 904, 905, 926, 1013, 1014, 1023, 1041, 1042, 1045, 1049, 1063, 1086, 1137, 1156, 1230, 1266, 1280, 1297, 1326, 1349], "integer_list": 73, "float_list": 73, "wrap": [75, 109, 479, 550, 813], "arbitrari": [75, 390, 606, 813, 839, 926, 931, 1196, 1326], "schemadict": [77, 102, 104, 105, 106, 107, 108, 114, 116, 117, 119, 125, 126, 128, 133, 305, 795, 865, 866, 908, 914, 926], "composit": [77, 1353], "either": [77, 144, 203, 207, 208, 209, 212, 214, 219, 224, 235, 236, 253, 262, 263, 305, 450, 550, 598, 605, 610, 691, 725, 734, 795, 813, 860, 861, 863, 879, 926, 930, 931, 1073, 1189, 1195, 1277, 1326, 1337, 1353], "map": [77, 104, 105, 114, 115, 116, 117, 120, 121, 126, 127, 128, 131, 144, 159, 179, 205, 211, 230, 236, 237, 238, 240, 258, 305, 315, 427, 441, 549, 550, 551, 552, 573, 575, 576, 578, 580, 581, 605, 721, 774, 813, 831, 877, 880, 926, 931, 1008, 1049, 1063, 1170, 1171, 1195, 1314, 1326, 1336, 1337, 1350], "nanosecond": [78, 188, 208, 235, 274, 305, 423, 427, 428, 439, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1050, 1061, 1063, 1073, 1326, 1347], "midnight": 78, "unsign": [79, 80, 81, 82, 603, 813, 931, 1107, 1193, 1326], "static": [83, 908, 914], "enable_string_cach": 85, "stringcach": [85, 86, 207, 305, 825, 982, 984], "reliabl": [85, 86], "wai": [85, 86, 102, 104, 105, 106, 108, 123, 124, 132, 187, 206, 225, 250, 283, 305, 590, 594, 645, 657, 741, 809, 813, 851, 874, 889, 906, 914, 926, 1243], "until": [85, 188, 191, 209, 305, 671, 672, 701, 852, 855, 926, 1257, 1258, 1287], "19": [86, 119, 144, 156, 178, 181, 188, 189, 190, 191, 192, 197, 208, 212, 214, 219, 231, 232, 235, 247, 253, 256, 274, 285, 305, 320, 371, 372, 382, 383, 384, 385, 386, 398, 404, 408, 412, 415, 417, 422, 426, 427, 429, 441, 482, 486, 489, 494, 506, 520, 538, 548, 549, 551, 596, 610, 611, 615, 616, 618, 619, 620, 622, 636, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 695, 707, 710, 711, 729, 748, 749, 750, 751, 753, 755, 773, 813, 852, 853, 854, 855, 856, 861, 865, 879, 886, 894, 908, 926, 938, 983, 991, 992, 1002, 1003, 1004, 1005, 1007, 1016, 1022, 1026, 1033, 1036, 1039, 1044, 1048, 1049, 1051, 1063, 1098, 1102, 1104, 1107, 1108, 1114, 1116, 1118, 1129, 1143, 1161, 1170, 1189, 1200, 1216, 1218, 1222, 1237, 1249, 1253, 1254, 1255, 1256, 1259, 1264, 1265, 1271, 1277, 1280, 1281, 1296, 1297, 1305, 1316, 1326], "longer": [86, 114, 115, 128, 614, 616, 618, 620, 622, 625, 627, 629, 813], "accept": [86, 112, 114, 115, 118, 120, 122, 126, 144, 158, 167, 187, 190, 241, 242, 246, 250, 268, 278, 279, 283, 305, 313, 364, 370, 453, 479, 551, 590, 605, 645, 705, 716, 724, 726, 728, 734, 737, 738, 739, 747, 751, 760, 777, 779, 782, 791, 795, 797, 803, 813, 829, 840, 851, 854, 881, 882, 885, 889, 895, 901, 902, 906, 926, 930, 990, 1097, 1195, 1221, 1326], "disable_string_cach": 86, "unabl": [90, 119], "hstack": [90, 305], "is_in": [91, 177, 305, 813, 1326], "least": [93, 591, 657, 659, 813, 1185, 1243, 1245, 1326, 1344], "unexpect": [95, 97, 116, 550, 552, 813, 1171, 1326], "caus": [95, 97, 103, 114, 115, 128, 137, 155, 174, 263, 305, 550, 813, 1078, 1306, 1326], "panic": 95, "incompat": 99, "arrai": [102, 106, 114, 115, 126, 172, 173, 257, 262, 263, 264, 305, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 371, 372, 378, 379, 380, 381, 382, 383, 384, 385, 386, 504, 521, 522, 523, 524, 526, 535, 536, 539, 542, 544, 550, 606, 613, 615, 619, 626, 634, 759, 813, 844, 926, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 991, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1010, 1071, 1127, 1144, 1145, 1146, 1147, 1149, 1157, 1158, 1159, 1162, 1165, 1167, 1168, 1196, 1202, 1203, 1205, 1208, 1209, 1210, 1219, 1224, 1300, 1304, 1306, 1307, 1316, 1326, 1344, 1349, 1352], "chunkedarrai": [102, 221, 305], "recordbatch": [102, 206, 305], "schemadefinit": [102, 104, 105, 106, 108, 123, 124, 132, 305, 926], "schema_overrid": [102, 104, 105, 106, 107, 108, 114, 115, 116, 117, 119, 123, 124, 125, 128, 206, 263, 305, 926, 931], "part": [102, 119, 262, 267, 305, 590, 658, 682, 683, 813, 843, 845, 875, 887, 903, 926, 1244, 1268, 1269, 1347], "closest": [102, 208, 305, 1345], "pair": [102, 104, 105, 106, 108, 123, 124, 132, 230, 305, 877, 926, 1353], "declar": [102, 104, 105, 106, 108, 116, 123, 124, 132, 262, 267, 305, 926, 931, 1334], "sever": [102, 104, 105, 106, 108, 123, 124, 132, 305, 926, 1353], "form": [102, 104, 105, 106, 108, 123, 124, 132, 205, 237, 272, 305, 591, 813, 926, 1185, 1326], "dimens": [102, 104, 106, 108, 123, 124, 132, 305, 606, 813, 926, 1196, 1306, 1326], "supportsinterchang": 103, "allow_copi": [103, 155, 263, 305, 1306, 1326], "interchang": [103, 155], "__dataframe__": 103, "convers": [103, 119, 155, 205, 206, 237, 238, 259, 263, 264, 305, 400, 691, 693, 694, 698, 825, 1018, 1089, 1277, 1279, 1280, 1284, 1305, 1306, 1307, 1326], "latest": [103, 118, 129, 155, 426, 427, 441, 464, 562, 691, 694, 755, 813, 1048, 1049, 1063, 1277, 1280], "from_panda": 103, "from_arrow": 103, "effici": [103, 116, 119, 204, 206, 305, 550, 813], "through": [103, 116, 809, 931, 1326, 1339, 1350], "pd": [103, 107, 714, 813, 1307, 1308, 1326], "df_pd": 103, "dfi": [103, 155], "strict": [104, 105, 108, 159, 305, 359, 365, 649, 653, 660, 673, 691, 693, 694, 696, 698, 813, 831, 926, 931, 975, 980, 1216, 1235, 1239, 1246, 1259, 1277, 1279, 1280, 1282, 1284, 1326], "clone": [104, 105, 106, 107, 108, 160, 263, 305, 832, 926, 989, 1316, 1326], "dimension": [104, 106, 108, 263, 305, 926, 1326], "exactli": [104, 105, 108, 137, 138, 139, 140, 143, 144, 148, 305, 682, 683, 689, 690, 758, 926, 1224, 1268, 1269, 1275, 1276, 1326], "infer_schema_length": [105, 108, 114, 115, 116, 119, 123, 125, 128, 132, 305, 662, 663, 926, 1248, 1249], "NOT": [105, 204, 305, 540, 560, 1350], "typic": [105, 116, 119, 133, 211, 305, 405, 931, 1023, 1171, 1326], "clearer": 105, "partial": [105, 114, 128, 305, 926], "scan": [105, 108, 114, 115, 116, 119, 123, 125, 128, 129, 130, 131, 132, 133, 134, 188, 189, 191, 192, 235, 305, 662, 663, 845, 852, 853, 855, 856, 857, 864, 879, 926, 1248, 1249], "slow": [105, 108, 114, 115, 116, 119, 123, 125, 128, 132, 305, 320, 387, 552, 612, 662, 663, 813, 914, 926, 1006, 1201, 1248, 1249, 1326], "present": [105, 144, 484, 551, 687, 688, 813, 845, 887, 926, 1170, 1316, 1326], "np": [106, 177, 263, 305, 466, 633, 710, 813, 848, 926, 1085, 1101, 1106, 1110, 1111, 1214, 1215, 1296, 1326], "ndarrai": [106, 177, 263, 305, 466, 633, 710, 813, 848, 926, 1085, 1214, 1215, 1218, 1296, 1306, 1326], "numpi": [106, 136, 163, 205, 237, 238, 259, 263, 264, 305, 550, 582, 583, 612, 813, 926, 1101, 1106, 1110, 1111, 1180, 1181, 1201, 1306, 1307, 1316, 1326], "columnar": [106, 108, 205, 237, 305], "interpret": [106, 108, 114, 115, 128, 305, 926], "yield": [106, 108, 114, 115, 116, 128, 172, 174, 204, 269, 305, 463, 550, 590, 813, 926, 1071, 1078, 1326], "conclus": [106, 108, 305, 926], "datetimeindex": 107, "nan_to_nul": [107, 305, 926, 1326], "include_index": 107, "instal": [107, 114, 115, 117, 120, 122, 163, 264, 305, 395, 736, 887, 926, 1013, 1307, 1326], "nan": [107, 144, 155, 175, 263, 264, 305, 393, 394, 447, 448, 457, 468, 470, 477, 488, 490, 491, 492, 497, 547, 553, 568, 582, 583, 584, 585, 612, 717, 740, 813, 846, 926, 940, 944, 1011, 1012, 1080, 1110, 1111, 1180, 1181, 1201, 1306, 1307, 1326, 1353], "nameless": 107, "enumer": [107, 114, 115, 128, 206, 305], "regardless": [107, 187, 190, 208, 305, 400, 664, 803, 1018, 1250], "pleas": [107, 116, 117, 188, 305, 308, 450, 613, 615, 617, 619, 621, 624, 626, 628, 741, 753, 758, 813, 852, 926, 1073, 1326, 1330], "reset_index": [107, 188, 305, 852, 926], "prior": 107, "pd_df": 107, "pd_seri": 107, "its": [109, 136, 172, 263, 305, 399, 427, 441, 450, 608, 645, 803, 813, 836, 842, 900, 926, 984, 1017, 1049, 1063, 1071, 1073, 1198, 1306, 1326, 1352], "repr": 109, "trim": [109, 1346], "whitespac": [109, 669, 679, 685, 686, 687, 688, 1255, 1265, 1271, 1272, 1273, 1274, 1346], "prompt": 109, "extract": [109, 251, 305, 398, 401, 403, 404, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 424, 425, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 594, 658, 659, 662, 663, 664, 680, 682, 813, 1016, 1019, 1020, 1021, 1022, 1025, 1026, 1028, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1065, 1067, 1244, 1245, 1248, 1249, 1250, 1266, 1344], "to_init_repr": [109, 305, 1326], "truncat": [109, 114, 115, 128, 186, 188, 191, 205, 237, 238, 259, 305, 852, 855, 875, 926, 1349], "identifi": [109, 116, 217, 224, 270, 282, 305, 870, 896, 926], "compound": [109, 238, 305, 931], "neither": [109, 119, 125, 239, 305, 354, 540, 971, 1163], "source_ac": 109, "source_cha": 109, "ident": [109, 160, 161, 305, 430, 608, 609, 813, 832, 833, 926, 989, 993, 1052, 1198, 1199, 1326], "timestamp": [109, 118, 129, 188, 191, 305, 426, 427, 441, 764, 852, 855, 926, 1048, 1049, 1063], "tor_id": 109, "nnel_id": 109, "\u03bc": [109, 159, 188, 205, 235, 237, 238, 259, 274, 305, 396, 397, 399, 400, 401, 402, 405, 407, 411, 414, 416, 419, 420, 421, 423, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 694, 755, 756, 757, 758, 764, 813, 831, 852, 861, 879, 926, 931, 1014, 1015, 1017, 1018, 1019, 1020, 1023, 1024, 1025, 1031, 1032, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1277, 1280], "asia": [109, 931, 1019, 1020, 1053], "tokyo": [109, 931], "123456780": 109, "9876543210": 109, "56": [109, 712, 813], "59": [109, 165, 305, 399, 416, 428, 463, 755, 799, 800, 801, 813, 838, 926, 931, 1017, 1038, 1050], "663053": 109, "jst": [109, 931], "803065983": 109, "2055938745": 109, "38": [109, 141, 144], "050545": 109, "source_actor_id": 109, "source_channel_id": 109, "to_list": [109, 235, 305, 1235, 1246, 1326], "uint32": [110, 136, 159, 172, 235, 281, 305, 330, 335, 336, 376, 450, 466, 469, 498, 502, 503, 519, 604, 609, 610, 651, 652, 665, 666, 710, 714, 741, 768, 771, 813, 831, 879, 905, 926, 931, 948, 952, 953, 980, 1071, 1073, 1107, 1125, 1126, 1142, 1199, 1216, 1237, 1238, 1251, 1252, 1308, 1309, 1326], "uint64": [110, 193, 235, 281, 305, 335, 336, 450, 472, 502, 503, 603, 610, 813, 879, 905, 926, 931, 952, 953, 1073, 1090, 1125, 1126, 1193, 1309, 1326], "bigidx": 110, "over": [111, 114, 115, 116, 118, 119, 128, 144, 145, 156, 174, 204, 205, 206, 211, 236, 237, 238, 251, 269, 282, 285, 291, 305, 320, 387, 390, 450, 458, 549, 550, 552, 561, 563, 564, 565, 566, 574, 575, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 729, 744, 745, 748, 749, 762, 773, 774, 775, 787, 792, 813, 890, 908, 914, 926, 931, 938, 1006, 1073, 1078, 1171, 1202, 1203, 1205, 1209, 1326], "fetch": [111, 128, 209, 305, 834, 857, 864, 926], "ideal": 111, "read_csv_batch": 111, "tpch": [111, 115], "tables_scale_100": [111, 115], "lineitem": [111, 115, 117], "tbl": [111, 115, 1352], "try_parse_d": [111, 114, 115, 128], "n_row": [112, 114, 115, 120, 122, 126, 128, 131, 132, 133, 206, 305, 845, 926], "handler": [112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 166, 305, 390, 813, 839, 926], "builtin": [112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 166, 305, 390, 813, 839, 926], "instanc": [112, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 133, 144, 148, 153, 159, 174, 180, 305, 365, 562, 613, 615, 617, 619, 621, 624, 626, 628, 744, 748, 762, 809, 813, 831, 866, 904, 905, 926, 980, 1078, 1326], "stop": [112, 114, 115, 120, 122, 126, 128, 131, 132, 133, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 813, 1015, 1018, 1024, 1025, 1032, 1035, 1038, 1043, 1049, 1054], "text": [113, 116, 450, 661, 665, 666, 674, 675, 677, 680, 692, 793, 813, 1073, 1247, 1251, 1252, 1263, 1266, 1278, 1326, 1339, 1353], "read_csv": [113, 119, 128], "write_clipboard": [113, 305], "has_head": [114, 115, 119, 128], "new_column": [114, 115, 119, 128, 231, 232, 305], "comment_prefix": [114, 115, 128], "skip_row": [114, 115, 128], "missing_utf8_is_empty_str": [114, 115, 128], "ignore_error": [114, 115, 124, 128, 132], "n_thread": [114, 115], "8192": 114, "csvencod": [114, 115, 128], "low_memori": [114, 115, 126, 128, 132, 133], "skip_rows_after_head": [114, 115, 128], "row_index_nam": [114, 115, 120, 122, 126, 128, 131, 132, 133], "row_index_offset": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sample_s": [114, 115], "eol_char": [114, 115, 128], "raise_if_empti": [114, 115, 119, 125, 128], "truncate_ragged_lin": [114, 115, 128], "decimal_comma": [114, 115, 128], "glob": [114, 115, 126, 128, 131, 132, 133], "fsspec": [114, 115, 120, 122, 126, 129, 130, 131, 136], "remot": [114, 115, 120, 122], "autogener": [114, 115, 128], "column_x": [114, 115, 128], "shorter": [114, 115, 128, 540, 768, 769], "remain": [114, 115, 128, 169, 172, 177, 226, 305, 393, 394, 459, 509, 605, 682, 683, 813, 841, 848, 865, 866, 926, 1011, 1012, 1071, 1082, 1132, 1195, 1268, 1269, 1326, 1339], "comment": [114, 115, 128], "skip": [114, 115, 119, 126, 128, 133, 208, 272, 305, 938, 1171, 1326, 1340], "escap": [114, 115, 117, 128], "complet": [114, 116, 128, 1351], "wherea": [114, 128, 235, 305, 427, 441, 582, 583, 606, 610, 813, 857, 864, 879, 926, 1049, 1063, 1180, 1181, 1196, 1326], "would": [114, 115, 128, 263, 267, 305, 330, 341, 395, 515, 550, 552, 561, 590, 601, 734, 736, 813, 947, 958, 1013, 1138, 1191, 1306, 1326], "prefer": [114, 115, 118, 119, 128, 149, 174, 205, 211, 236, 237, 291, 305, 453, 552, 813, 926, 1078, 1171, 1326, 1353], "treat": [114, 115, 128, 450, 649, 652, 660, 674, 675, 803, 813, 1073, 1235, 1238, 1246, 1260, 1261, 1326], "10000": [114, 206, 305], "issu": [114, 115, 116, 119, 128, 305, 380, 381, 708, 813, 1000, 1001, 1294, 1326], "iso8601": [114, 115, 128], "succe": [114, 115, 128], "cpu": [114, 115, 262, 305, 1304, 1326], "buffer": [114, 115, 116, 172, 205, 305, 1071, 1326], "modifi": [114, 115, 128, 150, 153, 174, 196, 204, 205, 276, 305, 331, 426, 444, 649, 657, 658, 660, 674, 675, 813, 937, 1048, 1066, 1078, 1235, 1243, 1244, 1246, 1260, 1261, 1283, 1285, 1286, 1326], "upper": [114, 115, 116, 172, 188, 191, 305, 370, 371, 474, 479, 540, 575, 720, 731, 753, 754, 756, 757, 800, 801, 813, 852, 855, 926, 990, 991, 1071, 1092, 1097, 1169, 1313, 1326, 1342, 1344], "bound": [114, 115, 172, 188, 191, 305, 341, 370, 371, 372, 479, 513, 515, 538, 540, 546, 720, 731, 753, 754, 756, 757, 800, 801, 813, 852, 855, 926, 958, 990, 991, 992, 1071, 1097, 1136, 1138, 1161, 1169, 1313, 1326, 1342], "lossi": [114, 115, 128], "decod": [114, 115, 662], "expens": [114, 115, 126, 128, 132, 133, 147, 149, 188, 189, 191, 192, 205, 211, 235, 236, 237, 238, 269, 270, 305, 320, 552, 813, 836, 838, 842, 852, 853, 855, 856, 879, 880, 896, 900, 926, 1078, 1171, 1326, 1353], "aggreg": [114, 115, 126, 180, 187, 188, 190, 191, 212, 214, 216, 219, 222, 226, 227, 228, 235, 252, 253, 272, 275, 283, 284, 287, 289, 305, 314, 459, 475, 548, 550, 552, 590, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 725, 726, 727, 728, 744, 745, 746, 747, 748, 749, 750, 751, 762, 767, 776, 777, 779, 781, 782, 787, 796, 797, 813, 852, 853, 855, 856, 866, 867, 868, 869, 872, 873, 876, 879, 891, 892, 899, 906, 907, 910, 912, 926, 930, 1093, 1200, 1201, 1202, 1203, 1205, 1208, 1209, 1210, 1326, 1340, 1344, 1349], "parser": 114, "regard": [114, 740], "sens": [114, 120, 122, 131, 218, 274, 305, 590, 813, 871, 926], "particular": [114, 120, 122, 131, 172, 305, 1071, 1326], "usernam": [114, 117, 120, 122, 131], "password": [114, 117, 120, 122, 131], "sampl": [114, 115, 291, 305, 642, 813, 914, 1229, 1326], "estim": [114, 115, 157, 172, 305, 321, 451, 452, 495, 730, 813, 828, 926, 1071, 1074, 1075, 1120, 1326], "alloc": [114, 115, 172, 229, 305, 813, 930, 1071, 1326], "encount": [114, 115, 128, 188, 191, 305, 582, 583, 662, 664, 740, 744, 762, 813, 852, 855, 926, 1180, 1181, 1248, 1250, 1326], "window": [114, 115, 128, 188, 189, 191, 192, 235, 305, 387, 427, 441, 449, 451, 452, 552, 564, 590, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 738, 789, 790, 813, 852, 853, 855, 856, 879, 926, 1006, 1049, 1063, 1072, 1074, 1075, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1326], "rn": [114, 115, 128], "r": [114, 115, 128, 305, 594, 652, 656, 657, 658, 659, 674, 675, 813, 931, 1238, 1242, 1243, 1244, 1245, 1260, 1261, 1278, 1337, 1346], "nodataerror": [114, 115, 119, 125, 128], "period": [114, 115, 128, 188, 189, 191, 192, 235, 305, 427, 441, 449, 451, 452, 591, 610, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 879, 926, 1049, 1063, 1072, 1074, 1075, 1185, 1326], "expand": [114, 126, 128, 133, 455, 557, 559, 604, 813, 930, 931, 1077, 1326], "rule": [114, 126, 128, 133, 180, 305, 650, 676, 1236, 1262], "lazili": [114, 115, 128, 129, 130, 131, 132, 133, 835, 926], "incorrectli": [114, 188, 189, 191, 192, 235, 305, 450, 540, 610, 813, 852, 853, 855, 856, 879, 926, 1073, 1326], "continu": [114, 388, 598, 642, 813, 1007, 1189, 1229, 1326], "benchmark": 114, "demonstr": [114, 463, 813, 931], "birthdai": 114, "alic": [114, 1351], "1995": 114, "bob": [114, 218, 305, 871, 926, 1351], "1990": [114, 1334], "charli": [114, 1351], "2002": [114, 409, 423, 1027, 1045, 1067], "08": [114, 137, 138, 139, 140, 165, 208, 235, 251, 305, 395, 399, 419, 420, 427, 610, 691, 756, 758, 813, 838, 879, 926, 931, 1013, 1049, 1063, 1277, 1347], "50000": 115, "batchedcsvread": 115, "upon": 115, "creation": 115, "gather": [115, 182, 256, 305, 330, 467, 514, 538, 710, 711, 734, 813, 850, 894, 926, 947, 1086, 1137, 1161, 1296, 1297, 1326], "done": [115, 134, 153, 157, 159, 208, 305, 319, 321, 365, 590, 813, 828, 831, 861, 926, 980, 1326], "next_batch": 115, "big": 115, "interest": [115, 430, 433, 1052, 1055], "seen_group": 115, "big_fil": 115, "df_current_batch": 115, "partition_df": 115, "partition_bi": [115, 206, 305, 564], "as_dict": [115, 224, 305], "fh": 115, "els": [115, 803], "iter_batch": 116, "execute_opt": [116, 117], "client": 116, "packag": [116, 395, 736, 930, 1013], "establish": 116, "async": [116, 835, 926], "aris": 116, "happen": [116, 400, 598, 813, 1018, 1189, 1326], "report": 116, "resultset": 116, "manner": [116, 188, 235, 305, 450, 813, 852, 879, 926], "veri": [116, 205, 269, 305, 552, 813, 914, 1345], "poor": 116, "mani": [116, 117, 174, 305, 676, 1078, 1262, 1326], "trip": 116, "still": [116, 117], "exact": [116, 142, 144, 148, 208, 248, 305, 321, 463, 656, 689, 690, 691, 693, 694, 717, 813, 1242, 1277, 1279, 1280, 1305, 1326], "incom": 116, "read_arrow_batches_from_odbc": 116, "read_database_uri": 116, "wide": [116, 186, 217, 272, 305, 870, 926], "snowflak": [116, 117], "variou": [116, 305, 813, 926, 931, 1326], "facil": 116, "initialis": [116, 153, 926], "flight": 116, "flightsql": 116, "flight_sql": 116, "about": [116, 158, 268, 305, 363, 364, 642, 649, 657, 658, 660, 674, 675, 715, 716, 813, 829, 895, 926, 930, 1229, 1235, 1243, 1244, 1246, 1260, 1261, 1326, 1353], "notabl": 116, "dremio": 116, "influxdb": 116, "notic": [116, 305, 926, 1326], "dbapi2": 116, "connectorx": [116, 117, 136], "optimis": [116, 211, 238, 291, 305, 926, 1171, 1217, 1326, 1353], "translat": 116, "conn": 116, "url": [116, 117, 126, 133, 657, 659, 1243, 1245], "render_as_str": 116, "hide_password": 116, "abl": 116, "relat": [116, 153, 674, 675, 931, 1260, 1261, 1340, 1352], "k\u00f9zudb": 116, "cypher": 116, "test_data": 116, "user_conn": 116, "normalised_scor": 116, "uint8": [116, 159, 261, 262, 263, 272, 305, 380, 381, 605, 708, 724, 813, 831, 926, 931, 1000, 1001, 1195, 1294, 1309, 1326, 1353], "parameteris": 116, "metric": 116, "alchemy_conn": 116, "qmark": 116, "variad": 116, "1000": [116, 172, 261, 281, 305, 321, 813, 905, 926, 1058, 1167, 1303, 1326, 1353], "localhost": 116, "5432": 116, "uid": 116, "usr": 116, "pwd": 116, "max_text_s": 116, "max_binary_s": 116, "do_someth": 116, "kuzu_db_conn": 116, "session": 116, "ext": 116, "create_async_engin": 116, "async_engin": 116, "aiosqlit": 116, "surrealdb": 116, "surreal": 116, "surrealhttp": 116, "surreal_query_to_fram": 116, "8000": 116, "rpc": 116, "partition_on": 117, "partition_rang": 117, "partition_num": 117, "dbreadengin": 117, "raw": 117, "warehous": 117, "role": 117, "caller": [117, 218, 305, 540, 866, 871, 908, 914, 926], "respons": [117, 218, 305, 871, 926], "often": [117, 153, 188, 189, 191, 192, 235, 305, 338, 506, 507, 604, 610, 813, 852, 853, 855, 856, 879, 926, 955, 1129, 1130, 1339], "come": [117, 188, 305, 395, 419, 420, 495, 540, 736, 813, 852, 925, 926, 1013, 1041, 1042, 1120, 1326], "transfer": 117, "document": [117, 119, 305, 308, 430, 433, 664, 691, 693, 694, 698, 809, 984, 1052, 1055, 1250, 1277, 1279, 1280, 1284, 1326, 1330], "redshift": 117, "mysql": 117, "mariadb": 117, "clickhous": 117, "oracl": 117, "bigqueri": 117, "github": [117, 305], "sfu": 117, "connector": 117, "destin": 117, "develop": [117, 144, 148], "read_databas": 117, "usual": [117, 267, 305, 396, 1014], "urllib": 117, "quote_plu": 117, "word": [117, 674, 675, 687, 688], "3f": [117, 691, 694, 1277, 1280], "20word": 117, "explicitli": [117, 119, 142, 144, 153, 305, 795, 824], "test_tabl": 117, "compani": 117, "testdb": 117, "public": [117, 305, 813, 825, 926, 1326, 1349], "myrol": 117, "delta_table_opt": [118, 129], "root": [118, 129, 368, 494, 549, 563, 573, 574, 576, 578, 580, 581, 596, 646, 707, 812, 813, 986, 1232, 1326, 1345], "absolut": [118, 129, 130, 137, 138, 139, 140, 312, 449, 451, 452, 813, 933, 1072, 1074, 1075, 1326, 1345], "info": [118, 129, 130, 136, 305, 308, 1326, 1330], "avoid": [118, 144, 148, 237, 305, 315, 813, 836, 842, 880, 900, 926], "year": [118, 129, 188, 208, 235, 251, 274, 305, 395, 409, 410, 423, 424, 427, 441, 442, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 736, 752, 753, 754, 755, 756, 757, 800, 801, 813, 852, 861, 879, 926, 931, 1013, 1027, 1028, 1045, 1046, 1049, 1063, 1064, 1347], "2021": [118, 129, 159, 165, 186, 188, 274, 305, 691, 772, 831, 838, 852, 926, 931, 1019, 1020, 1028, 1053, 1116, 1277, 1326], "travel": [118, 129], "2020": [118, 129, 159, 165, 186, 208, 235, 305, 308, 395, 400, 405, 426, 430, 433, 434, 435, 436, 437, 438, 439, 440, 450, 610, 691, 693, 694, 736, 813, 831, 838, 879, 926, 931, 1013, 1018, 1023, 1048, 1052, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1073, 1277, 1279, 1280, 1326], "tzinfo": [118, 129], "utc": [118, 129, 396, 400, 402, 405, 426, 691, 694, 931, 1014, 1018, 1023, 1048, 1277, 1280], "aw": [118, 126, 129, 133], "googl": [118, 129, 130], "service_account": [118, 129], "service_account_json_absolute_path": [118, 129], "az": [118, 129, 130], "adl": [118, 129, 130], "abf": [118, 129, 130], "azure_storage_account_nam": [118, 129, 130], "azure_storage_account_kei": [118, 129, 130], "without_fil": [118, 129, 130], "track": [118, 129, 130, 211, 305, 540, 1350], "sheet_id": [119, 125], "sheet_nam": [119, 125], "excelspreadsheetengin": 119, "read_opt": 119, "calamin": 119, "fastexcel": [119, 136], "xlsb": 119, "xl": 119, "pyxlsb": [119, 136], "openpyxl": [119, 136], "sheetnam": [119, 125], "nor": [119, 125, 239, 305], "xlsx2csv": [119, 136], "refin": 119, "major": [119, 262, 305], "dramat": 119, "modul": [119, 812, 931, 1353], "bind": 119, "significantli": [119, 211, 291, 305, 1171, 1326, 1353], "potenti": [119, 128, 131, 132, 205, 236, 238, 305, 573, 838, 926, 930], "julian": 119, "primari": [119, 1353], "constructor": [119, 148], "load_workbook": 119, "open_workbook": 119, "excelread": 119, "load_sheet_by_nam": 119, "influenc": [119, 845, 866, 926], "pipelin": [119, 267, 305], "becom": [119, 146, 673], "skip_empty_lin": 119, "correct": [119, 125, 451, 452, 495, 623, 642, 813, 865, 866, 926, 930, 1074, 1075, 1120, 1207, 1229, 1326], "forc": [119, 208, 211, 263, 291, 305, 540, 860, 861, 914, 926, 1171, 1306, 1326], "best": [119, 211, 291, 305, 552, 813, 1171, 1326], "known": [119, 120, 354, 540, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 908, 914, 971, 1163], "ambigu": [119, 426, 427, 441, 691, 694, 755, 1048, 1049, 1063, 1277, 1280], "memory_map": [120, 126, 131], "greatli": [120, 131], "repeat": [120, 131, 602, 604, 785, 804, 813], "o": [120, 131, 363, 364, 387, 656, 715, 716, 813, 979, 1006, 1242, 1272, 1310, 1326, 1337], "That": [120, 865, 866, 926], "filenam": 120, "my_fil": 120, "write_ipc": [120, 305], "read_ndjson": 123, "stringio": [123, 124, 166, 305, 390, 465, 564, 813, 839, 883, 926], "With": [123, 203, 246, 305, 349, 532, 635, 813, 885, 926, 966, 1119, 1155, 1221, 1326], "becaus": [124, 132, 172, 188, 191, 209, 211, 272, 291, 305, 463, 510, 813, 852, 855, 914, 926, 938, 1071, 1133, 1171, 1326], "openoffic": 125, "od": [125, 825], "parallelstrategi": [126, 133], "use_statist": [126, 133], "hive_partit": [126, 133], "hive_schema": [126, 133], "retri": [126, 131, 133], "row_group": [126, 133], "hive": [126, 133], "prune": [126, 133, 866, 926], "gcp": [126, 130, 133], "stabl": [126, 158, 163, 165, 193, 239, 251, 268, 305, 472, 545, 792, 813, 829, 838, 870, 889, 890, 895, 926, 1090, 1326], "read_tabl": 126, "scan_parquet": [126, 134], "scan_pyarrow_dataset": [126, 133], "with_column_nam": 128, "push": [128, 131, 132, 133, 134], "down": [128, 131, 132, 133, 134, 462, 813, 1084, 1326], "therebi": [128, 131, 132], "realloc": [128, 131, 132, 174, 305, 1078, 1326], "headerless": 128, "my_long_fil": 128, "thing": [128, 135], "less": [128, 208, 305, 463, 497, 547, 550, 683, 813, 861, 926, 1269, 1353], "breezah": 128, "languag": [128, 188, 208, 235, 274, 305, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063, 1073, 1326], "hard": [128, 865, 866, 926], "mydf": 128, "lambda": [128, 156, 180, 211, 225, 226, 230, 291, 305, 320, 354, 449, 450, 451, 452, 540, 548, 549, 550, 552, 574, 575, 744, 745, 762, 774, 775, 787, 813, 865, 866, 874, 877, 914, 926, 938, 971, 1072, 1073, 1074, 1075, 1163, 1171, 1326], "lower": [128, 165, 188, 191, 228, 297, 305, 370, 372, 479, 546, 549, 574, 599, 603, 621, 622, 731, 753, 754, 756, 757, 786, 800, 801, 813, 838, 852, 855, 876, 920, 926, 990, 992, 1008, 1097, 1169, 1190, 1193, 1206, 1313, 1326, 1342, 1344], "simpli": [128, 744, 762], "idx": [128, 188, 206, 281, 305, 341, 354, 540, 852, 905, 926, 971, 1163, 1246], "uint16": [128, 380, 381, 708, 813, 931, 1000, 1001, 1294, 1306, 1309, 1326], "u16": [128, 1353], "eu": [129, 130], "central": [129, 130, 495, 642, 813, 1120, 1229, 1326], "iceberg": [130, 825], "pyiceberg": [130, 136], "secret": [130, 133], "adlf": 130, "my": [130, 134, 699, 1285], "oauth": 130, "token": 130, "ya29": 130, "dr": 130, "afm": 130, "py": 130, "impl": 130, "fsspecfileio": 130, "give": [131, 132, 208, 217, 270, 305, 406, 463, 495, 604, 717, 721, 813, 825, 870, 896, 926, 1024, 1120, 1305, 1314, 1326, 1349], "read_parquet": 133, "east": 133, "allow_pyarrow_filt": 134, "comparison": 134, "dset": 134, "folder": 134, "04": [134, 159, 165, 188, 274, 305, 399, 400, 419, 420, 426, 427, 430, 433, 434, 435, 438, 440, 444, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 736, 752, 755, 756, 758, 813, 831, 838, 852, 926, 931, 1018, 1032, 1038, 1041, 1042, 1043, 1048, 1052, 1055, 1056, 1057, 1060, 1062, 1066, 1277], "seed": [135, 193, 239, 305, 472, 527, 601, 632, 638, 813, 1090, 1150, 1191, 1213, 1225, 1326], "shuffl": [135, 239, 267, 291, 305, 527, 632, 813, 914, 1150, 1213, 1326], "platform": 136, "maco": 136, "arm64": 136, "arm": 136, "64bit": [136, 603, 813, 1193, 1326], "main": [136, 835, 926], "feb": 136, "2024": [136, 395, 401, 402, 407, 411, 414, 416, 421, 428, 431, 736, 752, 755, 758, 931, 1013, 1347], "21": [136, 165, 218, 253, 305, 398, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 755, 764, 813, 838, 871, 926, 931, 1016, 1341], "clang": 136, "1500": [136, 147], "adbc_driver_manag": 136, "cloudpickl": 136, "17": [136, 144, 172, 208, 283, 305, 450, 612, 630, 764, 800, 813, 906, 994, 996, 1049, 1073, 1201, 1326, 1348, 1353], "hvplot": [136, 305, 308, 1326, 1330], "matplotlib": [136, 875, 887, 926], "nest_asyncio": 136, "pydant": 136, "torch": [136, 267, 305, 1309, 1326], "check_row_ord": [137, 138], "check_column_ord": [137, 138], "check_dtyp": [137, 138, 139, 140, 1070, 1326], "check_exact": [137, 138, 139, 140], "rtol": [137, 138, 139, 140], "atol": [137, 138, 139, 140], "categorical_as_str": [137, 138, 139, 140], "assert": [137, 138, 139, 140, 144, 148, 235, 305, 825, 931], "assertionerror": [137, 138, 139, 140], "compar": [137, 138, 139, 140, 171, 181, 305, 447, 448, 468, 470, 479, 497, 547, 584, 585, 813, 984, 1070, 1216, 1326], "unsort": [137, 138], "toler": [137, 138, 139, 140, 208, 305, 861, 926], "inexact": [137, 138, 139, 140], "share": [137, 138, 139, 140, 172, 305, 1071, 1326], "assert_series_equ": [137, 140, 1070, 1326, 1353], "assert_frame_not_equ": [137, 140], "pytest": [137, 139], "worthwhil": [137, 139], "shorten": [137, 139], "traceback": [137, 138, 139, 140, 263, 305, 1306, 1326], "tb": [137, 139, 172, 305, 1071, 1326], "short": [137, 139], "tend": [137, 139], "unhelpfulli": [137, 139], "recent": [137, 138, 139, 140, 263, 305, 591, 813, 1185, 1306, 1326, 1336, 1350], "assert_frame_equ": [138, 139, 171, 305, 1353], "assert_series_not_equ": [138, 139], "check_nam": [139, 140], "searchstrategi": [141, 143, 144, 145, 146, 148], "allow_nul": [141, 144, 148, 1353], "null_prob": [141, 144, 148], "percentag": [141, 144, 148, 591, 813, 1185, 1326], "chanc": [141, 144, 148, 1353], "1755e": [141, 144], "575050513": [141, 144], "inf": [141, 144, 148, 327, 388, 474, 481, 485, 598, 717, 813, 944, 996, 1007, 1092, 1101, 1106, 1169, 1185, 1189, 1313, 1326, 1348], "min_col": [142, 144], "max_col": [142, 144], "comprehens": 142, "standalon": [142, 931], "itself": [142, 305, 308, 363, 364, 552, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 715, 716, 789, 790, 813, 829, 863, 895, 926, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1326, 1330, 1334, 1350], "mincol": 142, "assign": [142, 188, 290, 305, 354, 540, 590, 601, 682, 683, 813, 852, 913, 926, 971, 1163, 1191, 1268, 1269, 1326], "minimum": [142, 143, 144, 146, 148, 180, 219, 220, 305, 449, 451, 452, 568, 583, 593, 601, 781, 782, 813, 872, 926, 1037, 1072, 1074, 1075, 1181, 1187, 1191, 1326, 1341, 1353], "especi": [142, 609, 813, 845, 926, 1199, 1326], "hypothesi": [142, 144, 147, 148, 1353], "test_unique_xyz": 142, "assert_someth": 142, "inner_dtyp": [143, 146], "select_from": [143, 146, 148], "min_siz": [143, 144, 146, 148, 1353], "max_siz": [143, 144, 146, 148, 1353], "anoth": [143, 159, 171, 181, 187, 208, 305, 387, 397, 478, 513, 538, 556, 560, 605, 614, 616, 618, 620, 622, 625, 627, 629, 660, 813, 831, 851, 903, 926, 1006, 1015, 1070, 1078, 1096, 1136, 1195, 1216, 1246, 1326, 1345, 1346], "randomli": 143, "innermost": [143, 146], "2x": 143, "lst": 143, "11330": 143, "24030": 143, "116": 143, "include_col": 144, "allow_chunk": [144, 148], "allowed_dtyp": [144, 145, 148, 1353], "excluded_dtyp": [144, 145, 148], "allow_time_zon": [144, 145, 148], "describ": [144, 186, 305, 926, 1326], "desir": [144, 354, 444, 540, 971, 1066, 1163, 1326], "onto": 144, "exclud": [144, 148, 188, 305, 364, 378, 381, 395, 479, 558, 716, 736, 813, 852, 926, 931, 1013, 1097, 1116, 1326], "pct": 144, "preced": [144, 931], "allow_infin": [144, 148], "disallow": 144, "usag": [144, 148, 248, 305, 931, 1224, 1326], "deploi": [144, 148], "characterist": [144, 148], "concret": [144, 148], "test_df_height": 144, "interact": [144, 148, 165, 305, 838, 926], "col0": [144, 1353], "col1": [144, 226, 305, 926, 1353], "col2": [144, 226, 305, 926, 1353], "1844": 144, "06": [144, 159, 274, 305, 395, 399, 418, 425, 426, 427, 428, 441, 442, 752, 755, 831, 926, 931, 1013, 1048, 1049, 1063], "848808": 144, "1436e16": 144, "9914e218": 144, "2068": 144, "412277": 144, "7415e16": 144, "2095": 144, "647961": 144, "15836": 144, "nesting_level": 145, "pick": [145, 803], "prioriti": [145, 158, 268, 305, 363, 715, 716, 813, 829, 895, 926], "complex": [145, 363, 364, 387, 715, 716, 813, 979, 1006, 1310, 1326], "fulli": [146, 225, 239, 263, 305], "profil": [147, 149, 834, 926], "balanc": [147, 149, 1353], "set_environ": 147, "polars_hypothesis_profil": [147, 149], "max_data_s": 148, "test_series_len": 148, "zz": [148, 165, 251, 305, 838, 926, 1340, 1346, 1352], "polars_max_thread": 150, "behind": 150, "lock": 150, "reason": [150, 165, 305, 540, 550, 813, 838, 926], "temporarili": [150, 153, 188, 189, 191, 192, 235, 305, 610, 813, 852, 853, 855, 856, 879, 926], "pyspark": 150, "udf": [150, 156, 211, 225, 285, 291, 305, 320, 390, 552, 594, 729, 775, 813, 839, 874, 908, 914, 926, 938, 1171, 1326], "recommend": [150, 165, 205, 225, 305, 830, 838, 926, 931], "thread_pool_s": 151, "easi": 153, "restor": 153, "restore_default": 153, "set_tbl_row": 153, "scope": [153, 824, 931, 1336, 1339, 1350], "lifetim": [153, 824, 1339], "whatev": 153, "were": [153, 212, 214, 219, 253, 305, 605, 809, 813, 1195, 1326], "enter": 153, "advantag": [153, 225, 305], "set_": 153, "set_verbos": 153, "do_various_th": 153, "cleaner": 153, "init": [153, 1334], "breviti": 153, "vein": 153, "durat": [153, 208, 274, 305, 396, 404, 405, 408, 412, 415, 417, 422, 429, 434, 435, 436, 437, 438, 439, 440, 444, 450, 714, 753, 754, 756, 757, 800, 801, 813, 861, 926, 931, 1014, 1022, 1023, 1026, 1033, 1036, 1039, 1044, 1051, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1073, 1306, 1308, 1326], "set_ascii_t": 153, "write_ascii_frame_to_stdout": 153, "sy": 153, "stdout": [153, 186, 305, 565], "nan_as_nul": 155, "polarsdatafram": 155, "notimplementederror": 155, "num_row": 155, "get_column": [155, 265, 305], "dtypekind": 155, "inference_s": [156, 211, 305], "256": [156, 211, 305, 1185, 1326], "map_row": [156, 305], "tri": [156, 211, 305], "approxim": [157, 305, 321, 450, 730, 813, 828, 926, 1073, 1326, 1345, 1353], "hyperloglog": [157, 305, 321, 730, 813, 828, 926], "algorithm": [157, 305, 321, 650, 676, 730, 813, 828, 926, 1236, 1262], "cardin": [157, 305, 321, 730, 813, 828, 926], "k": [158, 238, 268, 269, 305, 363, 364, 377, 495, 715, 716, 813, 829, 895, 926, 979, 997, 1120, 1310, 1326], "intoexpr": [158, 187, 188, 189, 190, 191, 192, 235, 241, 242, 246, 250, 268, 278, 279, 283, 305, 319, 338, 358, 361, 362, 364, 395, 450, 456, 474, 478, 479, 506, 507, 528, 529, 530, 531, 590, 605, 614, 616, 618, 620, 622, 625, 627, 629, 633, 635, 636, 645, 650, 676, 681, 682, 683, 689, 690, 705, 716, 726, 728, 734, 737, 738, 739, 740, 742, 744, 747, 748, 751, 755, 762, 777, 779, 782, 788, 791, 795, 797, 813, 829, 851, 852, 853, 854, 855, 856, 879, 881, 882, 885, 889, 895, 901, 902, 906, 926, 930, 955, 974, 977, 978, 1013, 1073, 1079, 1096, 1097, 1130, 1195, 1215, 1221, 1267, 1268, 1269, 1275, 1276, 1326], "nulls_last": [158, 250, 268, 305, 330, 350, 363, 364, 534, 644, 645, 715, 716, 734, 813, 829, 889, 895, 926, 947, 967, 1115, 1157, 1231, 1326], "smallest": [158, 268, 305, 363, 364, 716, 813, 829, 895, 926, 979, 1326, 1341, 1343], "bottom": [158, 305, 364, 813, 829, 926], "largest": [158, 268, 305, 364, 715, 716, 813, 829, 895, 926, 1310, 1326], "lowest": [158, 268, 305, 363, 546, 715, 716, 813, 829, 895, 926], "wors": [158, 268, 305, 829, 889, 895, 926], "search": [158, 208, 268, 305, 540, 650, 676, 829, 861, 889, 895, 926, 1236, 1262], "There": [158, 268, 305, 363, 364, 699, 715, 716, 813, 829, 895, 926, 1285], "top_k": [158, 305, 363, 364, 716, 813, 829, 926, 979, 1326], "columnnameorselector": [159, 167, 169, 217, 224, 226, 238, 260, 270, 271, 272, 305, 831, 840, 841, 870, 896, 897, 926], "due": [159, 188, 208, 235, 238, 274, 305, 315, 365, 405, 423, 427, 441, 494, 573, 574, 576, 578, 580, 581, 596, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 707, 736, 753, 754, 756, 757, 800, 801, 813, 831, 852, 861, 879, 926, 980, 1023, 1045, 1049, 1063, 1326], "overflow": [159, 305, 365, 380, 381, 673, 696, 708, 813, 831, 926, 980, 1000, 1001, 1259, 1282, 1294, 1326], "u8": [159, 260, 261, 272, 305, 605, 724, 813, 831, 926, 931, 1195, 1301, 1326, 1353], "tempor": [159, 188, 189, 191, 192, 205, 235, 237, 238, 259, 305, 370, 479, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 825, 831, 852, 853, 855, 856, 879, 926, 931, 990, 1097, 1116, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326, 1344, 1349], "to_dict": [159, 305, 831, 926, 931], "as_seri": [159, 258, 305, 831, 926, 931, 1007, 1189, 1326], "greater": [160, 208, 305, 468, 470, 479, 642, 671, 672, 683, 701, 813, 861, 926, 1097, 1229, 1257, 1258, 1269, 1287, 1326], "cheap": [160, 161, 242, 279, 305, 832, 833, 882, 902, 926, 989, 993, 1326], "deepcopi": [160, 305, 832, 926, 989, 1326], "13": [160, 161, 165, 175, 176, 185, 198, 209, 221, 235, 278, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 315, 395, 401, 402, 404, 407, 408, 411, 412, 414, 415, 416, 417, 421, 422, 428, 429, 431, 561, 563, 610, 695, 738, 744, 747, 755, 762, 797, 799, 802, 813, 832, 833, 838, 846, 847, 863, 879, 901, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 1013, 1022, 1026, 1033, 1036, 1039, 1044, 1049, 1051, 1063, 1064, 1104, 1107, 1114, 1116, 1171, 1281, 1326], "appl": [162, 196, 207, 230, 233, 258, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 305, 364, 607, 655, 684, 716, 813, 860, 877, 909, 910, 912, 913, 915, 916, 917, 918, 919, 920, 921, 926, 1241, 1270, 1340, 1346], "banana": [162, 258, 287, 289, 292, 293, 294, 295, 296, 297, 298, 305, 364, 607, 655, 684, 716, 813, 910, 912, 915, 916, 917, 918, 919, 920, 921, 1346], "orang": [162, 286, 287, 289, 290, 292, 293, 295, 297, 298, 305, 364, 716, 813, 909, 910, 912, 913, 915, 916, 918, 920, 921, 1346], "pairwis": [163, 305], "pearson": [163, 305, 495, 642, 740, 813, 1120, 1229, 1326], "correl": [163, 305, 740, 789], "coeffici": [163, 305, 642, 813, 1229, 1326], "corrcoef": [163, 305], "percentil": [165, 305, 838, 926, 1008, 1326], "interpol": [165, 228, 297, 305, 458, 478, 555, 599, 621, 622, 786, 813, 838, 876, 920, 926, 1008, 1096, 1190, 1206, 1326], "rollinginterpolationmethod": [165, 228, 297, 305, 599, 621, 622, 786, 813, 838, 876, 920, 926, 1008, 1190, 1206, 1326], "summari": [165, 305, 838, 926, 1008, 1326, 1340], "midpoint": [165, 228, 297, 305, 599, 621, 622, 786, 813, 838, 876, 920, 926, 1008, 1190, 1206, 1326], "linear": [165, 199, 228, 297, 305, 477, 478, 504, 555, 599, 621, 622, 738, 739, 786, 813, 838, 859, 876, 920, 926, 1008, 1095, 1096, 1127, 1190, 1206, 1326], "deem": [165, 305, 838, 926], "programmat": [165, 305, 838, 926], "versu": [165, 305, 838, 926], "explor": [165, 305, 838, 926], "glimps": [165, 194, 305], "median": [165, 226, 305, 458, 617, 618, 813, 838, 903, 926, 1008, 1204, 1326, 1344], "null_count": [165, 169, 305, 387, 813, 838, 926, 1006, 1008, 1326], "266667": [165, 305, 838, 926], "666667": [165, 199, 275, 293, 305, 449, 778, 813, 838, 859, 899, 916, 926, 1072, 1326], "std": [165, 305, 624, 625, 813, 838, 926, 1008, 1208, 1326], "101514": [165, 305, 838, 926], "071068": [165, 305, 838, 926], "36": [165, 305, 838, 926], "41": [165, 305, 626, 627, 813, 838, 926, 1341, 1353], "34": [165, 305, 691, 838, 926, 1277], "43": [165, 235, 305, 381, 610, 626, 627, 813, 838, 879, 926], "70": [165, 305, 724, 813, 838, 926, 1120, 1326], "88": [165, 305, 838, 926], "90": [165, 305, 695, 838, 926, 1281, 1348], "49": [165, 305, 838, 926, 931, 1345], "33": [165, 218, 305, 630, 813, 838, 871, 926, 1206, 1326], "subset": [169, 222, 270, 305, 841, 896, 926], "preserv": [169, 177, 187, 190, 207, 211, 263, 264, 305, 393, 394, 395, 419, 420, 459, 509, 639, 656, 813, 841, 848, 860, 926, 1011, 1012, 1013, 1082, 1132, 1226, 1242, 1307, 1326], "all_horizont": [169, 305, 725, 841, 926], "is_nul": [169, 305, 813, 841, 926, 1326], "null_equ": [171, 181, 305, 1070, 1216, 1326], "sizeunit": [172, 305, 1071, 1326], "heap": [172, 305, 813, 930, 1071, 1326], "bitmap": [172, 305, 1071, 1326], "therefor": [172, 305, 552, 803, 813, 1071, 1326], "structarrai": [172, 305, 1071, 1326], "constant": [172, 235, 305, 396, 450, 456, 813, 879, 926, 1014, 1071, 1073, 1079, 1326], "unchang": [172, 305, 551, 605, 714, 813, 865, 866, 908, 914, 926, 1071, 1170, 1195, 1308, 1326], "capac": [172, 248, 305, 1071, 1224, 1326], "ffi": [172, 305, 1071, 1326], "kb": [172, 305, 1071, 1326], "mb": [172, 305, 1071, 1326], "gb": [172, 305, 1071, 1326], "revers": [172, 305, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 549, 574, 576, 578, 596, 707, 743, 813, 926, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1326, 1342, 1344], "1_000_000": [172, 305, 1071, 1326], "17888890": [172, 305], "0601749420166": [172, 305], "more_column": [173, 244, 271, 305, 453, 760, 813, 844, 884, 897, 926, 931], "long": [173, 217, 272, 305, 844, 870, 926], "letter": [173, 288, 299, 305, 453, 650, 658, 676, 760, 813, 844, 911, 922, 926, 931, 1236, 1244, 1262, 1346], "onlin": [174, 305, 1078, 1326], "rerun": [174, 305, 1078, 1326], "finish": [174, 305, 1078, 1326], "conveni": [174, 267, 305, 937, 1078, 1326], "Not": [175, 305, 457, 488, 490, 813, 846, 926, 1080, 1326], "fillnullstrategi": [176, 305, 458, 813, 847, 926, 1081, 1326], "matches_supertyp": [176, 305, 847, 926], "forward": [176, 208, 246, 305, 349, 395, 419, 458, 464, 532, 635, 813, 847, 861, 885, 926, 966, 1013, 1041, 1081, 1155, 1221, 1326], "consecut": [176, 305, 357, 458, 464, 648, 813, 847, 926, 1081, 1234, 1326], "fill_nan": [176, 305, 458, 813, 847, 926, 1081, 1326], "intoexprcolumn": [177, 305, 337, 341, 342, 349, 363, 364, 370, 371, 372, 427, 456, 459, 505, 514, 517, 527, 532, 591, 595, 632, 635, 657, 661, 664, 680, 686, 687, 688, 692, 696, 701, 715, 716, 731, 736, 753, 754, 756, 757, 768, 769, 800, 801, 803, 813, 848, 885, 926, 954, 958, 959, 966, 990, 991, 992, 1049, 1079, 1128, 1137, 1140, 1150, 1155, 1185, 1243, 1247, 1250, 1266, 1272, 1273, 1274, 1278, 1287, 1326], "constraint": [177, 305, 459, 494, 573, 574, 576, 578, 580, 581, 596, 707, 803, 813, 848, 926, 931], "discard": [177, 305, 459, 813, 848, 926, 1082, 1326], "behav": [177, 305, 459, 552, 687, 688, 813, 848, 926], "eq": [177, 305, 448, 459, 813, 848, 926, 1326], "implicitli": [177, 305, 459, 803, 813, 848, 926], "get_column_index": [178, 305], "reduct": [180, 305], "supercast": [180, 305], "parent": [180, 305], "arithmet": [180, 305], "zip_with": [180, 305, 1326], "foo11": [180, 305], "bar22": [180, 305], "nth": [182, 256, 305, 467, 683, 711, 813, 850, 894, 926, 1086, 1269, 1297, 1326], "th": [182, 256, 305, 467, 514, 528, 642, 661, 692, 711, 813, 850, 894, 926, 1086, 1137, 1151, 1229, 1247, 1278, 1297, 1326], "retriev": [183, 262, 305, 335, 336, 502, 503, 702, 784, 952, 953, 1125, 1126, 1288, 1304, 1326, 1340], "max_items_per_column": [186, 305], "max_colname_length": [186, 305], "return_as_str": [186, 305, 565], "preview": [186, 305], "few": [186, 305], "exce": [186, 305], "ellipsi": [186, 305], "head": [186, 210, 255, 305, 319, 499, 590, 813, 864, 926, 1122, 1295, 1326], "tail": [186, 194, 305, 319, 642, 813, 926, 1091, 1229, 1326], "usd": [186, 305, 1353], "eur": [186, 305, 1353], "named_bi": [187, 305, 851, 926], "groupbi": [187, 226, 305, 320, 552, 729, 775, 813, 926], "consist": [187, 190, 224, 263, 305, 691, 851, 854, 926, 931, 937, 1078, 1277, 1306, 1326], "agg": [187, 188, 191, 226, 235, 305, 314, 364, 459, 461, 466, 469, 550, 552, 564, 590, 644, 645, 716, 723, 775, 813, 834, 835, 843, 845, 851, 852, 853, 855, 856, 875, 879, 887, 926, 931], "Or": [187, 188, 208, 235, 250, 274, 283, 305, 450, 590, 610, 645, 753, 754, 756, 757, 800, 801, 803, 813, 851, 852, 861, 879, 889, 906, 926, 1073, 1326], "index_column": [188, 189, 191, 192, 235, 305, 610, 813, 852, 853, 855, 856, 879, 926], "timedelta": [188, 189, 191, 192, 208, 235, 274, 305, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 861, 879, 926, 931, 1029, 1037, 1045, 1049, 1063, 1073, 1180, 1181, 1233, 1315, 1326], "include_boundari": [188, 191, 305, 852, 855, 926], "closedinterv": [188, 189, 191, 192, 235, 305, 479, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 879, 926, 1097, 1326], "label": [188, 262, 267, 305, 388, 598, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 813, 852, 875, 926, 1007, 1189, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "group_bi": [188, 190, 222, 226, 235, 274, 304, 305, 314, 364, 459, 461, 466, 469, 550, 552, 590, 644, 645, 716, 723, 775, 813, 834, 835, 843, 845, 852, 854, 875, 879, 887, 925, 926, 931], "start_bi": [188, 191, 305, 852, 855, 926], "startbi": [188, 191, 305, 852, 855, 926], "check_sort": [188, 189, 191, 192, 235, 305, 450, 610, 813, 852, 853, 855, 856, 879, 926, 1073, 1326], "dynamicgroupbi": [188, 191, 305], "member": [188, 305, 852, 926, 1105, 1326], "earliest": [188, 191, 305, 426, 427, 441, 691, 694, 755, 852, 855, 926, 1048, 1049, 1063, 1277, 1280], "datapoint": [188, 191, 305, 852, 855, 926], "descript": [188, 305, 852, 926, 1340, 1341, 1342, 1343, 1345, 1347, 1351, 1352], "ascend": [188, 189, 191, 192, 235, 305, 610, 813, 852, 853, 855, 856, 879, 926], "dynam": [188, 191, 305, 354, 540, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 852, 855, 926, 930, 971, 1163, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "matter": [188, 189, 191, 192, 205, 235, 237, 238, 259, 305, 610, 687, 688, 813, 852, 853, 855, 856, 879, 926], "interv": [188, 189, 191, 192, 235, 274, 305, 388, 427, 441, 474, 479, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 853, 855, 856, 879, 926, 1007, 1021, 1024, 1025, 1032, 1035, 1038, 1040, 1043, 1046, 1047, 1049, 1054, 1063, 1064, 1092, 1097, 1189, 1326], "_lower_boundari": [188, 305, 852, 926], "_upper_boundari": [188, 305, 852, 926], "impact": [188, 191, 305, 852, 855, 926, 1334, 1350], "harder": [188, 191, 305, 852, 855, 926], "inclus": [188, 189, 191, 192, 235, 305, 479, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 681, 682, 731, 753, 754, 756, 757, 768, 769, 800, 801, 813, 852, 853, 855, 856, 879, 926, 1097, 1267, 1268, 1326], "boundari": [188, 305, 370, 371, 372, 474, 813, 852, 926, 990, 991, 992, 1092, 1326], "mondai": [188, 191, 305, 395, 441, 443, 736, 852, 855, 926, 1013, 1063, 1065], "tuesdai": [188, 191, 305, 852, 855, 926], "wednesdai": [188, 191, 305, 430, 433, 852, 855, 926, 1052, 1055], "thursdai": [188, 191, 305, 395, 736, 852, 855, 926, 1013], "fridai": [188, 191, 305, 395, 430, 433, 736, 852, 855, 926, 1013, 1052, 1055], "saturdai": [188, 191, 305, 852, 855, 926], "sundai": [188, 191, 305, 395, 430, 433, 443, 736, 852, 855, 926, 1013, 1052, 1055, 1065], "weekli": [188, 191, 305, 441, 852, 855, 926, 1063], "week": [188, 191, 208, 235, 274, 305, 395, 423, 427, 441, 443, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 736, 753, 754, 756, 757, 758, 800, 801, 813, 852, 855, 861, 879, 926, 931, 1013, 1045, 1049, 1063, 1065, 1073, 1326, 1347], "shift": [188, 191, 247, 305, 357, 391, 464, 508, 591, 636, 738, 813, 852, 855, 886, 926, 1009, 1131, 1185, 1222, 1326], "front": [188, 191, 305, 852, 855, 926], "sorted": [188, 189, 191, 192, 235, 305, 450, 813, 852, 853, 855, 856, 879, 926], "verifi": [188, 189, 191, 192, 235, 305, 450, 813, 852, 853, 855, 856, 879, 926], "incorrect": [188, 189, 191, 192, 235, 305, 444, 450, 550, 610, 634, 813, 852, 853, 855, 856, 879, 908, 914, 926, 1066, 1073, 1219, 1326], "quick": [188, 235, 305, 450, 809, 813, 852, 879, 926, 1008, 1326, 1353], "safe": [188, 235, 305, 427, 441, 450, 603, 614, 616, 618, 620, 622, 625, 627, 629, 813, 852, 879, 926, 1049, 1063, 1193, 1280, 1305, 1326], "roll": [188, 189, 192, 305, 395, 419, 420, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 738, 789, 790, 813, 852, 853, 856, 926, 1013, 1041, 1042, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1326], "re": [188, 204, 305, 419, 420, 430, 433, 852, 926, 1041, 1042, 1052, 1055, 1350], "1d": [188, 208, 235, 274, 305, 397, 423, 427, 435, 438, 441, 444, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 772, 800, 801, 813, 852, 861, 879, 926, 931, 1015, 1024, 1031, 1045, 1049, 1054, 1057, 1060, 1063, 1073, 1326], "set_index": [188, 305, 852, 926], "resampl": [188, 305, 852, 926], "unlik": [188, 305, 852, 926], "evenli": [188, 305, 852, 926], "upsampl": [188, 305, 852, 926], "1n": [188, 208, 235, 274, 305, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063, 1073, 1326], "1u": [188, 208, 235, 274, 305, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063, 1073, 1326], "1m": [188, 208, 235, 274, 305, 423, 427, 440, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1058, 1059, 1061, 1062, 1063, 1073, 1326], "millisecond": [188, 208, 235, 274, 305, 407, 416, 423, 427, 437, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 931, 1045, 1049, 1059, 1063, 1073, 1326, 1347], "minut": [188, 208, 235, 274, 305, 407, 411, 414, 421, 423, 427, 428, 438, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 755, 756, 757, 758, 799, 800, 801, 813, 852, 861, 879, 926, 931, 1045, 1049, 1060, 1063, 1073, 1326, 1347], "1h": [188, 208, 235, 274, 305, 405, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1023, 1025, 1045, 1049, 1063, 1073, 1326], "hour": [188, 208, 235, 274, 305, 411, 414, 416, 421, 423, 427, 428, 435, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 755, 756, 757, 758, 799, 800, 801, 813, 852, 861, 879, 926, 931, 1045, 1049, 1057, 1063, 1073, 1326, 1347], "1w": [188, 208, 235, 274, 305, 423, 427, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063, 1073, 1326], "1mo": [188, 208, 235, 274, 305, 400, 419, 420, 423, 426, 427, 434, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1018, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1056, 1063, 1064, 1073, 1326], "month": [188, 208, 235, 274, 305, 403, 419, 420, 423, 427, 430, 433, 441, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 754, 755, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 1021, 1041, 1042, 1045, 1049, 1052, 1055, 1063, 1073, 1326, 1347], "1q": [188, 208, 235, 274, 305, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063], "quarter": [188, 208, 235, 274, 305, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063, 1347], "1y": [188, 208, 235, 274, 305, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1045, 1049, 1063], "1i": [188, 235, 274, 305, 450, 610, 613, 615, 617, 619, 621, 624, 626, 628, 813, 852, 879, 926, 1073, 1326], "3d12h4m25": [188, 208, 235, 274, 305, 427, 441, 450, 610, 753, 754, 756, 757, 800, 801, 813, 852, 861, 879, 926, 1049, 1063, 1073, 1326], "correspond": [188, 208, 235, 263, 274, 305, 364, 410, 423, 427, 441, 552, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 716, 753, 754, 756, 757, 800, 801, 813, 834, 852, 861, 879, 926, 1028, 1045, 1049, 1063, 1191, 1326], "daylight": [188, 208, 235, 274, 305, 396, 405, 423, 427, 441, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 753, 754, 756, 757, 758, 800, 801, 813, 852, 861, 879, 926, 1023, 1045, 1049, 1063], "10i": [188, 305, 852, 926], "datetime_rang": [188, 305, 397, 400, 419, 420, 423, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 444, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 753, 813, 852, 926, 1014, 1015, 1018, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1041, 1042, 1043, 1045, 1048, 1049, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063], "30m": [188, 305, 427, 441, 852, 926, 1049, 1063], "eager": [188, 208, 226, 272, 305, 397, 400, 403, 406, 419, 420, 423, 424, 426, 427, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 731, 735, 753, 754, 756, 757, 764, 768, 769, 785, 788, 792, 795, 800, 801, 804, 812, 813, 852, 866, 926, 1014, 1015, 1018, 1021, 1023, 1024, 1025, 1031, 1032, 1035, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1334, 1335, 1336, 1337, 1338, 1339, 1350], "lower_bound": [188, 305, 370, 372, 479, 813, 852, 926, 990, 992, 1097, 1313, 1326], "upper_bound": [188, 305, 370, 371, 479, 540, 813, 852, 926, 990, 991, 1097, 1169, 1326], "bys": [188, 305, 852, 926], "int_rang": [188, 272, 281, 291, 305, 731, 771, 852, 866, 905, 914, 926], "2i": [188, 305, 852, 926], "3i": [188, 305, 852, 926], "a_agg_list": [188, 305, 852, 926], "rollinggroupbi": [189, 192, 235, 305], "more_bi": [190, 224, 250, 305, 645, 813, 854, 889, 926], "group_by_dynam": [191, 235, 305, 855, 879, 926], "_lower_bound": [191, 305, 855, 926], "_upper_bound": [191, 305, 855, 926], "seed_1": [193, 305, 472, 813, 1090, 1326], "seed_2": [193, 305, 472, 813, 1090, 1326], "seed_3": [193, 305, 472, 813, 1090, 1326], "hash": [193, 305, 813, 1326], "Its": [193, 305, 472, 813, 1090, 1326], "u64": [193, 281, 305, 472, 603, 813, 875, 905, 926, 931, 1090, 1193, 1326], "10783150408545073287": [193, 305], "1438741209321515184": [193, 305], "10047419486152048166": [193, 305], "2047317070637311557": [193, 305], "ab": [194, 210, 255, 278, 305, 702, 704, 813, 901, 926, 931, 1091, 1122, 1295, 1326, 1344, 1346], "in_plac": [196, 248, 276, 305, 1192, 1224, 1231, 1326], "grown": [196, 305], "insert_column": [197, 305], "baz": [198, 199, 226, 271, 305, 659, 681, 683, 761, 770, 784, 809, 859, 897, 926, 931, 1245, 1269, 1338, 1343, 1346], "intermedi": [199, 305, 859, 926, 1353], "333333": [199, 305, 494, 573, 813, 859, 926, 1185, 1210, 1326, 1341], "mask": [200, 202, 305, 359, 480, 482, 483, 486, 487, 493, 592, 593, 649, 653, 660, 813, 975, 1082, 1089, 1097, 1099, 1102, 1103, 1108, 1109, 1117, 1186, 1187, 1217, 1235, 1239, 1246, 1317, 1326], "visual": [200, 202, 305, 887, 926], "scalar": [203, 211, 236, 305, 550, 633, 661, 666, 680, 692, 729, 772, 775, 813, 930, 1119, 1215, 1247, 1252, 1266, 1278, 1326], "buffer_s": [205, 305], "fit": [205, 248, 272, 305, 637, 788, 813, 1223, 1224, 1326], "signific": [205, 211, 305, 320, 552, 631, 813, 1171, 1212, 1326], "4x": [205, 305], "materialis": [205, 206, 236, 237, 305], "rows_by_kei": [205, 237, 305], "iter_row": [206, 236, 237, 238, 305], "17_500": [206, 305], "klmnoopqrstuvwxyz": [206, 305], "__name__": [206, 305], "7500": [206, 305], "15_000": [206, 305], "record_batch": [206, 305], "to_arrow": [206, 305, 1306, 1326], "to_batch": [206, 305], "date32": [206, 305], "large_str": [206, 257, 264, 305], "15000": [206, 305], "2500": [206, 267, 305], "left_on": [207, 208, 273, 305, 860, 861, 898, 926], "right_on": [207, 208, 273, 305, 860, 861, 898, 926], "suffix": [207, 208, 241, 278, 283, 305, 315, 361, 364, 488, 490, 491, 492, 549, 557, 574, 576, 579, 580, 581, 590, 596, 607, 655, 687, 690, 716, 813, 860, 861, 881, 901, 903, 906, 926, 931, 977, 1241, 1276], "_right": [207, 208, 305, 860, 861, 926], "joinvalid": [207, 305, 860, 926], "join_nul": [207, 305, 860, 926], "coalesc": [207, 273, 305, 477, 691, 813, 860, 898, 926, 1277, 1340, 1344], "fashion": [207, 305, 843, 845, 875, 887, 926], "semi": [207, 305, 860, 926, 1340], "anti": [207, 305, 860, 914, 926, 1214, 1217, 1326, 1340], "cross": [207, 305, 860, 926, 1340], "cartesian": [207, 305, 860, 926], "many_to_mani": [207, 305, 860, 926], "one_to_on": [207, 305, 860, 926], "one_to_mani": [207, 305, 860, 926], "many_to_on": [207, 305, 860, 926], "join_asof": [207, 305, 860, 926], "other_df": [207, 305], "ham_right": [207, 305, 860, 926], "by_left": [208, 305, 861, 926], "by_right": [208, 305, 861, 926], "asofjoinstrategi": [208, 305, 861, 926], "allow_parallel": [208, 305, 860, 861, 926], "force_parallel": [208, 305, 860, 861, 926], "asof": [208, 305, 861, 926], "rather": [208, 305, 465, 550, 565, 598, 609, 701, 813, 861, 926, 1189, 1199, 1287, 1326], "asof_join": [208, 305], "distanc": [208, 305, 474, 813, 861, 926, 1092, 1326], "plan": [208, 209, 305, 390, 813, 830, 834, 839, 843, 860, 861, 883, 887, 926, 1352], "gdp": [208, 305, 861, 926], "date_rang": [208, 274, 305, 403, 406, 424, 432, 443, 1021, 1040, 1046, 1047, 1064, 1065], "2016": [208, 305, 861, 926], "4164": [208, 305, 861, 926], "4411": [208, 305, 861, 926], "4566": [208, 305, 861, 926], "4696": [208, 305, 861, 926], "4827": [208, 305], "2017": [208, 305, 861, 926], "2018": [208, 305, 426, 861, 926, 1048], "2019": [208, 305, 861, 926], "popul": [208, 305, 861, 926], "82": [208, 305, 861, 926], "66": [208, 273, 305, 626, 627, 724, 813, 861, 898, 926, 1120, 1206, 1326], "83": [208, 305, 861, 926], "quit": [208, 305], "earlier": [208, 305], "later": [208, 305, 564, 883, 926], "countri": [208, 305, 396, 1014], "gdp_date": [208, 305], "gdp2": [208, 305], "germani": [208, 305], "netherland": [208, 305], "784": [208, 305], "833": [208, 305], "914": [208, 305], "910": [208, 305, 658, 1244], "909": [208, 305], "pop2": [208, 305], "request": [209, 305], "describe_plan": [209, 305], "unoptim": [209, 305], "describe_optimized_plan": [209, 305], "show_graph": [209, 305, 926], "un": [209, 305], "graphviz": [209, 305, 887, 926], "much": [211, 272, 291, 305, 387, 513, 538, 552, 665, 666, 775, 813, 914, 1006, 1136, 1161, 1171, 1251, 1252, 1326], "intens": [211, 291, 305, 590, 813, 1171, 1326], "materi": [211, 238, 291, 305, 834, 875, 914, 926, 931, 1171, 1326], "parallelis": [211, 291, 305, 1171, 1326], "achiev": [211, 291, 305, 552, 666, 813, 1007, 1171, 1189, 1252, 1326], "black": [211, 305, 358, 359, 360, 361, 362], "arbitrarili": [211, 305], "rearrang": [211, 305], "transform": [211, 251, 305, 550, 697, 699, 700, 792, 813, 890, 926], "map_el": [211, 305, 320, 550, 724, 813, 938, 1326], "lru_cach": [211, 305, 552, 813, 1171, 1326], "column_1": [211, 269, 305, 1348], "better": [211, 262, 263, 291, 305, 552, 666, 813, 830, 914, 926, 1214, 1217, 1252, 1326], "axi": [212, 214, 217, 219, 253, 305, 732, 733, 870, 926], "max_horizont": [212, 305, 776], "null_strategi": [214, 253, 305], "nullstrategi": [214, 253, 305], "mean_horizont": [214, 305, 778], "propag": [214, 253, 305, 342, 448, 517, 582, 583, 585, 648, 739, 813, 959, 1140, 1180, 1181, 1234, 1326], "spam": [214, 305, 658, 1244], "ignore_nul": [215, 254, 305, 316, 318, 342, 449, 451, 452, 517, 648, 725, 727, 739, 813, 935, 936, 959, 1072, 1074, 1075, 1140, 1234, 1316, 1326], "id_var": [217, 305, 870, 926], "value_var": [217, 305, 870, 926], "variable_nam": [217, 305, 870, 926], "value_nam": [217, 305, 870, 926], "unpivot": [217, 305, 870, 926], "massag": [217, 305, 870, 926], "measur": [217, 305, 870, 926], "df0": [218, 305, 871, 926, 1339], "steve": [218, 305, 871, 926], "elis": [218, 305, 871, 926], "ag": [218, 305, 871, 926, 1351], "anna": [218, 305, 871, 926], "megan": [218, 305, 871, 926], "thoma": [218, 305, 871, 926], "min_horizont": [219, 305, 781, 791], "what": [222, 305, 308, 395, 550, 650, 676, 813, 1013, 1236, 1262, 1316, 1326, 1330], "pack": [222, 305], "expr_unique_subset": [222, 305], "df_nuniqu": [222, 305], "df_agg_nuniqu": [222, 305], "include_kei": [224, 238, 305], "offer": [225, 305, 594, 813, 874, 926, 1347], "cast_str_to_int": [225, 305, 874, 926], "col_nam": [225, 305, 552, 803, 813, 874, 926], "tdf": [225, 305, 874, 926], "aggregate_funct": [226, 305, 931], "pivotagg": [226, 305], "sort_column": [226, 305], "section": [226, 305, 649, 657, 658, 660, 674, 675, 753, 754, 756, 757, 800, 801, 1235, 1243, 1244, 1246, 1260, 1261], "predefin": [226, 305], "predict": [226, 229, 274, 305], "transpos": [226, 305], "discoveri": [226, 305], "col3": [226, 305, 1353], "tanh": [226, 305, 813, 1326], "998347": [226, 305], "964028": [226, 305], "999954": [226, 305], "unique_column_valu": [226, 305], "ix": [226, 305], "column_nam": [230, 231, 269, 305, 877, 926], "coo": [230, 305, 877, 926], "car": [230, 258, 305, 607, 813, 877, 926], "cam": [230, 305, 877, 926], "replace_column": [232, 305], "t_0": [235, 305, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 879, 926], "t_1": [235, 305, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 879, 926, 1073, 1326], "t_n": [235, 305, 450, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 879, 926, 1073, 1326], "strptime": [235, 305, 426, 610, 813, 879, 926, 1048], "set_sort": [235, 274, 305, 610, 813, 861, 879, 926, 1326], "2d": [235, 262, 263, 305, 423, 610, 772, 813, 879, 926, 1014, 1021], "sum_a": [235, 305, 610, 813, 879, 926], "min_a": [235, 305, 610, 813, 879, 926], "max_a": [235, 305, 610, 813, 879, 926], "by_pred": [236, 305], "accord": [236, 305, 551, 598, 753, 754, 756, 757, 800, 801, 813, 1028, 1189, 1326], "mutual": [236, 305], "exclus": [236, 305, 724, 731, 768, 769, 813], "clariti": [236, 305], "toomanyrowsreturnederror": [236, 305], "norowsreturnederror": [236, 305], "inherit": [236, 305, 390, 813, 839, 926], "rowserror": [236, 305], "littl": [237, 305], "peak": [237, 305, 592, 593, 813, 1186, 1187, 1326], "flat": [238, 305, 511, 606, 813, 1134, 1196, 1326], "high": [238, 305, 598, 813, 825, 1189, 1326], "cost": [238, 305], "reoconstruct": [238, 305], "q": [238, 305, 795, 1337], "defaultdict": [238, 305], "assum": [238, 305, 865, 866, 908, 914, 926, 1347], "with_replac": [239, 305, 527, 632, 813, 1150, 1213, 1326], "ordereddict": [240, 305, 575, 577, 579, 795, 880, 926], "named_expr": [241, 242, 278, 279, 305, 705, 791, 795, 881, 882, 901, 902, 926], "threshold": [241, 305, 881, 926], "set_auto_structifi": [241, 278, 305, 881, 901, 926], "auto_structifi": [241, 278, 305, 881, 901, 926], "is_odd": [241, 305, 881, 926, 931], "_is_odd": [241, 305, 881, 926], "bit_set": [243, 305, 883, 926], "fill_valu": [246, 247, 272, 305, 635, 636, 813, 885, 886, 926, 1221, 1222, 1326], "opposit": [246, 305, 349, 532, 635, 813, 885, 926, 966, 1155, 1221, 1326], "lag": [246, 305, 349, 532, 635, 738, 813, 885, 926, 966, 1155, 1221, 1326], "shrink": [248, 305, 637, 813, 1223, 1224, 1326], "hold": [248, 263, 305, 1306, 1326], "multithread": [250, 305, 363, 364, 645, 715, 716, 734, 813, 829, 889, 895, 926, 967, 1157, 1231, 1326], "although": [251, 305, 792, 890, 926], "sqlcontext": [251, 305, 792, 890, 926, 1349], "registr": [251, 305, 792, 825, 890, 926, 1339], "1999": [251, 305, 423, 931, 1045], "2010": [251, 305, 931], "2077": [251, 305, 931, 1347], "alias": [251, 305, 558, 890, 926], "AS": [251, 305, 792, 793, 890, 926, 1334, 1340, 1341, 1342, 1343, 1345, 1346, 1347, 1348, 1350, 1352], "a_is_even": [251, 305, 792, 890, 926], "concat_w": [251, 305, 792, 890, 926, 1344], "b_b": [251, 305], "float4": [251, 305, 792, 890, 926], "ddof": [252, 275, 305, 351, 356, 535, 542, 624, 625, 628, 629, 647, 722, 740, 742, 789, 790, 794, 802, 813, 891, 899, 926, 968, 973, 1158, 1165, 1208, 1210, 1233, 1315, 1326], "deviat": [252, 305, 451, 624, 625, 647, 794, 813, 891, 926, 1074, 1233, 1326, 1341], "degre": [252, 275, 305, 535, 542, 600, 624, 625, 628, 629, 647, 722, 733, 740, 742, 789, 790, 794, 802, 813, 891, 899, 926, 1208, 1210, 1233, 1315, 1326, 1344], "freedom": [252, 275, 305, 535, 542, 624, 625, 628, 629, 647, 722, 740, 742, 789, 790, 794, 802, 813, 891, 899, 926, 1208, 1210, 1233, 1315, 1326], "divisor": [252, 275, 305, 535, 542, 624, 625, 628, 629, 647, 722, 740, 742, 789, 790, 794, 802, 813, 891, 899, 926, 1208, 1210, 1233, 1315, 1326], "816497": [252, 305], "gather_everi": [256, 305, 711, 813, 894, 926, 1297, 1326], "mostli": [257, 305, 459, 813], "categoricaltyp": [257, 305], "fruit": [258, 305, 607, 655, 684, 692, 813, 1241, 1270, 1278], "beetl": [258, 305, 607, 813], "audi": [258, 305, 607, 813], "28": [258, 263, 305, 313, 426, 444, 813, 1048, 1066, 1306, 1326, 1347, 1352, 1353], "300": [258, 305, 471, 588, 813, 931, 1202, 1203, 1205, 1326, 1343], "drop_first": [260, 305, 1301, 1326], "dummi": [260, 305, 1301, 1326], "foo_1": [260, 305], "foo_2": [260, 305], "bar_3": [260, 305], "bar_4": [260, 305], "ham_a": [260, 305], "ham_b": [260, 305], "instantiat": [261, 305, 1303, 1326], "from_repr": [261, 305, 1303, 1326], "df_from_str_repr": [261, 305], "eval": [261, 305, 550, 552, 759, 813, 1171, 1303, 1326], "return_typ": [262, 267, 305], "jaxexporttyp": [262, 305], "devic": [262, 305, 1304, 1326], "jax": [262, 305, 1304, 1326], "indexord": [262, 263, 305], "fortran": [262, 263, 305], "gpu": [262, 305, 1304, 1326], "tpu": [262, 305, 1304, 1326], "design": [262, 267, 305], "32bit": [262, 305], "jax_enable_x64": [262, 305], "startup": [262, 305], "to_dummi": [262, 267, 305, 1326], "to_numpi": [262, 267, 305, 550, 813, 1326], "to_torch": [262, 305, 1326], "lbl": [262, 267, 305], "feat1": [262, 267, 305], "feat2": [262, 267, 305], "gpudevic": [262, 305], "process_index": [262, 305], "gpu_devic": [262, 305], "downstream": [263, 305, 634, 813, 1219, 1326], "applic": [263, 305, 552, 613, 615, 617, 619, 621, 624, 626, 628, 813], "prevent": [263, 305, 315, 380, 381, 494, 573, 708, 813, 926, 1000, 1001, 1294, 1326], "reshap": [263, 305, 511, 813, 1134, 1326], "immut": [263, 305, 1306, 1326], "arr": [263, 305, 805, 1306, 1318, 1326], "writeabl": [263, 305, 1306, 1326], "runtimeerror": [263, 305, 1306, 1326], "c_contigu": [263, 305], "u1": [263, 305], "f4": [263, 305], "use_pyarrow_extension_arrai": [264, 305, 1307, 1326], "extens": [264, 305, 1307, 1326], "na": [264, 305, 684, 1307, 1326], "doubl": [264, 305], "four": [266, 305], "five": [266, 305, 1353], "torchexporttyp": [267, 305], "tensor": [267, 305, 1309, 1326], "polarsdataset": [267, 305], "pytorch": [267, 305, 1309, 1326], "tensordataset": [267, 305], "label_column": [267, 305], "to_jax": [267, 305, 1326], "0000": [267, 305, 1309, 1326, 1353], "5000": [267, 305, 1309, 1326], "opt": [267, 305], "half": [267, 305, 427, 449, 450, 451, 452, 813, 1049, 1072, 1073, 1074, 1075, 1326], "experiment": [267, 305], "model": [267, 305], "float16": [267, 305], "dataload": [267, 305], "util": [267, 305, 764, 845, 926, 930], "dl": [267, 305], "scikit": [267, 305], "learn": [267, 305], "sklearn": [267, 305], "fetch_california_h": [267, 305], "hous": [267, 305], "feature_nam": [267, 305], "train": [267, 305], "loader": [267, 305], "bottom_k": [268, 305, 364, 715, 716, 813, 895, 926, 1310, 1326], "header_nam": [269, 305], "perhap": [269, 305], "column_2": [269, 305, 1348], "name_gener": [269, 305], "base_nam": [269, 305], "my_column_": [269, 305], "my_column_0": [269, 305], "my_column_1": [269, 305], "my_column_2": [269, 305], "j": [269, 305], "new_id": [269, 305], "uniquekeepstrategi": [270, 305, 896, 926], "kept": [270, 305, 896, 926], "decompos": [271, 305, 897, 926], "t_a": [271, 305, 897, 926], "t_b": [271, 305, 897, 926], "t_c": [271, 305, 897, 926], "t_d": [271, 305, 897, 926], "womp": [271, 305, 897, 926], "t_": [271, 305, 450, 813, 897, 926, 1073, 1326], "t_struct": [271, 305, 897, 926], "step": [272, 305, 463, 731, 768, 769, 813], "unstackdirect": [272, 305], "pivot": [272, 305, 931], "ascii_uppercas": [272, 305], "h": [272, 305, 313, 430, 433, 637, 674, 675, 691, 694, 698, 813, 1260, 1261, 1277, 1280, 1284], "x_0": [272, 305, 449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "x_1": [272, 305, 450, 813, 1073, 1326], "y_0": [272, 305, 449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "y_1": [272, 305], "z_0": [272, 305], "z_1": [272, 305], "include_nul": [273, 305, 898, 926], "implicit": [273, 305, 898, 926], "syntact": [273, 305, 605, 725, 727, 730, 741, 743, 746, 760, 765, 766, 767, 776, 778, 780, 781, 783, 785, 786, 791, 794, 796, 798, 802, 804, 813, 898, 926, 1195, 1232, 1326], "sugar": [273, 305, 605, 725, 727, 730, 741, 743, 746, 760, 765, 766, 767, 776, 778, 780, 781, 783, 785, 786, 791, 794, 796, 798, 802, 804, 813, 898, 926, 1195, 1232, 1326], "400": [273, 305, 436, 437, 439, 898, 926, 1202, 1203, 1205, 1326, 1343], "600": [273, 305, 436, 437, 439, 898, 926, 931], "700": [273, 305, 898, 926], "new_df": [273, 305, 898, 926], "time_column": [274, 305], "frequenc": [274, 305], "chain": [274, 305, 427, 441, 494, 573, 574, 576, 578, 580, 581, 596, 707, 803, 813, 1049, 1063], "offset_bi": [274, 305, 427, 441, 758, 1049, 1063], "forward_fil": [274, 305, 357, 378, 381, 635, 813], "varianc": [275, 305, 452, 495, 628, 629, 722, 802, 813, 899, 926, 1075, 1120, 1210, 1315, 1326, 1344], "grow": [276, 305], "not_": [278, 305, 489, 813, 901, 926, 931, 1326], "not_c": [278, 305, 901, 926], "52": [278, 305, 442, 630, 813, 861, 901, 926], "diff": [278, 305, 434, 435, 436, 437, 438, 439, 440, 528, 813, 901, 926, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1151, 1326], "_diff": [278, 305, 901, 926], "row_nr": [280, 305, 904, 926], "1001": [281, 305, 905, 926], "1002": [281, 305, 905, 926], "named_agg": [283, 906], "_sum": [283, 906], "_mean_squar": [283, 906], "b_sum": [283, 906], "c_mean_squar": [283, 906], "sub": [285, 291, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 356, 517, 525, 813, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 968, 969, 973, 1140, 1148], "map_group": [285, 729, 908], "toward": [286, 498, 519, 743, 813, 909, 1121, 1142, 1326], "nr": [288, 299, 911, 922], "triangl": [291, 914], "group_df": [291, 914], "maxim": [292, 328, 813, 915, 945, 1326], "833333": [293, 916], "minim": [295, 329, 336, 503, 637, 645, 813, 918, 946, 953, 1126, 1175, 1223, 1326], "overview": [305, 813, 825, 926, 1326, 1349, 1353], "frameinittyp": [305, 926], "entri": [305, 926, 1350], "workaround": 305, "pola": 305, "2846": 305, "df4": 305, "df5": 305, "df6": 305, "approx_n_uniqu": [305, 813, 926], "corr": 305, "deseri": [305, 465, 564, 813, 883, 926], "drop_in_plac": 305, "drop_nul": [305, 393, 813, 926, 1011, 1326], "estimated_s": [305, 1326], "explod": [305, 364, 461, 590, 606, 716, 813, 926, 930, 1196, 1326, 1342], "find_idx_by_nam": 305, "fold": [305, 562, 737, 744, 745, 748, 749, 787], "frame_equ": 305, "group_by_rol": [305, 926], "groupby_dynam": [305, 926], "groupby_rol": [305, 926], "hash_row": 305, "insert_at_idx": 305, "is_dupl": [305, 813, 1326], "is_empti": [305, 1326], "is_uniqu": [305, 813, 1326], "iter_column": 305, "iter_slic": 305, "melt": [305, 926], "merge_sort": [305, 926], "n_chunk": [305, 937, 1078, 1192, 1326], "n_uniqu": [305, 321, 813, 1326], "pipe": [305, 813, 926], "plot": [305, 875, 887, 926, 1326], "hvplottabularpolar": [305, 1326], "defer": [305, 308, 1326, 1330], "galleri": [305, 308, 1326, 1330], "scatter": [305, 308, 1218, 1326], "speci": [305, 308], "setosa": [305, 308], "versicolor": [305, 308], "stock_1": [305, 308], "stock_2": [305, 308], "quantil": [305, 598, 621, 622, 813, 926, 1189, 1206, 1326], "replace_at_idx": 305, "select_seq": [305, 926], "shift_and_fil": [305, 813, 926, 1326], "shrink_to_fit": [305, 1326], "take_everi": [305, 813, 926, 1326], "to_panda": [305, 1326], "to_struct": [305, 658], "unnest": [305, 388, 598, 608, 658, 659, 682, 683, 704, 705, 721, 813, 926, 971, 1007, 1163, 1189, 1198, 1268, 1269, 1326, 1344, 1349], "unstack": 305, "with_columns_seq": [305, 926], "with_row_count": [305, 926], "write_avro": 305, "write_databas": 305, "write_delta": 305, "write_excel": 305, "write_ipc_stream": 305, "write_json": 305, "write_parquet": 305, "cum_prod": [313, 385, 813, 1004, 1326], "ghi": [313, 658, 813, 931, 1244], "94": [314, 813], "to_uppercas": [315, 580, 659, 813], "confus": [316, 488, 490, 676, 813], "kleen": [316, 318, 725, 726, 727, 728, 813, 935, 936, 1326], "bitwis": [317, 589, 724, 725, 726, 727, 728, 813], "upcast": [319, 813], "skip_nul": [320, 552, 813, 938, 1171, 1326], "pass_nam": [320, 552, 813], "mapelementsstrategi": [320, 552, 813], "thread_loc": [320, 552, 813], "unknown": [320, 657, 772, 813, 1243], "alpha": [320, 449, 451, 452, 813, 843, 845, 875, 887, 926, 931, 1072, 1074, 1075, 1326], "stage": [320, 813], "code": [320, 358, 359, 360, 361, 362, 390, 552, 634, 813, 839, 845, 863, 926, 1219, 1326], "gil": [320, 552, 813], "approx": [321, 813], "1005": [321, 813], "invers": [322, 323, 324, 325, 326, 327, 813, 939, 940, 941, 942, 943, 944, 1306, 1326, 1348], "cosin": [322, 323, 373, 374, 550, 813, 939, 940, 994, 995, 1326, 1348], "570796": [322, 324, 813, 939, 941, 1326, 1348], "hyperbol": [323, 325, 327, 374, 641, 713, 813, 940, 942, 944, 995, 1228, 1299, 1326], "sine": [324, 325, 550, 640, 641, 813, 941, 942, 1227, 1228, 1326, 1348], "881374": [325, 813, 942, 1326], "tangent": [326, 327, 712, 713, 813, 943, 944, 1298, 1299, 1326, 1348], "785398": [326, 732, 733, 813, 943, 1326, 1348], "rank": [330, 510, 734, 740, 759, 813, 947, 1133, 1326], "arg_wher": [331, 813], "subarrai": [333, 334, 950, 951], "membership": [337, 505, 954, 1128], "number_of_two": [338, 507], "null_on_oob": [341, 513, 515, 538, 958, 1136, 1138, 1161], "sublist": [341, 502, 503, 505, 508, 512, 513, 514, 515, 516, 517, 518, 528, 533, 537, 538, 540, 958, 1105, 1125, 1126, 1128, 1131, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1151, 1156, 1160, 1161, 1163, 1326], "x_y": [342, 517], "707107": [351, 451, 624, 625, 813, 968, 1074, 1326], "i8": [353, 354, 403, 407, 411, 414, 416, 418, 421, 424, 425, 428, 442, 443, 539, 637, 785, 788, 804, 813, 970, 971, 1009, 1021, 1025, 1038, 1040, 1047, 1050, 1064, 1065, 1162, 1197, 1223, 1313, 1326, 1347], "field_0": [354, 540, 971, 1163], "field_1": [354, 540, 971, 1163], "field_n": [354, 540, 971, 1163], "n0": [354, 540], "n1": [354, 540], "c1": 354, "c2": 354, "c3": 354, "seen": [357, 464, 813], "substr": [358, 361, 362, 649, 655, 660, 674, 675, 680, 681, 682, 683, 684, 931, 974, 977, 978, 1235, 1241, 1246, 1260, 1261, 1266, 1267, 1268, 1269, 1270, 1344], "ends_with": [358, 362, 649, 684, 931, 1270, 1344], "yellow": [358, 359, 360, 361, 362], "x00": [358, 359, 360, 361, 362, 653, 974, 975, 976, 977, 978, 1239], "xff": [358, 359, 360, 361, 362, 653, 974, 975, 976, 977, 978, 1239], "contains_with_lit": 358, "contains_with_expr": 358, "transferencod": [359, 360, 653, 654, 975, 976, 1239, 1240], "hex": [359, 360, 653, 654, 696, 975, 976, 1239, 1240, 1282], "base64": [359, 360, 653, 654, 975, 976, 1239, 1240], "000000": [359, 360, 653, 975, 976, 1239], "ffff00": [359, 360, 653, 975, 976, 1239], "0000ff": [359, 360, 653, 975, 976, 1239], "anywher": [361, 362, 691, 693, 694, 1277, 1279, 1280], "ends_with_lit": 361, "ends_with_expr": 361, "starts_with_lit": 362, "starts_with_expr": 362, "top_k_bi": [363, 364, 715, 813], "bottom_k_bi": [363, 715, 716, 813], "_btm_by_a": [364, 813], "_btm_by_b": [364, 813], "a_btm_by_a": [364, 813], "b_btm_by_a": [364, 813], "c_btm_by_a": [364, 813], "a_btm_by_b": [364, 813], "b_btm_by_b": [364, 813], "c_btm_by_b": [364, 813], "_by_ca": [364, 716, 813], "_by_cb": [364, 716, 813], "a_by_ca": [364, 716, 813], "b_by_ca": [364, 716, 813], "c_by_ca": [364, 716, 813], "a_by_cb": [364, 716, 813], "b_by_cb": [364, 716, 813], "c_by_cb": [364, 716, 813], "to_fram": [366, 406, 427, 432, 441, 691, 1007, 1189, 1214, 1217, 1268, 1269, 1277, 1326], "259921": [368, 813, 986, 1326, 1345], "587401": [368, 813, 1345], "numericliter": [370, 371, 372, 813, 990, 991, 992, 1326], "temporalliter": [370, 371, 372, 813, 990, 991, 992, 1030, 1031, 1326], "outsid": [370, 813, 990, 1326], "clip": [371, 372, 813, 991, 992, 1326], "543081": [374, 813, 995, 1326], "cotang": [375, 813, 996, 1326, 1348], "cumul": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 743, 744, 745, 746, 747, 748, 749, 750, 751, 813, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1326], "cum_count_revers": [377, 813], "cum_max_revers": [378, 813], "cum_max_all_fil": [378, 813], "cum_min_revers": [379, 813], "cum_prod_revers": [380, 813], "cum_sum_revers": [381, 813], "value_cum_sum": [381, 813], "value_cum_sum_all_fil": [381, 813], "cum_count": [382, 813, 1326], "cum_max": [383, 813, 1002, 1326], "cum_min": [384, 813, 1003, 1326], "cum_sum": [386, 476, 706, 747, 750, 813, 858, 926, 1005, 1119, 1326], "min_period": [387, 449, 451, 452, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 789, 790, 813, 1006, 1072, 1074, 1075, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "slide": [387, 813, 1006, 1326], "slot": [387, 391, 508, 813, 1006, 1009, 1131, 1326], "realli": [387, 650, 676, 813, 1006, 1236, 1262, 1326], "visit": [387, 813, 1006, 1326], "left_clos": [388, 598, 813, 1007, 1189, 1326], "include_break": [388, 598, 813, 1007, 1189, 1326], "bin": [388, 474, 598, 696, 724, 806, 813, 1007, 1092, 1189, 1282, 1320, 1326], "discret": [388, 391, 446, 474, 508, 528, 598, 813, 1007, 1009, 1069, 1092, 1131, 1151, 1189, 1326], "plu": [388, 545, 813, 1007, 1168, 1189, 1326, 1345], "endpoint": [388, 598, 813, 1007, 1189, 1326], "observ": [388, 449, 450, 451, 452, 598, 813, 1007, 1072, 1073, 1074, 1075, 1189, 1326], "fall": [388, 598, 813, 1007, 1189, 1326], "qcut": [388, 813, 1007, 1326], "breakpoint": [388, 474, 598, 813, 1007, 1092, 1189, 1326], "brk": [388, 598, 813], "foo_bin": [388, 598, 813], "radian": [389, 732, 813, 1344], "720": [389, 600, 813], "540": [389, 600, 813], "360": [389, 600, 813], "180": [389, 600, 813, 1348], "pickl": [390, 813, 839, 926], "secur": [390, 813, 839, 926], "implic": [390, 813, 839, 926], "trust": [390, 813, 839, 926], "meta": [390, 813], "ba": [390, 453, 564, 684, 760, 813, 931], "null_behavior": [391, 508, 813, 1009, 1131, 1326], "nullbehavior": [391, 508, 813, 1009, 1131, 1326], "drop_nan": [394, 813, 1012, 1326], "week_mask": [395, 736, 1013], "holidai": [395, 736, 1013], "busi": [395, 736, 1013], "handi": [395, 736, 1013], "pip": [395, 736, 1013], "dutch": [395, 736, 1013], "my_holidai": [395, 736, 1013], "country_holidai": [395, 736, 1013], "nl": [395, 736, 1013], "2025": [395, 736, 931, 1013], "business_day_count": [395, 1013], "land": [395, 1013], "weekend": [395, 736, 1013], "rolled_forward": 395, "vari": [396, 1014, 1353], "rare": [396, 1014], "switch": [396, 1014], "samoa": [396, 1014], "apia": [396, 1014], "did": [396, 1014], "2011": [396, 1014], "dst_offset": [396, 1014], "2012": [396, 1014], "replace_time_zon": [396, 402, 405, 1019, 1020, 1053], "pacif": [396, 1014], "11h": [396, 1014], "13h": [396, 1014], "lose": [397, 1015], "time_unit_m": [397, 1015], "time_unit_n": [397, 1015], "999": [398, 413, 931, 1016, 1034, 1343, 1353], "1897": [398, 413, 1016, 1034], "2000": [398, 409, 413, 419, 420, 423, 931, 1016, 1027, 1034, 1041, 1042, 1045, 1050, 1334], "3002": [398, 413, 1016, 1034], "cent": 398, "0999": [398, 413], "naiv": [399, 400, 1017, 1018, 1280], "compon": [399, 428, 691, 694, 758, 1017, 1050, 1277, 1280], "resolv": [399, 836, 842, 880, 900, 926], "tm": [399, 931], "456000": [399, 1017], "101000": 399, "d1": 399, "d2": 399, "d3": 399, "europ": [400, 405, 426, 1018, 1023, 1048], "london": [400, 405, 426, 1018, 1023, 1048], "gmt": [400, 405, 426, 1018, 1023, 1048], "bst": [400, 405, 426, 1018, 1023, 1048], "1978": [401, 402, 407, 410, 411, 414, 416, 421, 428, 431, 445], "500_000": [401, 402, 407, 411, 414, 416, 421, 428, 431], "2065": [401, 402, 407, 411, 414, 416, 421, 428, 431], "60_000": [401, 402, 407, 411, 414, 416, 421, 428, 431], "060": [401, 402, 407, 411, 414, 416, 421, 428, 431], "weekdai": [403, 424], "ordinal_dai": [403, 443], "day_of_month": [403, 424, 443], "day_of_year": [403, 424, 443], "356": [403, 424, 443], "357": [403, 424, 443], "358": [403, 424, 443], "359": [403, 424, 443], "total_dai": [404, 1022], "base_utc_offset": [405, 1023], "0m": [405, 1023], "epochtimeunit": [406, 764, 1024], "epoch_n": [406, 1024], "epoch_": [406, 1024], "978307200000000": [406, 432, 1024, 1054], "978307200": [406, 1024], "978393600000000": [406, 432, 1024, 1054], "978393600": [406, 1024], "978480000000000": [406, 432, 1024, 1054], "978480000": [406, 1024], "total_hour": [408, 1026], "leap": [409, 423, 1027, 1045], "leap_year": 409, "iso": [410, 442, 443, 1028, 1064, 1065, 1347], "1977": [410, 445], "1979": [410, 445], "calendar_year": [410, 445], "1976": [410, 445], "500000": [411, 1032], "60000": 411, "total_microsecond": [412, 1033], "mlnm": 413, "total_millisecond": [415, 1036], "total_minut": [417, 1039], "think": [419, 420, 1041, 1042], "vectoris": [419, 420, 1041, 1042], "tseri": [419, 420, 1041, 1042], "monthend": [419, 1041], "rollforward": [419, 1041], "monthbegin": [420, 1042], "rollback": [420, 1042], "500000000": [421, 1043], "60000000": 421, "total_nanosecond": [422, 1044], "minu": [423, 586, 813, 1045], "dictat": [423, 813, 930, 1045], "2005": [423, 1045], "date_plus_1i": [423, 1045], "1y2mo": [423, 1045], "date_min": 423, "1998": [423, 1045], "2003": [423, 764, 1045], "2004": [423, 1045], "2006": [423, 1045], "new_dat": 423, "ordin": [424, 601, 813, 1046, 1191, 1326, 1351], "366": [424, 1046], "use_earliest": [426, 441, 691, 694, 755, 1048, 1063, 1277, 1280], "non_exist": [426, 1048], "nonexist": [426, 1048], "convert_time_zon": [426, 1048], "london_timezon": [426, 1048], "amsterdam": [426, 1048], "london_to_amsterdam": [426, 1048], "cet": [426, 1048], "cest": [426, 1048], "ts_local": [426, 1048], "brussel": [426, 1048], "localis": [427, 441, 1063], "dst": [427, 441, 1049, 1063], "cst": [427, 441, 1049, 1063], "cdt": [427, 441, 1049, 1063], "225": [427, 441], "10m": [427, 441, 1049, 1063], "milli": [428, 1050], "micro": [428, 1050], "total_second": [429, 1051], "to_str": [430, 1052], "datetime_str": [430, 433], "day_nam": [430, 433], "month_nam": [430, 433], "march": [430, 433, 1052, 1055], "april": [430, 433, 1052, 1055], "timestamp_u": [432, 1054], "timestamp_m": 432, "978307200000": 432, "978393600000": 432, "978480000000": 432, "strftime": [433, 1055, 1347], "days_diff": 434, "hours_diff": 435, "200m": [436, 437, 439], "milliseconds_diff": [436, 437, 439], "200": [436, 437, 439, 605, 813, 931, 1195, 1202, 1203, 1205, 1326, 1343], "200000": [436, 866, 926], "800": [436, 437, 439], "minutes_diff": 438, "1440": [438, 1060], "200000000": 439, "seconds_diff": 440, "truncate_str": 441, "truncate_td": 441, "53": [442, 1064], "time_unit_u": 444, "32971": [444, 1066], "32974": [444, 1066], "32976": [444, 1066], "iso_year": 445, "pk": [446, 813, 1069, 1326], "probabl": [446, 598, 813, 1069, 1189, 1326], "459148": [446, 813], "754888": [446, 813], "span": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "half_lif": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "adjust": [449, 451, 452, 642, 813, 1072, 1074, 1075, 1229, 1326], "exponenti": [449, 450, 451, 452, 454, 595, 813, 1072, 1073, 1074, 1075, 1076, 1326, 1345], "weight": [449, 450, 451, 452, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 642, 813, 1072, 1073, 1074, 1075, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1229, 1326], "decai": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "term": [449, 451, 452, 661, 680, 692, 813, 1072, 1074, 1075, 1247, 1266, 1278, 1326], "mass": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "gamma": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "frac": [449, 451, 452, 642, 813, 1072, 1074, 1075, 1229, 1326], "foral": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "geq": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "theta": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "life": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "exp": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326, 1344], "ln": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326, 1344], "smooth": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "factor": [449, 451, 452, 714, 813, 1072, 1074, 1075, 1308, 1326], "leq": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "imbal": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "ew": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "w_i": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "recurs": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "y_t": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "y_": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "x_t": [449, 451, 452, 813, 1072, 1074, 1075, 1326], "x_2": [449, 450, 451, 452, 813, 1072, 1073, 1074, 1075, 1326], "428571": [449, 813, 1072, 1326], "ldot": [450, 813, 1073, 1326], "x_n": [450, 813, 1073, 1326], "t_2": [450, 813, 1073, 1326], "ewma": [450, 813, 1073, 1326], "alpha_i": [450, 813, 1073, 1326], "t_i": [450, 813, 1073, 1326], "y_i": [450, 813, 1073, 1326], "x_i": [450, 813, 1073, 1326], "quad": [450, 813, 1073, 1326], "370h": [450, 813, 1073, 1326], "4d": [450, 813, 1073, 1326], "292893": [450, 813, 1073, 1326], "492474": [450, 813, 1073, 1326], "254508": [450, 813, 1073, 1326], "bia": [451, 452, 495, 623, 642, 813, 1074, 1075, 1120, 1207, 1229, 1326], "unbias": [451, 452, 813, 1074, 1075, 1326], "963624": [451, 813, 1074, 1326], "928571": [452, 813, 1075, 1326], "wildcard": [453, 702, 744, 745, 748, 749, 762, 787, 813, 930], "regex": [453, 558, 559, 649, 651, 652, 655, 657, 658, 659, 660, 674, 675, 684, 702, 760, 813, 931, 1235, 1237, 1238, 1241, 1243, 1244, 1245, 1246, 1260, 1261, 1270], "aa": [453, 649, 660, 760, 813, 931, 1008, 1235, 1246, 1326, 1346], "cc": [453, 760, 813, 931, 1008, 1326, 1346], "718282": [454, 813, 1076, 1326, 1345], "389056": [454, 813, 1076, 1326, 1345], "54": [454, 813, 1120, 1326, 1345, 1353], "59815": [454, 813, 1345], "extrem": [456, 612, 813, 1079, 1201, 1326], "expressioin": [456, 813, 1079, 1326], "group_col": [459, 723, 813], "g1": [459, 723, 813], "g2": [459, 723, 813], "lt": [459, 723, 813, 1326], "gte": [459, 723, 813], "n_1": [459, 813], "n_2": [459, 813], "n_3": [459, 813], "exprlistnamespac": [461, 813], "divis": [463, 717, 813], "truediv": [463, 813], "subtli": [463, 813], "intuit": [463, 813, 931], "backward_fil": [464, 635, 813], "enclos": [465, 813], "350": [471, 588, 813, 1203, 1326], "650": [471, 588, 813], "850": [471, 588, 813], "9774092659964970114": [472, 813], "13614470193936745724": [472, 813], "1101441246220388612": [472, 813], "11638928888656214026": [472, 813], "13382926553367784577": [472, 813], "bin_count": [474, 813, 1092, 1326], "include_categori": [474, 813, 1092, 1326], "include_breakpoint": [474, 813, 1092, 1326], "occurr": [474, 482, 483, 486, 487, 721, 813, 1092, 1102, 1103, 1108, 1109, 1314, 1326], "interpolationmethod": [477, 813, 1095, 1326], "regrid": [477, 813], "grid": [477, 813], "df_original_grid": [477, 813], "grid_point": [477, 813], "df_new_grid": [477, 813], "a_interpol": [478, 813], "285714": [478, 813, 1096, 1326], "714286": [478, 813, 1096, 1326], "satisfi": [479, 813, 1097, 1326], "conflat": [479, 813], "between_ab": [479, 813], "finit": [481, 717, 740, 813, 1101, 1326], "is_first_distinct": [482, 813, 1102, 1326], "optional_memb": [484, 813, 1105, 1326], "infinit": [485, 717, 813, 1106, 1326], "is_last_distinct": [486, 813, 1108, 1326], "_isnan": [488, 813], "b_isnan": [488, 813], "negat": [489, 587, 813, 1183, 1326], "_is_not_nan": [490, 813], "b_is_not_nan": [490, 813], "_not_nul": [491, 813], "a_not_nul": [491, 813], "b_not_nul": [491, 813], "_isnul": [492, 813], "a_isnul": [492, 813], "b_isnul": [492, 813], "undo": [494, 566, 573, 574, 576, 578, 580, 581, 596, 707, 813], "fisher": [495, 642, 813, 1120, 1229, 1326], "fourth": [495, 813, 1120, 1326], "subtract": [495, 706, 813, 1120, 1326], "distribut": [495, 642, 813, 1120, 1229, 1326], "elimin": [495, 813, 1120, 1326], "bias": [495, 642, 813, 1120, 1229, 1326], "scipi": [495, 642, 813, 1120, 1229, 1326, 1330], "stat": [495, 642, 813, 883, 926, 1120, 1229, 1326], "153061": [495, 813], "blindli": [510, 1133], "worth": [510, 1133], "enough": [510, 642, 813, 1133, 1229, 1326], "concat_list": [510, 759], "exprnamespac": 511, "cheaper": [513, 538, 1136, 1161], "symmetr": [530, 1153], "sdiff": 530, "taken": [533, 680, 1156, 1266], "363961": [535, 1158], "n_field_strategi": [540, 1163], "tostructstrategi": [540, 1163], "first_non_nul": [540, 1163], "max_width": [540, 1163], "pre": [540, 552, 598, 785, 788, 804, 813, 1189, 1326], "eagerli": [540, 1334], "obtain": 540, "ok": 540, "longest": 540, "logarithm": [543, 544, 545, 813, 1166, 1167, 1168, 1326, 1345], "584963": [543, 813], "30103": [544, 813, 1345], "60206": [544, 813, 1345], "natur": [545, 813, 1168, 1326, 1345], "693147": [545, 813, 1166, 1168, 1326, 1345], "098612": [545, 813, 1166, 1168, 1326, 1345], "386294": [545, 813, 1168, 1326, 1345], "9223372036854775808": [546, 813], "agg_list": [548, 550, 813], "map_batch": [548, 773, 813, 865, 926], "keep_nam": [549, 813], "a_revers": [549, 574, 578, 607, 707, 813], "b_revers": [549, 574, 578, 607, 707, 813], "rstrip": [549, 574, 813], "_revers": [549, 574, 578, 607, 707, 813], "is_elementwis": [550, 813, 930], "returns_scalar": [550, 729, 775, 813, 930], "whole": [550, 644, 645, 657, 813, 914, 926, 1243], "presum": [550, 813], "stai": [550, 813], "elementwis": [550, 611, 612, 613, 615, 619, 626, 813, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "third": [550, 813], "parti": [550, 813], "map_to_scalar": [550, 813], "invok": [550, 813], "assumpt": [550, 813], "someth": [550, 813], "bug": [550, 552, 813, 865, 866, 908, 914, 926, 1171, 1326], "argmax": [550, 813], "remap": [551, 813, 1170, 1326], "lookup": [551, 809, 813, 1170, 1326], "suppos": [552, 813, 1171, 1326], "sqrt": [552, 642, 705, 732, 733, 813, 1171, 1229, 1326, 1344], "discourag": [552, 813], "loop": [552, 813], "a_times_2": [552, 813], "tip": [552, 813], "view": [552, 813, 1326], "again": [552, 813], "exprmetanamespac": [556, 560], "foo_bar": [556, 560, 681, 772, 1338], "foo_bar2": [556, 560], "_foo": 557, "allow_alias": 558, "bare": [558, 931], "foo_": [559, 681, 763], "raise_if_undetermin": 561, "computeerror": [561, 673, 696, 1259, 1282], "e_filt": [561, 563], "e_sum_ov": [561, 563], "e_sum_slic": [561, 563], "groupstorow": 564, "tree": [565, 843, 926], "modulu": [569, 813], "xlog2": [571, 595, 813], "purpos": [572, 813, 834, 845, 926], "x_uniqu": [572, 813], "y_uniqu": [572, 813], "reverse_": [576, 596, 813], "reverse_a": [576, 596, 813], "reverse_b": [576, 596, 813], "prefix_": 577, "prefix_a": 577, "prefix_b": 577, "_suffix": 579, "a_suffix": 579, "b_suffix": 579, "lowercas": [580, 697, 1283, 1346], "uppercas": [581, 700, 1286, 1346], "to_lowercas": 581, "poison": [582, 583, 813, 1180, 1181, 1326], "nanmax": [582, 583, 813, 1180, 1181, 1326], "inequ": [584, 813], "ne": [585, 813, 1326], "unari": [586, 813], "more_expr": [590, 734, 737, 738, 739, 813], "mapping_strategi": [590, 813], "windowmappingstrategi": [590, 813], "group_to_row": [590, 813], "outcom": [590, 813], "group_dtyp": [590, 813], "warn": [590, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813, 1326], "_max": [590, 813], "c_max": [590, 813], "_min": [590, 813], "c_min": [590, 813], "sort_bi": [590, 813], "percent": [591, 813, 1185, 1326], "090909": [591, 813], "extract_numb": [594, 813], "scale_negative_even": [594, 813], "expon": [595, 813, 1326, 1345], "allow_dupl": [598, 813, 1189, 1326], "duplicateerror": [598, 813, 1189, 1326], "cut": [598, 813, 1189, 1326], "566371": [600, 813], "424778": [600, 813], "283185": [600, 813], "141593": [600, 813, 939, 1326, 1345, 1348], "rankmethod": [601, 813, 1191, 1326], "ti": [601, 813, 1191, 1326], "competit": [601, 813, 1191, 1326], "highest": [601, 720, 740, 813, 926, 1191, 1326], "immedi": [601, 731, 735, 753, 754, 756, 757, 768, 769, 785, 788, 795, 800, 801, 804, 813, 1191, 1326], "nodefault": [605, 813, 1195, 1326], "_nodefault": [605, 813, 1195, 1326], "no_default": [605, 813, 1195, 1326], "nested_typ": [606, 813, 1196, 1326], "fruits_revers": [607, 813], "cars_revers": [607, 813], "rle_id": [608, 813, 1326], "rle": [609, 813, 1199, 1326], "rle_id_a": [609, 813], "rle_id_ab": [609, 813], "window_s": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 789, 790, 813, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1326], "rolling_map": [611, 813, 1200, 1326], "multipli": [611, 612, 613, 615, 619, 624, 626, 628, 705, 813, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1326], "rolling_sum": [612, 813, 1201, 1326], "nansum": [612, 813, 1201, 1326], "warn_if_unsort": [613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 813], "travers": [613, 615, 619, 626, 813, 1202, 1203, 1205, 1208, 1209, 1210, 1326], "vector": [613, 615, 619, 626, 813, 1202, 1203, 1205, 1208, 1209, 1210, 1326], "5h": [613, 615, 617, 619, 621, 624, 626, 628, 813], "rolling_max_bi": [613, 813], "df_tempor": [613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 813], "rolling_row_max": [613, 614, 813], "2h": [613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 813], "closur": [613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 813], "rolling_mean_bi": [615, 813], "rolling_row_mean": [615, 616, 813], "contribut": [617, 621, 624, 628, 813], "rolling_median_bi": [617, 813], "rolling_row_median": [618, 813], "rolling_min_bi": [619, 813], "rolling_row_min": [619, 620, 813], "rolling_quantile_bi": [621, 813], "625": [621, 813], "rolling_row_quantil": [622, 813], "skew": [623, 813, 1207, 1326], "381802": [623, 813, 1207, 1326], "47033": [623, 813, 1207, 1326], "38180177416060584": [623, 813, 1207, 1326], "47033046033698594": [623, 813, 1207, 1326], "rolling_std_bi": [624, 813], "433013": [624, 813, 891, 926], "rolling_row_std": [624, 625, 813], "rolling_sum_bi": [626, 813], "rolling_row_sum": [626, 627, 813], "39": [626, 627, 764, 813], "57": [626, 627, 813, 1211, 1326, 1353], "63": [626, 627, 813], "69": [626, 627, 813, 1120, 1326], "rolling_var_bi": [628, 813], "1875": [628, 813, 899, 926], "rolling_row_var": [628, 629, 813], "figur": [631, 813, 887, 926, 1212, 1326], "01234": [631, 813, 1212, 1326], "012": [631, 813, 1212, 1326], "1200": [631, 813, 1212, 1326], "searchsortedsid": [633, 813, 1215, 1326], "leftmost": [633, 813, 1215, 1326, 1346], "rightmost": [633, 813, 1215, 1326, 1346], "six": [633, 813], "extrema": [637, 813, 1223, 1326], "112": [637, 813, 1353], "129": [637, 813], "8589934592": [637, 813], "1073741824": [637, 813], "175201": [641, 813, 1228, 1326], "unimod": [642, 813, 1229, 1326], "skewtest": [642, 813, 1229, 1326], "speak": [642, 813, 1229, 1326], "g_1": [642, 813, 1229, 1326], "m_3": [642, 813, 1229, 1326], "m_2": [642, 813, 1229, 1326], "m_i": [642, 813, 1229, 1326], "sum_": [642, 813, 1229, 1326], "texttt": [642, 813, 1229, 1326], "k_3": [642, 813, 1229, 1326], "k_2": [642, 813, 1229, 1326], "343622": [642, 813], "value1": [645, 813], "value2": [645, 813], "attain": [645, 813], "414214": [646, 813, 1232, 1326, 1345], "sensit": [649, 658, 660, 674, 675, 1235, 1244, 1246, 1260, 1261], "ilmsuxu": [649, 657, 658, 660, 674, 675, 1235, 1243, 1244, 1246, 1260, 1261], "default_match": [649, 660], "insensitive_match": [649, 660], "crab": [649, 660, 1235, 1246], "dog": [649, 697, 700, 739, 1235, 1283, 1286], "rab": [649, 677, 1235, 1263, 1342], "ascii_case_insensit": [650, 676, 1236, 1262], "aho": [650, 676, 1236, 1262], "corasick": [650, 676, 1236, 1262], "insensit": [650, 658, 674, 675, 676, 931, 1235, 1236, 1244, 1246, 1260, 1261, 1262], "set_fmt_str_length": [650, 676, 1236, 1262], "lyric": [650, 676, 1236, 1262], "everybodi": [650, 676, 1236, 1262], "tell": [650, 676, 1236, 1262], "me": [650, 676, 1236, 1262], "feel": [650, 676, 1236, 1262], "love": [650, 676, 1236, 1262], "tonight": [650, 676, 1236, 1262], "success": [651, 652, 658, 1237, 1238, 1244], "overlap": [651, 652, 658, 1237, 1238, 1244], "bla": [652, 658, 1238, 1244], "asd": [652, 658, 1238, 1244], "678": [652, 658, 1238, 1244], "910t": [652, 658, 1238, 1244], "count_digit": 652, "dbc": [652, 1238], "3xy": [652, 1238], "1zy3": [652, 1238], "strings_hex": 654, "666f6f": [654, 1240], "626172": [654, 1240], "mango": [655, 684, 1241, 1270], "has_suffix": 655, "le": [655, 813, 1326], "nu": 655, "group_index": [657, 1243], "captur": [657, 659, 674, 675, 1243, 1245, 1260, 1261], "nthose": [657, 1243], "nodd": [657, 1243], "nthe": [657, 1243], "odd": 657, "vote": [657, 659, 1243, 1245], "ballon_dor": [657, 659, 1243, 1245], "404": [657, 659, 1243, 1245], "ref": [657, 659, 1243, 1245], "candid": [657, 659, 1243, 1245], "messi": [657, 659, 1243, 1245], "ronaldo": [657, 1243], "haystack": [658, 1244], "email": [658, 1244], "real": [658, 1244], "some_account": [658, 1244], "somewher": [658, 1244], "net": [658, 1244], "jkl": [658, 1244], "uvw": [658, 1244], "co": [658, 813, 1244, 1326, 1344], "uk": [658, 1244], "address": 658, "xi": [658, 1244], "quantifi": [658, 1244], "email_part": [658, 1244], "extracted_nr": 658, "unnam": [659, 1245], "weghorst": [659, 1245], "err": 659, "lobster": [660, 1246], "crustaceon": [660, 1246], "pat": [660, 1246], "bc": [660, 675, 796, 1246], "aeiuo": [660, 1246], "find_pat": 660, "fewer": [661, 692, 845, 926, 1247, 1278], "pear": [661, 680, 692, 1247, 1266, 1278], "papaya": [661, 680, 692, 1247, 1266, 1278], "dragonfruit": [661, 680, 692, 1247, 1266, 1278], "s_head_5": 661, "papai": [661, 1247], "drago": [661, 1247], "s_head_n": 661, "pea": 661, "papa": 661, "dragon": 661, "json_path_match": [662, 1248], "jsonpath": [662, 664, 1248, 1250], "json_decod": [663, 1249], "json_path": [664, 1250], "json_val": [664, 1250], "len_char": [665, 670, 1251, 1256], "_o": [665, 666, 1251, 1252], "caf\u00e9": [665, 666, 931, 1251, 1252], "345": [665, 666, 1251, 1252], "\u6771\u4eac": [665, 666, 931, 1251, 1252], "n_byte": [665, 666, 1346], "n_char": [665, 666, 1346], "fill_char": [668, 671, 672, 678, 1254, 1257, 1258, 1264], "justifi": [668, 678, 1254, 1264], "pad_end": [668, 672, 1254, 1258], "strip_chars_start": [669, 687, 689, 1255], "pad": [671, 672, 701, 1257, 1258, 1287], "reach": [671, 672, 701, 1257, 1258, 1287], "pad_start": [671, 678, 701, 1257, 1264, 1287], "cow": [671, 672, 1257, 1258], "monkei": [671, 672, 1257, 1258], "hippopotamu": [671, 672, 1257, 1258], "zfill": [672, 724, 813, 1258], "radix": [673, 696, 1259, 1282], "parseerror": [673, 696, 1259, 1282], "to_integ": [673, 1259], "silent": [673, 696, 1259, 1282], "replace_al": [674, 1260], "dollar": [674, 675, 1260, 1261], "123abc": [674, 1260, 1261], "abc456": [674, 1260, 1261, 1346], "hat": [674, 675, 1260, 1261], "hut": [674, 675, 1260, 1261], "vowel": [674, 675, 1260, 1261], "bad": [674, 675, 1260, 1261], "bud": [674, 675, 1260, 1261], "citi": [674, 675], "philadelphia": [674, 675], "season": [674, 675], "spring": [674, 675], "summer": [674, 675], "autumn": [674, 675], "winter": [674, 675], "weather": [674, 675, 1260, 1261], "raini": [674, 675, 1260, 1261], "sunni": [674, 675, 1260, 1261], "cloudi": [674, 675], "snowi": [674, 675], "foggi": [674, 675, 1260, 1261], "abcabc": 675, "123a123": 675, "replace_with": [676, 1262], "broadcast": [676, 931, 1262], "removes_pronoun": 676, "man": [677, 1263], "ana": [677, 1263], "oof": [677, 1263, 1342, 1346], "anan": [677, 1263], "am": [677, 1263], "strip_chars_end": [679, 688, 690, 1265], "ear": [680, 692, 1266], "aya": [680, 1266, 1278], "uit": [680, 1266], "ya": [680, 1266], "onf": [680, 1266], "foo_bar_baz": 681, "split_inclus": 681, "bar_": 681, "a_1": [682, 1268, 1301, 1326], "d_4": [682, 1268], "rename_field": [682, 683, 1007, 1189, 1268, 1269, 1326], "first_part": [682, 683, 1268, 1269], "second_part": [682, 683, 1268, 1269], "remaind": [683, 1269, 1345], "app": [684, 1270], "has_prefix": 684, "strip_char": [685, 1271], "nworld": 686, "foo_strip": 686, "ow": 686, "hell": [686, 1272], "rld": [686, 688, 1274], "strip_suffix": [687, 689], "foo_strip_end": 687, "oldw": 687, "he": 687, "abcdeff": 687, "fed": 687, "strip_prefix": [688, 690], "tworld": [688, 1272, 1274], "foo_strip_start": 688, "wod": [688, 1274], "aabcdef": 688, "cba": 688, "foobar": [689, 690, 1275, 1276, 1346], "foofoobar": [689, 1275], "foobarbar": [690, 1276], "polarstemporaltyp": [691, 1277], "penalti": [691, 693, 694, 1277, 1279, 1280], "clean": [691, 693, 694, 1277, 1279, 1280], "beforehand": [691, 693, 694, 1277, 1279, 1280], "certainli": [691, 693, 694, 1277, 1279, 1280], "00z": [691, 694, 1277, 1280], "sun": [691, 1277], "jul": [691, 1277], "s_tail_5": 692, "apaya": [692, 1278], "s_tail_n": 692, "paya": 692, "nfruit": 692, "inference_length": [695, 1281], "3420": [695, 1281], "120134": [695, 1281], "3212": [695, 1281], "143": [695, 1281, 1353], "numbers_decim": 695, "110": [696, 1282], "fa1e": [696, 1282], "ff00": [696, 1282], "cafe": [696, 1282], "64030": [696, 1282], "65280": [696, 1282], "51966": [696, 1282], "variant": [697, 699, 700, 1107, 1326], "foo_low": [697, 1346], "titlecas": [699, 1285], "sing": [699, 1285], "welcom": [699, 1285], "THERE": [699, 1285], "NO": [699, 931, 1285], "foo_titl": 699, "foo_upp": [700, 1346], "999999": [701, 755, 799, 800, 801, 931, 1287], "0123": [701, 1287], "more_nam": [702, 809], "__getitem__": 702, "struct_col": [702, 704], "cd": [702, 704, 931], "expans": 702, "www": 704, "xxx": 704, "yyi": 704, "zzz": 704, "obvious": 704, "structfieldnotfounderror": 704, "coord": 705, "y_mul": 705, "761594": [713, 813, 1299, 1326], "replic": [714, 813, 1308, 1326], "vals_phys": [714, 813], "_top_by_a": [716, 813], "_top_by_b": [716, 813], "a_top_by_a": [716, 813], "b_top_by_a": [716, 813], "c_top_by_a": [716, 813], "a_top_by_b": [716, 813], "b_top_by_b": [716, 813], "c_top_by_b": [716, 813], "floordiv": [717, 813], "ieee": [717, 813], "754": [717, 813], "mathemat": [717, 759, 813, 1344], "undefin": [717, 813], "On": [717, 813], "operand": [717, 813], "infin": [717, 813], "value_count": [719, 813, 1326], "9223372036854775807": [720, 813], "binary_str": [724, 813], "250": [724, 813, 1203, 1326, 1343, 1353], "bin_x": [724, 813], "bin_i": [724, 813], "xor_xi": [724, 813], "bin_xor_xi": [724, 813], "00001010": [724, 813], "00001011": [724, 813], "00001000": [724, 813], "00000010": [724, 813], "11111010": [724, 813], "00000011": [724, 813], "249": [724, 813], "11111001": [724, 813], "01000010": [724, 813], "00000100": [724, 813], "01000110": [724, 813], "AND": [725, 726, 792, 931], "OR": [727, 728, 848, 926, 931], "any_horizont": 727, "polarsintegertyp": [731, 768, 769], "arctan": [732, 733, 813, 1326], "angl": [732, 733, 1348], "plane": [732, 733], "rai": [732, 733], "tworoottwo": [732, 733], "arctan2d": 732, "atan2d": [732, 733, 1344], "atan2": [732, 733, 1344], "135": [732, 733], "356194": [732, 733], "arctan2": 733, "arg_tru": [735, 813, 1326], "oppos": 736, "mimic": 738, "a_lag_": 738, "a_rol": 738, "swim": 739, "walk": 739, "full_sent": 739, "correlationmethod": 740, "propagate_nan": 740, "spearman": 740, "544705": 740, "covari": [742, 790, 813, 930], "acc": [744, 745, 748, 749, 762, 787], "include_init": [744, 748], "accumul": [744, 745, 748, 749, 762, 787], "fn": [744, 745, 748, 749, 762, 787], "new_valu": [744, 745, 748, 749, 762, 787], "cum_reduc": [744, 749], "cumsum_horizont": 746, "cum_fold": 748, "cum_sum_horizont": 751, "granular": 753, "finer": 753, "permut": 753, "1985": [753, 756], "australia": 755, "sydnei": 755, "aedt": 755, "america": 756, "new_york": 756, "est": 756, "contrast": 758, "sometim": [758, 812], "tbl_width_char": 758, "120": [758, 1348], "add_week": 758, "add_dai": 758, "add_second": 758, "add_milli": 758, "add_hour": 758, "002": [758, 1058, 1059, 1061], "add_calendar_dai": 758, "add_calendar_month": 758, "mo": 758, "add_calendar_year": 758, "a_b_doubl": 759, "presenc": [761, 770, 784, 931, 1089, 1326], "f_string": 763, "placehold": 763, "hello_": 763, "_world": 763, "_bar_": 763, "foo_a_bar_1": 763, "foo_b_bar_2": 763, "foo_c_bar_3": 763, "timestep": 764, "1666683077": 764, "1666683099": 764, "12345": [764, 987, 1084, 1211, 1326], "12346": 764, "agg_group": [765, 813], "allow_object": 772, "valueexcept": 772, "test_func": 774, "list_of_seri": 775, "my_custom_aggreg": 775, "understood": 775, "lf1": [792, 890, 926, 1337, 1339, 1351], "lf2": [792, 890, 926, 1337, 1339, 1351], "888": [792, 890, 926], "freeli": [792, 890, 926, 931], "c_c_c": [792, 890, 926], "BY": [792, 890, 926, 1334, 1336, 1349], "power": [793, 1326, 1345], "a_a": 793, "a_txt": 793, "605551": 794, "605551275463989": 794, "my_struct": 795, "statement": [803, 1338, 1351], "elif": 803, "met": 803, "own": [803, 1306, 1326, 1353], "isn": 803, "technic": 809, "further": 809, "columnfactori": 809, "__call__": 809, "helper": 809, "__getattr__": 809, "idiomat": [809, 914], "prototyp": 809, "keystrok": 809, "drawback": 809, "readabl": 809, "and_": 813, "arcco": [813, 1326], "arccosh": [813, 1326], "arcsin": [813, 1326], "arcsinh": [813, 1326], "arctanh": [813, 1326], "arg_max": [813, 1326], "arg_min": [813, 1326], "arg_sort": [813, 1326], "arg_uniqu": [813, 1326], "cbrt": [813, 1326, 1344], "clip_max": [813, 1326], "clip_min": [813, 1326], "cosh": [813, 1326], "cot": [813, 1326, 1344], "cumcount": 813, "cummax": [813, 1326], "cummin": [813, 1326], "cumprod": [813, 1326], "cumsum": [813, 1326], "cumulative_ev": [813, 1326], "entropi": [813, 1326], "eq_miss": [813, 1326], "ewm_mean": [813, 1326], "ewm_mean_bi": [813, 1326], "ewm_std": [813, 1326], "ewm_var": [813, 1326], "extend_const": [813, 1326], "flatten": 813, "from_json": 813, "ge": [813, 1326], "gt": [813, 1326], "has_nul": [813, 1089, 1326], "hist": [813, 1326, 1330], "implod": [813, 1326], "inspect": [813, 926], "interpolate_bi": [813, 1326], "is_between": [813, 1326], "is_finit": [813, 1326], "is_first": [813, 1326], "is_infinit": [813, 1326], "is_last": [813, 1326], "is_nan": [813, 1326], "is_not": 813, "is_not_nan": [813, 1326], "is_not_nul": [813, 1326], "kurtosi": [813, 1326], "log10": [813, 1326, 1344], "log1p": [813, 1326, 1344], "map_alia": 813, "map_dict": [813, 1326], "mod": [813, 1344], "mul": 813, "nan_max": [813, 1326], "nan_min": [813, 1326], "ne_miss": [813, 1326], "or_": 813, "pct_chang": [813, 1326], "peak_max": [813, 1326], "peak_min": [813, 1326], "pow": [813, 1326, 1344], "register_plugin": 813, "lib": [813, 1300, 1326], "input_wildcard_expans": [813, 930], "cast_to_supertyp": [813, 930], "pass_name_to_appli": [813, 930], "changes_length": [813, 930], "register_plugin_funct": [813, 930], "guid": [813, 930, 1353], "serializ": [813, 930], "ran": [813, 930], "highli": [813, 930], "unsaf": [813, 930], "reinterpret": [813, 1326], "repeat_bi": 813, "rolling_appli": [813, 1326], "rolling_max": [813, 1326], "rolling_mean": [813, 1326], "rolling_median": [813, 1326], "rolling_min": [813, 1326], "rolling_quantil": [813, 1326], "rolling_skew": [813, 1326], "rolling_std": [813, 1326], "rolling_var": [813, 1326], "round_sig_fig": [813, 1326], "search_sort": [813, 1326], "shrink_dtyp": [813, 1326], "sin": [813, 1326, 1344], "sinh": [813, 1326], "tan": [813, 1326, 1344], "to_phys": [813, 984, 1326], "unique_count": [813, 1326], "xor": 813, "expos": 825, "miscellan": 825, "claus": [825, 1349], "parametr": 825, "hit": [830, 926], "node": [830, 834, 858, 865, 866, 870, 875, 877, 926], "job": [830, 926], "background": [834, 926], "_eager": [834, 926], "_kwarg": [834, 926], "inprocessqueri": [834, 926], "cancel": [834, 926], "set_streaming_chunk_s": [834, 926], "collect_all_async": [835, 926], "repeatedli": [836, 842, 880, 900, 926], "snippet": [841, 926], "explainformat": [843, 926], "plain": [843, 926], "tree_format": [843, 926], "Be": [845, 926], "suscept": [845, 926], "lazygroupbi": [851, 852, 853, 854, 855, 856, 879, 926], "other_lf": [860, 926], "jan": [861, 926], "1st": [861, 926], "12th": [861, 926], "validate_output_schema": [865, 866, 926], "streamabl": [865, 866, 870, 926], "paramount": [865, 866, 926], "elig": [865, 866, 926], "invari": [866, 926], "upheld": [866, 926], "100_000": [866, 926], "199998": [866, 926], "199996": [866, 926], "199994": [866, 926], "199992": [866, 926], "show_plot": [875, 926], "truncate_nod": [875, 926], "figsiz": [875, 887, 926], "gantt": [875, 926], "group_by_partit": [875, 926], "470": [875, 926], "475": [875, 926], "1964": [875, 926], "swap": [877, 926], "mapfunct": [883, 926], "dataframescan": [883, 926], "output_schema": [883, 926], "output_path": [887, 926], "raw_output": [887, 926], "render": [887, 926], "download": [887, 926], "290994": [891, 926], "118034": [891, 926], "new_lf": [898, 926], "extern": [903, 926], "lf_other": [903, 926], "afoo": [903, 926], "cfoo": [903, 926], "train_lf": [903, 926], "feature_0": [903, 926], "feature_1": [903, 926], "test_lf": [903, 926], "_train": [903, 926], "feature_0_train": [903, 926], "opaqu": 914, "my_column": 914, "struct_seri": 914, "lf3": [926, 1337], "lf4": [926, 1337], "lf5": 926, "lf6": 926, "sink_csv": 926, "sink_ipc": 926, "sink_ndjson": 926, "sink_parquet": 926, "with_context": 926, "resourc": 930, "plugin_path": 930, "function_nam": 930, "emploi": 931, "complement": 931, "plenti": 931, "cde": [931, 1346], "fgg": 931, "jjk": 931, "lmn": 931, "opp": 931, "qqr": 931, "by_dtyp": 931, "as_expr": 931, "dispatch": 931, "1_234_500": 931, "5_000_555": 931, "1234500": 931, "5000555": 931, "ascii_onli": 931, "ignore_spac": 931, "alphabet": [931, 1353], "accent": 931, "idiograph": 931, "no1": 931, "espresso": 931, "latt": 931, "mocha": 931, "hmm": 931, "\u90fd\u5e02": 931, "\u5927\u962a": 931, "\u4eac\u90fd": 931, "kanji": 931, "alphanumer": 931, "1st_col": 931, "00prefix": 931, "bb": [931, 1008, 1326, 1346], "n_even": 931, "invert": 931, "by_nam": 931, "by_index": 931, "4_500_000": 931, "4500000": 931, "3265500": 931, "c00": 931, "c01": 931, "c02": 931, "c96": 931, "c97": 931, "c98": 931, "c99": 931, "c20": 931, "c40": 931, "c60": 931, "c80": 931, "c75": 931, "c50": 931, "c25": 931, "ones": 931, "51": 931, "c03": 931, "c05": 931, "c93": 931, "c95": 931, "46": 931, "require_al": 931, "zap": 931, "moos": 931, "bear": 931, "2031": 931, "tstamp_tokyo": 931, "123465": 931, "tstamp_utc": 931, "999000": 931, "666000": 931, "tstamp": 931, "600000": 931, "123000": 931, "666": 931, "0005": 931, "5555": 931, "00050": 931, "55550": 931, "\u0967\u096f\u096f\u096f": 931, "\u0968\u0966\u096d\u096d": 931, "3000": 931, "td1": 931, "987000": 931, "td2": 931, "456789": [931, 1050], "td3": 931, "2m": [931, 1038], "456m": 931, "7d": 931, "456789\u00b5": 931, "18d": 931, "999999\u00b5": 931, "23h": 931, "987m": 931, "14d": 931, "16h": 931, "39m": 931, "21d": 931, "456001\u00b5": 931, "simpler": 931, "expand_selector": 931, "broader": 931, "colz": [931, 1353], "desc": [931, 1334, 1336, 1340], "everyth": 931, "signed_integ": 931, "unsigned_integ": 931, "is_selector": 931, "obj": 931, "3456": 931, "7654": 931, "4321": 931, "include_categor": 931, "2345": 931, "292432": [940, 1326], "549306": [944, 1326], "innter": 958, "field_2": [971, 1163], "n00": [971, 1163], "n01": [971, 1163], "n02": [971, 1163], "hexadecim": [975, 976], "aaaa": [975, 976], "8a": [975, 976], "aad": [975, 976], "invalid_valu": 975, "44225": [986, 1326], "56789": [987, 1084, 1211, 1326], "901234": [987, 1084, 1211, 1326], "1232e": [994, 996, 1326, 1348], "1656e15": [996, 1326, 1348], "break_point_label": [1007, 1189, 1326], "break_point": [1007, 1092, 1189, 1326], "category_label": [1007, 1189, 1326], "581139": [1008, 1326], "arraylik": [1010, 1326], "ser": [1019, 1020, 1053], "kathmandu": [1019, 1020, 1053], "0545": [1019, 1020, 1053], "500m": [1032, 1035, 1043], "date_minus_1y_2mon": 1045, "165": [1049, 1063], "round_str": 1049, "round_td": 1049, "111110": 1050, "765431": 1050, "11111": 1050, "timestamp_n": 1054, "978307200000000000": 1054, "978393600000000000": 1054, "978480000000000000": 1054, "005": [1069, 1326], "06293300616044681": [1069, 1326], "65": [1069, 1326], "8568409950394724": [1069, 1326], "4000000": [1071, 1326], "814697265625": [1071, 1326], "085537": [1076, 1326], "sorted_asc": [1083, 1326], "sorted_desc": [1083, 1326], "bitmask": [1089, 1326], "absenc": [1089, 1326], "confirm": [1089, 1326], "10734580197236529959": [1090, 1326], "3022416320763508302": [1090, 1326], "13756996518000038261": [1090, 1326], "is_signed_integ": [1107, 1326], "is_unsigned_integ": [1107, 1326], "grade": [1120, 1326], "79": [1120, 1326], "93": [1120, 1326], "0522623626787952": [1120, 1326], "9477376373212048": [1120, 1326], "1040361802642726": [1120, 1326], "2147483648": [1169, 1326], "pythonliter": [1172, 1173, 1174, 1175, 1214, 1326], "166667": [1185, 1326], "142857": [1185, 1326], "1152921504606846976": [1193, 1326], "17293822569102704640": [1193, 1326], "18446744073709551614": [1193, 1326], "150": [1203, 1326], "450": [1203, 1326], "dev": [1208, 1326], "527525": [1208, 1326], "frequent": [1214, 1217, 1326], "2246e": [1227, 1298, 1326, 1348], "34776706224699483": [1229, 1326], "732051": [1232, 1326], "idx_rx": 1246, "idx_lit": 1246, "3rd": [1247, 1278], "pap": 1247, "dragonfr": 1247, "orld": 1273, "gonfruit": 1278, "6331e16": [1298, 1326, 1348], "int64arrai": [1300, 1326], "a_2": [1301, 1326], "a_3": [1301, 1326], "s_from_str_repr": [1303, 1326], "zero_copy_onli": [1306, 1326], "127": [1313, 1326], "seriesview": [1316, 1326], "dtype_if_empti": 1326, "position": 1326, "scenario": 1326, "chunk_length": 1326, "get_chunk": 1326, "has_valid": 1326, "is_boolean": 1326, "is_float": 1326, "is_integ": 1326, "is_numer": [1326, 1353], "is_sort": 1326, "is_tempor": 1326, "is_utf8": 1326, "new_from_index": 1326, "histogram": [1326, 1330], "kde": [1326, 1330], "series_equ": 1326, "set_at_idx": 1326, "godfath": 1334, "1972": 1334, "6_000_000": 1334, "134_821_952": 1334, "dark": 1334, "knight": 1334, "2008": 1334, "185_000_000": 1334, "533_316_061": 1334, "schindler": 1334, "1993": 1334, "22_000_000": 1334, "96_067_179": 1334, "pulp": 1334, "fiction": 1334, "1994": 1334, "8_000_000": 1334, "107_930_000": 1334, "shawshank": 1334, "redempt": 1334, "25_000_000": 1334, "28_341_469": 1334, "release_year": 1334, "budget": 1334, "gross": 1334, "imdb_scor": 1334, "ctx": [1334, 1335, 1336, 1337, 1338, 1339], "film": 1334, "decad": [1334, 1347], "total_gross": 1334, "n_film": 1334, "533316061": 1334, "232338648": 1334, "134821952": 1334, "register_glob": [1335, 1337, 1339, 1350], "register_mani": [1335, 1336, 1339], "unregist": [1335, 1336, 1337, 1350], "frame_data": [1335, 1338], "named_fram": [1337, 1350], "tbl1": [1337, 1339], "tbl2": [1337, 1339], "tbl3": 1337, "tbl4": 1337, "hello_world": 1338, "hello_data": 1338, "persist": 1339, "tbl0": 1339, "misc": 1339, "testing1234": 1339, "test1": 1339, "test2": 1339, "test3": 1339, "delet": [1340, 1352], "greatest": [1341, 1344], "bar_avg": 1341, "n_bar": 1341, "n_foo_uniqu": 1341, "ff": 1341, "bar_max": [1341, 1342], "bar_median": 1341, "bar_min": 1341, "foo_std": 1341, "bar_std": 1341, "429101": 1341, "686241": 1341, "foo_sum": [1341, 1342], "bar_sum": [1341, 1342], "foo_var": 1341, "bar_var": 1341, "foo_mean": 1342, "bar_mean": 1342, "foo_str": 1342, "foo_uniqu": 1342, "foo_max": 1342, "expr1": 1343, "expr2": 1343, "avg": 1344, "stddev": 1344, "array_contain": 1344, "array_get": 1344, "array_length": 1344, "array_low": 1344, "array_mean": 1344, "array_revers": 1344, "array_sum": 1344, "array_to_str": 1344, "array_uniqu": 1344, "array_upp": 1344, "IF": 1344, "ifnul": 1344, "nullif": 1344, "log2": 1344, "bit_length": 1344, "initcap": 1344, "ltrim": 1344, "octet_length": 1344, "regexp_lik": 1344, "rtrim": 1344, "strpo": 1344, "date_part": 1344, "trigonometri": [1344, 1349], "aco": 1344, "acosd": 1344, "asin": 1344, "asind": 1344, "atan": 1344, "atand": 1344, "cotd": 1344, "cosd": 1344, "sind": 1344, "tand": 1344, "awai": 1345, "\ud835\udf0b": 1345, "609438": 1345, "togeth": 1346, "interleav": 1346, "capit": 1346, "strpost": 1346, "portion": 1346, "dddd": 1346, "n_bit": 1346, "ww": [1346, 1352], "aazz": 1346, "byi": 1346, "cxx": 1346, "ddww": 1346, "ends_a": 1346, "abcd": 1346, "efgh": 1346, "ijkl": 1346, "mnop": 1346, "foo1": 1346, "bar2": 1346, "iso_lang": 1346, "de": 1346, "ru": 1346, "wei\u00df": 1346, "\u0441\u0438\u043d\u0438\u0439": 1346, "amarillo": 1346, "abc123": 1346, "4ab4a": 1346, "321cba": 1346, "ends_in_digit": 1346, "11aabb": 1346, "bcbc45": 1346, "c123": 1346, "11aa": 1346, "c45": 1346, "grape": 1346, "elppa": 1346, "ananab": 1346, "egnaro": 1346, "eparg": 1346, "fghi": 1346, "jklmn": 1346, "mn": 1346, "avocado": 1346, "starts_a": 1346, "pos_a": 1346, "foo_3_4": 1346, "ple": 1346, "nana": 1346, "ang": 1346, "ap": 1346, "8601": 1347, "str_date": 1347, "1969": 1347, "dayofweek": 1347, "dow": 1347, "dayofyear": 1347, "doi": 1347, "isodow": 1347, "isoweek": 1347, "isoyear": 1347, "2026": 1347, "196": 1347, "202": 1347, "207": 1347, "094395": 1348, "047198": 1348, "523599": 1348, "463648": 1348, "565051": 1348, "099669": 1348, "024995": 1348, "016665": 1348, "710593": 1348, "432096": 1348, "954841": 1348, "8370e": 1348, "270": 1348, "angle_degre": 1348, "712389": 1348, "4437e15": 1348, "two_a": 1350, "__enter__": 1350, "__exit__": 1350, "exc_typ": 1350, "baseexcept": 1350, "exc_val": 1350, "exc_tb": 1350, "tracebacktyp": 1350, "compos": 1351, "david": 1351, "lf_union": 1351, "lf_union_al": 1351, "lf_union_by_nam": 1351, "new_tabl": 1352, "old_tabl": 1352, "machin": 1353, "xdist": 1353, "hardwar": 1353, "setup": 1353, "sec": 1353, "numeric_dtyp": 1353, "test_numer": 1353, "col4": 1353, "29096": 1353, "485": 1353, "2147483647": 1353, "8257e14": 1353, "7508": 1353, "37338": 1353, "7264": 1353, "16996": 1353, "121": 1353, "361": 1353, "63204": 1353, "1443e235": 1353, "conform": 1353, "st": 1353, "ascii_lett": 1353, "id_char": 1353, "ccy": 1353, "sampled_from": 1353, "gbp": 1353, "jpy": 1353, "price": 1353, "min_valu": 1353, "max_valu": 1353, "test_price_calcul": 1353, "a101": 1353, "8nin": 1353, "qhoo": 1353, "714": 1353, "544": 1353, "i0e0": 1353, "uint8_pair": 1353, "drawfn": 1353, "uint": 1353, "zip": 1353, "test_miscellan": 1353, "235": 1353, "87": 1353, "186": 1353, "174": 1353, "179": 1353, "213": 1353, "149": 1353, "221": 1353, "86": 1353, "255": 1353}, "objects": {"polars.Config": [[2, 0, 1, "", "activate_decimals"], [3, 0, 1, "", "load"], [4, 0, 1, "", "load_from_file"], [5, 0, 1, "", "restore_defaults"], [6, 0, 1, "", "save"], [7, 0, 1, "", "save_to_file"], [8, 0, 1, "", "set_ascii_tables"], [9, 0, 1, "", "set_auto_structify"], [10, 0, 1, "", "set_decimal_separator"], [11, 0, 1, "", "set_float_precision"], [12, 0, 1, "", "set_fmt_float"], [13, 0, 1, "", "set_fmt_str_lengths"], [14, 0, 1, "", "set_fmt_table_cell_list_len"], [15, 0, 1, "", "set_streaming_chunk_size"], [16, 0, 1, "", "set_tbl_cell_alignment"], [17, 0, 1, "", "set_tbl_cell_numeric_alignment"], [18, 0, 1, "", "set_tbl_cols"], [19, 0, 1, "", "set_tbl_column_data_type_inline"], [20, 0, 1, "", "set_tbl_dataframe_shape_below"], [21, 0, 1, "", "set_tbl_formatting"], [22, 0, 1, "", "set_tbl_hide_column_data_types"], [23, 0, 1, "", "set_tbl_hide_column_names"], [24, 0, 1, "", "set_tbl_hide_dataframe_shape"], [25, 0, 1, "", "set_tbl_hide_dtype_separator"], [26, 0, 1, "", "set_tbl_rows"], [27, 0, 1, "", "set_tbl_width_chars"], [28, 0, 1, "", "set_thousands_separator"], [29, 0, 1, "", "set_trim_decimal_zeros"], [30, 0, 1, "", "set_verbose"], [31, 0, 1, "", "state"]], "polars.DataFrame": [[155, 0, 1, "", "__dataframe__"], [156, 0, 1, "", "apply"], [157, 0, 1, "", "approx_n_unique"], [158, 0, 1, "", "bottom_k"], [159, 0, 1, "", "cast"], [160, 0, 1, "", "clear"], [161, 0, 1, "", "clone"], [162, 1, 1, "", "columns"], [163, 0, 1, "", "corr"], [164, 0, 1, "", "count"], [165, 0, 1, "", "describe"], [166, 0, 1, "", "deserialize"], [167, 0, 1, "", "drop"], [168, 0, 1, "", "drop_in_place"], [169, 0, 1, "", "drop_nulls"], [170, 1, 1, "", "dtypes"], [171, 0, 1, "", "equals"], [172, 0, 1, "", "estimated_size"], [173, 0, 1, "", "explode"], [174, 0, 1, "", "extend"], [175, 0, 1, "", "fill_nan"], [176, 0, 1, "", "fill_null"], [177, 0, 1, "", "filter"], [178, 0, 1, "", "find_idx_by_name"], [179, 1, 1, "", "flags"], [180, 0, 1, "", "fold"], [181, 0, 1, "", "frame_equal"], [182, 0, 1, "", "gather_every"], [183, 0, 1, "", "get_column"], [184, 0, 1, "", "get_column_index"], [185, 0, 1, "", "get_columns"], [186, 0, 1, "", "glimpse"], [187, 0, 1, "", "group_by"], [188, 0, 1, "", "group_by_dynamic"], [189, 0, 1, "", "group_by_rolling"], [190, 0, 1, "", "groupby"], [191, 0, 1, "", "groupby_dynamic"], [192, 0, 1, "", "groupby_rolling"], [193, 0, 1, "", "hash_rows"], [194, 0, 1, "", "head"], [195, 1, 1, "", "height"], [196, 0, 1, "", "hstack"], [197, 0, 1, "", "insert_at_idx"], [198, 0, 1, "", "insert_column"], [199, 0, 1, "", "interpolate"], [200, 0, 1, "", "is_duplicated"], [201, 0, 1, "", "is_empty"], [202, 0, 1, "", "is_unique"], [203, 0, 1, "", "item"], [204, 0, 1, "", "iter_columns"], [205, 0, 1, "", "iter_rows"], [206, 0, 1, "", "iter_slices"], [207, 0, 1, "", "join"], [208, 0, 1, "", "join_asof"], [209, 0, 1, "", "lazy"], [210, 0, 1, "", "limit"], [211, 0, 1, "", "map_rows"], [212, 0, 1, "", "max"], [213, 0, 1, "", "max_horizontal"], [214, 0, 1, "", "mean"], [215, 0, 1, "", "mean_horizontal"], [216, 0, 1, "", "median"], [217, 0, 1, "", "melt"], [218, 0, 1, "", "merge_sorted"], [219, 0, 1, "", "min"], [220, 0, 1, "", "min_horizontal"], [221, 0, 1, "", "n_chunks"], [222, 0, 1, "", "n_unique"], [223, 0, 1, "", "null_count"], [224, 0, 1, "", "partition_by"], [225, 0, 1, "", "pipe"], [226, 0, 1, "", "pivot"], [227, 0, 1, "", "product"], [228, 0, 1, "", "quantile"], [229, 0, 1, "", "rechunk"], [230, 0, 1, "", "rename"], [231, 0, 1, "", "replace"], [232, 0, 1, "", "replace_at_idx"], [233, 0, 1, "", "replace_column"], [234, 0, 1, "", "reverse"], [235, 0, 1, "", "rolling"], [236, 0, 1, "", "row"], [237, 0, 1, "", "rows"], [238, 0, 1, "", "rows_by_key"], [239, 0, 1, "", "sample"], [240, 1, 1, "", "schema"], [241, 0, 1, "", "select"], [242, 0, 1, "", "select_seq"], [243, 0, 1, "", "serialize"], [244, 0, 1, "", "set_sorted"], [245, 1, 1, "", "shape"], [246, 0, 1, "", "shift"], [247, 0, 1, "", "shift_and_fill"], [248, 0, 1, "", "shrink_to_fit"], [249, 0, 1, "", "slice"], [250, 0, 1, "", "sort"], [251, 0, 1, "", "sql"], [252, 0, 1, "", "std"], [253, 0, 1, "", "sum"], [254, 0, 1, "", "sum_horizontal"], [255, 0, 1, "", "tail"], [256, 0, 1, "", "take_every"], [257, 0, 1, "", "to_arrow"], [258, 0, 1, "", "to_dict"], [259, 0, 1, "", "to_dicts"], [260, 0, 1, "", "to_dummies"], [261, 0, 1, "", "to_init_repr"], [262, 0, 1, "", "to_jax"], [263, 0, 1, "", "to_numpy"], [264, 0, 1, "", "to_pandas"], [265, 0, 1, "", "to_series"], [266, 0, 1, "", "to_struct"], [267, 0, 1, "", "to_torch"], [268, 0, 1, "", "top_k"], [269, 0, 1, "", "transpose"], [270, 0, 1, "", "unique"], [271, 0, 1, "", "unnest"], [272, 0, 1, "", "unstack"], [273, 0, 1, "", "update"], [274, 0, 1, "", "upsample"], [275, 0, 1, "", "var"], [276, 0, 1, "", "vstack"], [277, 1, 1, "", "width"], [278, 0, 1, "", "with_columns"], [279, 0, 1, "", "with_columns_seq"], [280, 0, 1, "", "with_row_count"], [281, 0, 1, "", "with_row_index"], [32, 0, 1, "", "write_avro"], [33, 0, 1, "", "write_clipboard"], [34, 0, 1, "", "write_csv"], [35, 0, 1, "", "write_database"], [36, 0, 1, "", "write_delta"], [37, 0, 1, "", "write_excel"], [38, 0, 1, "", "write_ipc"], [39, 0, 1, "", "write_ipc_stream"], [40, 0, 1, "", "write_json"], [41, 0, 1, "", "write_ndjson"], [42, 0, 1, "", "write_parquet"]], "polars.Expr": [[312, 0, 1, "", "abs"], [313, 0, 1, "", "add"], [314, 0, 1, "", "agg_groups"], [315, 0, 1, "", "alias"], [316, 0, 1, "", "all"], [317, 0, 1, "", "and_"], [318, 0, 1, "", "any"], [319, 0, 1, "", "append"], [320, 0, 1, "", "apply"], [321, 0, 1, "", "approx_n_unique"], [322, 0, 1, "", "arccos"], [323, 0, 1, "", "arccosh"], [324, 0, 1, "", "arcsin"], [325, 0, 1, "", "arcsinh"], [326, 0, 1, "", "arctan"], [327, 0, 1, "", "arctanh"], [328, 0, 1, "", "arg_max"], [329, 0, 1, "", "arg_min"], [330, 0, 1, "", "arg_sort"], [331, 0, 1, "", "arg_true"], [332, 0, 1, "", "arg_unique"], [357, 0, 1, "", "backward_fill"], [363, 0, 1, "", "bottom_k"], [364, 0, 1, "", "bottom_k_by"], [365, 0, 1, "", "cast"], [368, 0, 1, "", "cbrt"], [369, 0, 1, "", "ceil"], [370, 0, 1, "", "clip"], [371, 0, 1, "", "clip_max"], [372, 0, 1, "", "clip_min"], [373, 0, 1, "", "cos"], [374, 0, 1, "", "cosh"], [375, 0, 1, "", "cot"], [376, 0, 1, "", "count"], [377, 0, 1, "", "cum_count"], [378, 0, 1, "", "cum_max"], [379, 0, 1, "", "cum_min"], [380, 0, 1, "", "cum_prod"], [381, 0, 1, "", "cum_sum"], [382, 0, 1, "", "cumcount"], [383, 0, 1, "", "cummax"], [384, 0, 1, "", "cummin"], [385, 0, 1, "", "cumprod"], [386, 0, 1, "", "cumsum"], [387, 0, 1, "", "cumulative_eval"], [388, 0, 1, "", "cut"], [389, 0, 1, "", "degrees"], [390, 0, 1, "", "deserialize"], [391, 0, 1, "", "diff"], [392, 0, 1, "", "dot"], [393, 0, 1, "", "drop_nans"], [394, 0, 1, "", "drop_nulls"], [446, 0, 1, "", "entropy"], [447, 0, 1, "", "eq"], [448, 0, 1, "", "eq_missing"], [449, 0, 1, "", "ewm_mean"], [450, 0, 1, "", "ewm_mean_by"], [451, 0, 1, "", "ewm_std"], [452, 0, 1, "", "ewm_var"], [453, 0, 1, "", "exclude"], [454, 0, 1, "", "exp"], [455, 0, 1, "", "explode"], [456, 0, 1, "", "extend_constant"], [457, 0, 1, "", "fill_nan"], [458, 0, 1, "", "fill_null"], [459, 0, 1, "", "filter"], [460, 0, 1, "", "first"], [461, 0, 1, "", "flatten"], [462, 0, 1, "", "floor"], [463, 0, 1, "", "floordiv"], [464, 0, 1, "", "forward_fill"], [465, 0, 1, "", "from_json"], [466, 0, 1, "", "gather"], [467, 0, 1, "", "gather_every"], [468, 0, 1, "", "ge"], [469, 0, 1, "", "get"], [470, 0, 1, "", "gt"], [471, 0, 1, "", "has_nulls"], [472, 0, 1, "", "hash"], [473, 0, 1, "", "head"], [474, 0, 1, "", "hist"], [475, 0, 1, "", "implode"], [476, 0, 1, "", "inspect"], [477, 0, 1, "", "interpolate"], [478, 0, 1, "", "interpolate_by"], [479, 0, 1, "", "is_between"], [480, 0, 1, "", "is_duplicated"], [481, 0, 1, "", "is_finite"], [482, 0, 1, "", "is_first"], [483, 0, 1, "", "is_first_distinct"], [484, 0, 1, "", "is_in"], [485, 0, 1, "", "is_infinite"], [486, 0, 1, "", "is_last"], [487, 0, 1, "", "is_last_distinct"], [488, 0, 1, "", "is_nan"], [489, 0, 1, "", "is_not"], [490, 0, 1, "", "is_not_nan"], [491, 0, 1, "", "is_not_null"], [492, 0, 1, "", "is_null"], [493, 0, 1, "", "is_unique"], [494, 0, 1, "", "keep_name"], [495, 0, 1, "", "kurtosis"], [496, 0, 1, "", "last"], [497, 0, 1, "", "le"], [498, 0, 1, "", "len"], [499, 0, 1, "", "limit"], [543, 0, 1, "", "log"], [544, 0, 1, "", "log10"], [545, 0, 1, "", "log1p"], [546, 0, 1, "", "lower_bound"], [547, 0, 1, "", "lt"], [548, 0, 1, "", "map"], [549, 0, 1, "", "map_alias"], [550, 0, 1, "", "map_batches"], [551, 0, 1, "", "map_dict"], [552, 0, 1, "", "map_elements"], [553, 0, 1, "", "max"], [554, 0, 1, "", "mean"], [555, 0, 1, "", "median"], [568, 0, 1, "", "min"], [569, 0, 1, "", "mod"], [570, 0, 1, "", "mode"], [571, 0, 1, "", "mul"], [572, 0, 1, "", "n_unique"], [582, 0, 1, "", "nan_max"], [583, 0, 1, "", "nan_min"], [584, 0, 1, "", "ne"], [585, 0, 1, "", "ne_missing"], [586, 0, 1, "", "neg"], [587, 0, 1, "", "not_"], [588, 0, 1, "", "null_count"], [589, 0, 1, "", "or_"], [590, 0, 1, "", "over"], [591, 0, 1, "", "pct_change"], [592, 0, 1, "", "peak_max"], [593, 0, 1, "", "peak_min"], [594, 0, 1, "", "pipe"], [595, 0, 1, "", "pow"], [596, 0, 1, "", "prefix"], [597, 0, 1, "", "product"], [598, 0, 1, "", "qcut"], [599, 0, 1, "", "quantile"], [600, 0, 1, "", "radians"], [601, 0, 1, "", "rank"], [602, 0, 1, "", "rechunk"], [603, 0, 1, "", "reinterpret"], [604, 0, 1, "", "repeat_by"], [605, 0, 1, "", "replace"], [606, 0, 1, "", "reshape"], [607, 0, 1, "", "reverse"], [608, 0, 1, "", "rle"], [609, 0, 1, "", "rle_id"], [610, 0, 1, "", "rolling"], [611, 0, 1, "", "rolling_apply"], [612, 0, 1, "", "rolling_map"], [613, 0, 1, "", "rolling_max"], [614, 0, 1, "", "rolling_max_by"], [615, 0, 1, "", "rolling_mean"], [616, 0, 1, "", "rolling_mean_by"], [617, 0, 1, "", "rolling_median"], [618, 0, 1, "", "rolling_median_by"], [619, 0, 1, "", "rolling_min"], [620, 0, 1, "", "rolling_min_by"], [621, 0, 1, "", "rolling_quantile"], [622, 0, 1, "", "rolling_quantile_by"], [623, 0, 1, "", "rolling_skew"], [624, 0, 1, "", "rolling_std"], [625, 0, 1, "", "rolling_std_by"], [626, 0, 1, "", "rolling_sum"], [627, 0, 1, "", "rolling_sum_by"], [628, 0, 1, "", "rolling_var"], [629, 0, 1, "", "rolling_var_by"], [630, 0, 1, "", "round"], [631, 0, 1, "", "round_sig_figs"], [632, 0, 1, "", "sample"], [633, 0, 1, "", "search_sorted"], [634, 0, 1, "", "set_sorted"], [635, 0, 1, "", "shift"], [636, 0, 1, "", "shift_and_fill"], [637, 0, 1, "", "shrink_dtype"], [638, 0, 1, "", "shuffle"], [639, 0, 1, "", "sign"], [640, 0, 1, "", "sin"], [641, 0, 1, "", "sinh"], [642, 0, 1, "", "skew"], [643, 0, 1, "", "slice"], [644, 0, 1, "", "sort"], [645, 0, 1, "", "sort_by"], [646, 0, 1, "", "sqrt"], [647, 0, 1, "", "std"], [706, 0, 1, "", "sub"], [707, 0, 1, "", "suffix"], [708, 0, 1, "", "sum"], [709, 0, 1, "", "tail"], [710, 0, 1, "", "take"], [711, 0, 1, "", "take_every"], [712, 0, 1, "", "tan"], [713, 0, 1, "", "tanh"], [714, 0, 1, "", "to_physical"], [715, 0, 1, "", "top_k"], [716, 0, 1, "", "top_k_by"], [717, 0, 1, "", "truediv"], [718, 0, 1, "", "unique"], [719, 0, 1, "", "unique_counts"], [720, 0, 1, "", "upper_bound"], [721, 0, 1, "", "value_counts"], [722, 0, 1, "", "var"], [723, 0, 1, "", "where"], [724, 0, 1, "", "xor"]], "polars.Expr.arr": [[333, 0, 1, "", "all"], [334, 0, 1, "", "any"], [335, 0, 1, "", "arg_max"], [336, 0, 1, "", "arg_min"], [337, 0, 1, "", "contains"], [338, 0, 1, "", "count_matches"], [339, 0, 1, "", "explode"], [340, 0, 1, "", "first"], [341, 0, 1, "", "get"], [342, 0, 1, "", "join"], [343, 0, 1, "", "last"], [344, 0, 1, "", "max"], [345, 0, 1, "", "median"], [346, 0, 1, "", "min"], [347, 0, 1, "", "n_unique"], [348, 0, 1, "", "reverse"], [349, 0, 1, "", "shift"], [350, 0, 1, "", "sort"], [351, 0, 1, "", "std"], [352, 0, 1, "", "sum"], [353, 0, 1, "", "to_list"], [354, 0, 1, "", "to_struct"], [355, 0, 1, "", "unique"], [356, 0, 1, "", "var"]], "polars.Expr.bin": [[358, 0, 1, "", "contains"], [359, 0, 1, "", "decode"], [360, 0, 1, "", "encode"], [361, 0, 1, "", "ends_with"], [362, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[366, 0, 1, "", "get_categories"], [367, 0, 1, "", "set_ordering"]], "polars.Expr.dt": [[395, 0, 1, "", "add_business_days"], [396, 0, 1, "", "base_utc_offset"], [397, 0, 1, "", "cast_time_unit"], [398, 0, 1, "", "century"], [399, 0, 1, "", "combine"], [400, 0, 1, "", "convert_time_zone"], [401, 0, 1, "", "date"], [402, 0, 1, "", "datetime"], [403, 0, 1, "", "day"], [404, 0, 1, "", "days"], [405, 0, 1, "", "dst_offset"], [406, 0, 1, "", "epoch"], [407, 0, 1, "", "hour"], [408, 0, 1, "", "hours"], [409, 0, 1, "", "is_leap_year"], [410, 0, 1, "", "iso_year"], [411, 0, 1, "", "microsecond"], [412, 0, 1, "", "microseconds"], [413, 0, 1, "", "millennium"], [414, 0, 1, "", "millisecond"], [415, 0, 1, "", "milliseconds"], [416, 0, 1, "", "minute"], [417, 0, 1, "", "minutes"], [418, 0, 1, "", "month"], [419, 0, 1, "", "month_end"], [420, 0, 1, "", "month_start"], [421, 0, 1, "", "nanosecond"], [422, 0, 1, "", "nanoseconds"], [423, 0, 1, "", "offset_by"], [424, 0, 1, "", "ordinal_day"], [425, 0, 1, "", "quarter"], [426, 0, 1, "", "replace_time_zone"], [427, 0, 1, "", "round"], [428, 0, 1, "", "second"], [429, 0, 1, "", "seconds"], [430, 0, 1, "", "strftime"], [431, 0, 1, "", "time"], [432, 0, 1, "", "timestamp"], [433, 0, 1, "", "to_string"], [434, 0, 1, "", "total_days"], [435, 0, 1, "", "total_hours"], [436, 0, 1, "", "total_microseconds"], [437, 0, 1, "", "total_milliseconds"], [438, 0, 1, "", "total_minutes"], [439, 0, 1, "", "total_nanoseconds"], [440, 0, 1, "", "total_seconds"], [441, 0, 1, "", "truncate"], [442, 0, 1, "", "week"], [443, 0, 1, "", "weekday"], [444, 0, 1, "", "with_time_unit"], [445, 0, 1, "", "year"]], "polars.Expr.list": [[500, 0, 1, "", "all"], [501, 0, 1, "", "any"], [502, 0, 1, "", "arg_max"], [503, 0, 1, "", "arg_min"], [504, 0, 1, "", "concat"], [505, 0, 1, "", "contains"], [506, 0, 1, "", "count_match"], [507, 0, 1, "", "count_matches"], [508, 0, 1, "", "diff"], [509, 0, 1, "", "drop_nulls"], [510, 0, 1, "", "eval"], [511, 0, 1, "", "explode"], [512, 0, 1, "", "first"], [513, 0, 1, "", "gather"], [514, 0, 1, "", "gather_every"], [515, 0, 1, "", "get"], [516, 0, 1, "", "head"], [517, 0, 1, "", "join"], [518, 0, 1, "", "last"], [519, 0, 1, "", "len"], [520, 0, 1, "", "lengths"], [521, 0, 1, "", "max"], [522, 0, 1, "", "mean"], [523, 0, 1, "", "median"], [524, 0, 1, "", "min"], [525, 0, 1, "", "n_unique"], [526, 0, 1, "", "reverse"], [527, 0, 1, "", "sample"], [528, 0, 1, "", "set_difference"], [529, 0, 1, "", "set_intersection"], [530, 0, 1, "", "set_symmetric_difference"], [531, 0, 1, "", "set_union"], [532, 0, 1, "", "shift"], [533, 0, 1, "", "slice"], [534, 0, 1, "", "sort"], [535, 0, 1, "", "std"], [536, 0, 1, "", "sum"], [537, 0, 1, "", "tail"], [538, 0, 1, "", "take"], [539, 0, 1, "", "to_array"], [540, 0, 1, "", "to_struct"], [541, 0, 1, "", "unique"], [542, 0, 1, "", "var"]], "polars.Expr.meta": [[556, 0, 1, "", "eq"], [557, 0, 1, "", "has_multiple_outputs"], [558, 0, 1, "", "is_column_selection"], [559, 0, 1, "", "is_regex_projection"], [560, 0, 1, "", "ne"], [561, 0, 1, "", "output_name"], [562, 0, 1, "", "pop"], [563, 0, 1, "", "root_names"], [564, 0, 1, "", "serialize"], [565, 0, 1, "", "tree_format"], [566, 0, 1, "", "undo_aliases"], [567, 0, 1, "", "write_json"]], "polars.Expr.name": [[573, 0, 1, "", "keep"], [574, 0, 1, "", "map"], [575, 0, 1, "", "map_fields"], [576, 0, 1, "", "prefix"], [577, 0, 1, "", "prefix_fields"], [578, 0, 1, "", "suffix"], [579, 0, 1, "", "suffix_fields"], [580, 0, 1, "", "to_lowercase"], [581, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[648, 0, 1, "", "concat"], [649, 0, 1, "", "contains"], [650, 0, 1, "", "contains_any"], [651, 0, 1, "", "count_match"], [652, 0, 1, "", "count_matches"], [653, 0, 1, "", "decode"], [654, 0, 1, "", "encode"], [655, 0, 1, "", "ends_with"], [656, 0, 1, "", "explode"], [657, 0, 1, "", "extract"], [658, 0, 1, "", "extract_all"], [659, 0, 1, "", "extract_groups"], [660, 0, 1, "", "find"], [661, 0, 1, "", "head"], [662, 0, 1, "", "json_decode"], [663, 0, 1, "", "json_extract"], [664, 0, 1, "", "json_path_match"], [665, 0, 1, "", "len_bytes"], [666, 0, 1, "", "len_chars"], [667, 0, 1, "", "lengths"], [668, 0, 1, "", "ljust"], [669, 0, 1, "", "lstrip"], [670, 0, 1, "", "n_chars"], [671, 0, 1, "", "pad_end"], [672, 0, 1, "", "pad_start"], [673, 0, 1, "", "parse_int"], [674, 0, 1, "", "replace"], [675, 0, 1, "", "replace_all"], [676, 0, 1, "", "replace_many"], [677, 0, 1, "", "reverse"], [678, 0, 1, "", "rjust"], [679, 0, 1, "", "rstrip"], [680, 0, 1, "", "slice"], [681, 0, 1, "", "split"], [682, 0, 1, "", "split_exact"], [683, 0, 1, "", "splitn"], [684, 0, 1, "", "starts_with"], [685, 0, 1, "", "strip"], [686, 0, 1, "", "strip_chars"], [687, 0, 1, "", "strip_chars_end"], [688, 0, 1, "", "strip_chars_start"], [689, 0, 1, "", "strip_prefix"], [690, 0, 1, "", "strip_suffix"], [691, 0, 1, "", "strptime"], [692, 0, 1, "", "tail"], [693, 0, 1, "", "to_date"], [694, 0, 1, "", "to_datetime"], [695, 0, 1, "", "to_decimal"], [696, 0, 1, "", "to_integer"], [697, 0, 1, "", "to_lowercase"], [698, 0, 1, "", "to_time"], [699, 0, 1, "", "to_titlecase"], [700, 0, 1, "", "to_uppercase"], [701, 0, 1, "", "zfill"]], "polars.Expr.struct": [[702, 0, 1, "", "field"], [703, 0, 1, "", "json_encode"], [704, 0, 1, "", "rename_fields"], [705, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[828, 0, 1, "", "approx_n_unique"], [829, 0, 1, "", "bottom_k"], [830, 0, 1, "", "cache"], [831, 0, 1, "", "cast"], [832, 0, 1, "", "clear"], [833, 0, 1, "", "clone"], [834, 0, 1, "", "collect"], [835, 0, 1, "", "collect_async"], [836, 1, 1, "", "columns"], [837, 0, 1, "", "count"], [838, 0, 1, "", "describe"], [839, 0, 1, "", "deserialize"], [840, 0, 1, "", "drop"], [841, 0, 1, "", "drop_nulls"], [842, 1, 1, "", "dtypes"], [843, 0, 1, "", "explain"], [844, 0, 1, "", "explode"], [845, 0, 1, "", "fetch"], [846, 0, 1, "", "fill_nan"], [847, 0, 1, "", "fill_null"], [848, 0, 1, "", "filter"], [849, 0, 1, "", "first"], [850, 0, 1, "", "gather_every"], [851, 0, 1, "", "group_by"], [852, 0, 1, "", "group_by_dynamic"], [853, 0, 1, "", "group_by_rolling"], [854, 0, 1, "", "groupby"], [855, 0, 1, "", "groupby_dynamic"], [856, 0, 1, "", "groupby_rolling"], [857, 0, 1, "", "head"], [858, 0, 1, "", "inspect"], [859, 0, 1, "", "interpolate"], [860, 0, 1, "", "join"], [861, 0, 1, "", "join_asof"], [862, 0, 1, "", "last"], [863, 0, 1, "", "lazy"], [864, 0, 1, "", "limit"], [865, 0, 1, "", "map"], [866, 0, 1, "", "map_batches"], [867, 0, 1, "", "max"], [868, 0, 1, "", "mean"], [869, 0, 1, "", "median"], [870, 0, 1, "", "melt"], [871, 0, 1, "", "merge_sorted"], [872, 0, 1, "", "min"], [873, 0, 1, "", "null_count"], [874, 0, 1, "", "pipe"], [875, 0, 1, "", "profile"], [876, 0, 1, "", "quantile"], [877, 0, 1, "", "rename"], [878, 0, 1, "", "reverse"], [879, 0, 1, "", "rolling"], [880, 1, 1, "", "schema"], [881, 0, 1, "", "select"], [882, 0, 1, "", "select_seq"], [883, 0, 1, "", "serialize"], [884, 0, 1, "", "set_sorted"], [885, 0, 1, "", "shift"], [886, 0, 1, "", "shift_and_fill"], [887, 0, 1, "", "show_graph"], [43, 0, 1, "", "sink_csv"], [44, 0, 1, "", "sink_ipc"], [45, 0, 1, "", "sink_ndjson"], [46, 0, 1, "", "sink_parquet"], [888, 0, 1, "", "slice"], [889, 0, 1, "", "sort"], [890, 0, 1, "", "sql"], [891, 0, 1, "", "std"], [892, 0, 1, "", "sum"], [893, 0, 1, "", "tail"], [894, 0, 1, "", "take_every"], [895, 0, 1, "", "top_k"], [896, 0, 1, "", "unique"], [897, 0, 1, "", "unnest"], [898, 0, 1, "", "update"], [899, 0, 1, "", "var"], [900, 1, 1, "", "width"], [901, 0, 1, "", "with_columns"], [902, 0, 1, "", "with_columns_seq"], [903, 0, 1, "", "with_context"], [904, 0, 1, "", "with_row_count"], [905, 0, 1, "", "with_row_index"]], "polars": [[1350, 2, 1, "", "SQLContext"], [47, 2, 1, "", "StringCache"], [48, 4, 1, "", "align_frames"], [725, 4, 1, "", "all"], [726, 4, 1, "", "all_horizontal"], [727, 4, 1, "", "any"], [728, 4, 1, "", "any_horizontal"], [729, 4, 1, "", "apply"], [730, 4, 1, "", "approx_n_unique"], [731, 4, 1, "", "arange"], [732, 4, 1, "", "arctan2"], [733, 4, 1, "", "arctan2d"], [734, 4, 1, "", "arg_sort_by"], [735, 4, 1, "", "arg_where"], [53, 4, 1, "", "build_info"], [736, 4, 1, "", "business_day_count"], [737, 4, 1, "", "coalesce"], [54, 4, 1, "", "collect_all"], [55, 4, 1, "", "collect_all_async"], [56, 4, 1, "", "concat"], [738, 4, 1, "", "concat_list"], [739, 4, 1, "", "concat_str"], [740, 4, 1, "", "corr"], [741, 4, 1, "", "count"], [742, 4, 1, "", "cov"], [743, 4, 1, "", "cum_count"], [744, 4, 1, "", "cum_fold"], [745, 4, 1, "", "cum_reduce"], [746, 4, 1, "", "cum_sum"], [747, 4, 1, "", "cum_sum_horizontal"], [748, 4, 1, "", "cumfold"], [749, 4, 1, "", "cumreduce"], [750, 4, 1, "", "cumsum"], [751, 4, 1, "", "cumsum_horizontal"], [752, 4, 1, "", "date"], [753, 4, 1, "", "date_range"], [754, 4, 1, "", "date_ranges"], [755, 4, 1, "", "datetime"], [756, 4, 1, "", "datetime_range"], [757, 4, 1, "", "datetime_ranges"], [85, 4, 1, "", "disable_string_cache"], [758, 4, 1, "", "duration"], [759, 4, 1, "", "element"], [86, 4, 1, "", "enable_string_cache"], [760, 4, 1, "", "exclude"], [761, 4, 1, "", "first"], [762, 4, 1, "", "fold"], [763, 4, 1, "", "format"], [102, 4, 1, "", "from_arrow"], [103, 4, 1, "", "from_dataframe"], [104, 4, 1, "", "from_dict"], [105, 4, 1, "", "from_dicts"], [764, 4, 1, "", "from_epoch"], [106, 4, 1, "", "from_numpy"], [107, 4, 1, "", "from_pandas"], [108, 4, 1, "", "from_records"], [109, 4, 1, "", "from_repr"], [110, 4, 1, "", "get_index_type"], [765, 4, 1, "", "groups"], [766, 4, 1, "", "head"], [767, 4, 1, "", "implode"], [768, 4, 1, "", "int_range"], [769, 4, 1, "", "int_ranges"], [770, 4, 1, "", "last"], [771, 4, 1, "", "len"], [772, 4, 1, "", "lit"], [773, 4, 1, "", "map"], [774, 4, 1, "", "map_batches"], [775, 4, 1, "", "map_groups"], [776, 4, 1, "", "max"], [777, 4, 1, "", "max_horizontal"], [778, 4, 1, "", "mean"], [779, 4, 1, "", "mean_horizontal"], [780, 4, 1, "", "median"], [781, 4, 1, "", "min"], [782, 4, 1, "", "min_horizontal"], [783, 4, 1, "", "n_unique"], [784, 4, 1, "", "nth"], [785, 4, 1, "", "ones"], [930, 6, 0, "-", "plugins"], [786, 4, 1, "", "quantile"], [112, 4, 1, "", "read_avro"], [113, 4, 1, "", "read_clipboard"], [114, 4, 1, "", "read_csv"], [115, 4, 1, "", "read_csv_batched"], [116, 4, 1, "", "read_database"], [117, 4, 1, "", "read_database_uri"], [118, 4, 1, "", "read_delta"], [119, 4, 1, "", "read_excel"], [120, 4, 1, "", "read_ipc"], [121, 4, 1, "", "read_ipc_schema"], [122, 4, 1, "", "read_ipc_stream"], [123, 4, 1, "", "read_json"], [124, 4, 1, "", "read_ndjson"], [125, 4, 1, "", "read_ods"], [126, 4, 1, "", "read_parquet"], [127, 4, 1, "", "read_parquet_schema"], [787, 4, 1, "", "reduce"], [788, 4, 1, "", "repeat"], [789, 4, 1, "", "rolling_corr"], [790, 4, 1, "", "rolling_cov"], [128, 4, 1, "", "scan_csv"], [129, 4, 1, "", "scan_delta"], [130, 4, 1, "", "scan_iceberg"], [131, 4, 1, "", "scan_ipc"], [132, 4, 1, "", "scan_ndjson"], [133, 4, 1, "", "scan_parquet"], [134, 4, 1, "", "scan_pyarrow_dataset"], [791, 4, 1, "", "select"], [931, 6, 0, "-", "selectors"], [135, 4, 1, "", "set_random_seed"], [136, 4, 1, "", "show_versions"], [792, 4, 1, "", "sql"], [793, 4, 1, "", "sql_expr"], [794, 4, 1, "", "std"], [795, 4, 1, "", "struct"], [796, 4, 1, "", "sum"], [797, 4, 1, "", "sum_horizontal"], [798, 4, 1, "", "tail"], [150, 4, 1, "", "thread_pool_size"], [151, 4, 1, "", "threadpool_size"], [799, 4, 1, "", "time"], [800, 4, 1, "", "time_range"], [801, 4, 1, "", "time_ranges"], [152, 4, 1, "", "using_string_cache"], [802, 4, 1, "", "var"], [803, 4, 1, "", "when"], [804, 4, 1, "", "zeros"]], "polars.SQLContext": [[1350, 0, 1, "", "__enter__"], [1350, 0, 1, "", "__exit__"], [1350, 0, 1, "", "__init__"], [1334, 0, 1, "", "execute"], [1335, 0, 1, "", "register"], [1336, 0, 1, "", "register_globals"], [1337, 0, 1, "", "register_many"], [1338, 0, 1, "", "tables"], [1339, 0, 1, "", "unregister"]], "polars.Series": [[933, 0, 1, "", "abs"], [934, 0, 1, "", "alias"], [935, 0, 1, "", "all"], [936, 0, 1, "", "any"], [937, 0, 1, "", "append"], [938, 0, 1, "", "apply"], [939, 0, 1, "", "arccos"], [940, 0, 1, "", "arccosh"], [941, 0, 1, "", "arcsin"], [942, 0, 1, "", "arcsinh"], [943, 0, 1, "", "arctan"], [944, 0, 1, "", "arctanh"], [945, 0, 1, "", "arg_max"], [946, 0, 1, "", "arg_min"], [947, 0, 1, "", "arg_sort"], [948, 0, 1, "", "arg_true"], [949, 0, 1, "", "arg_unique"], [979, 0, 1, "", "bottom_k"], [980, 0, 1, "", "cast"], [986, 0, 1, "", "cbrt"], [987, 0, 1, "", "ceil"], [988, 0, 1, "", "chunk_lengths"], [989, 0, 1, "", "clear"], [990, 0, 1, "", "clip"], [991, 0, 1, "", "clip_max"], [992, 0, 1, "", "clip_min"], [993, 0, 1, "", "clone"], [994, 0, 1, "", "cos"], [995, 0, 1, "", "cosh"], [996, 0, 1, "", "cot"], [997, 0, 1, "", "cum_count"], [998, 0, 1, "", "cum_max"], [999, 0, 1, "", "cum_min"], [1000, 0, 1, "", "cum_prod"], [1001, 0, 1, "", "cum_sum"], [1002, 0, 1, "", "cummax"], [1003, 0, 1, "", "cummin"], [1004, 0, 1, "", "cumprod"], [1005, 0, 1, "", "cumsum"], [1006, 0, 1, "", "cumulative_eval"], [1007, 0, 1, "", "cut"], [1008, 0, 1, "", "describe"], [1009, 0, 1, "", "diff"], [1010, 0, 1, "", "dot"], [1011, 0, 1, "", "drop_nans"], [1012, 0, 1, "", "drop_nulls"], [1068, 3, 1, "", "dtype"], [1069, 0, 1, "", "entropy"], [1070, 0, 1, "", "equals"], [1071, 0, 1, "", "estimated_size"], [1072, 0, 1, "", "ewm_mean"], [1073, 0, 1, "", "ewm_mean_by"], [1074, 0, 1, "", "ewm_std"], [1075, 0, 1, "", "ewm_var"], [1076, 0, 1, "", "exp"], [1077, 0, 1, "", "explode"], [1078, 0, 1, "", "extend"], [1079, 0, 1, "", "extend_constant"], [1080, 0, 1, "", "fill_nan"], [1081, 0, 1, "", "fill_null"], [1082, 0, 1, "", "filter"], [1083, 3, 1, "", "flags"], [1084, 0, 1, "", "floor"], [1085, 0, 1, "", "gather"], [1086, 0, 1, "", "gather_every"], [1087, 0, 1, "", "get_chunks"], [1088, 0, 1, "", "has_nulls"], [1089, 0, 1, "", "has_validity"], [1090, 0, 1, "", "hash"], [1091, 0, 1, "", "head"], [1092, 0, 1, "", "hist"], [1093, 0, 1, "", "implode"], [1094, 3, 1, "", "inner_dtype"], [1095, 0, 1, "", "interpolate"], [1096, 0, 1, "", "interpolate_by"], [1097, 0, 1, "", "is_between"], [1098, 0, 1, "", "is_boolean"], [1099, 0, 1, "", "is_duplicated"], [1100, 0, 1, "", "is_empty"], [1101, 0, 1, "", "is_finite"], [1102, 0, 1, "", "is_first"], [1103, 0, 1, "", "is_first_distinct"], [1104, 0, 1, "", "is_float"], [1105, 0, 1, "", "is_in"], [1106, 0, 1, "", "is_infinite"], [1107, 0, 1, "", "is_integer"], [1108, 0, 1, "", "is_last"], [1109, 0, 1, "", "is_last_distinct"], [1110, 0, 1, "", "is_nan"], [1111, 0, 1, "", "is_not_nan"], [1112, 0, 1, "", "is_not_null"], [1113, 0, 1, "", "is_null"], [1114, 0, 1, "", "is_numeric"], [1115, 0, 1, "", "is_sorted"], [1116, 0, 1, "", "is_temporal"], [1117, 0, 1, "", "is_unique"], [1118, 0, 1, "", "is_utf8"], [1119, 0, 1, "", "item"], [1120, 0, 1, "", "kurtosis"], [1121, 0, 1, "", "len"], [1122, 0, 1, "", "limit"], [1166, 0, 1, "", "log"], [1167, 0, 1, "", "log10"], [1168, 0, 1, "", "log1p"], [1169, 0, 1, "", "lower_bound"], [1170, 0, 1, "", "map_dict"], [1171, 0, 1, "", "map_elements"], [1172, 0, 1, "", "max"], [1173, 0, 1, "", "mean"], [1174, 0, 1, "", "median"], [1175, 0, 1, "", "min"], [1176, 0, 1, "", "mode"], [1177, 0, 1, "", "n_chunks"], [1178, 0, 1, "", "n_unique"], [1179, 3, 1, "", "name"], [1180, 0, 1, "", "nan_max"], [1181, 0, 1, "", "nan_min"], [1182, 0, 1, "", "new_from_index"], [1183, 0, 1, "", "not_"], [1184, 0, 1, "", "null_count"], [1185, 0, 1, "", "pct_change"], [1186, 0, 1, "", "peak_max"], [1187, 0, 1, "", "peak_min"], [1188, 0, 1, "", "product"], [1189, 0, 1, "", "qcut"], [1190, 0, 1, "", "quantile"], [1191, 0, 1, "", "rank"], [1192, 0, 1, "", "rechunk"], [1193, 0, 1, "", "reinterpret"], [1194, 0, 1, "", "rename"], [1195, 0, 1, "", "replace"], [1196, 0, 1, "", "reshape"], [1197, 0, 1, "", "reverse"], [1198, 0, 1, "", "rle"], [1199, 0, 1, "", "rle_id"], [1200, 0, 1, "", "rolling_apply"], [1201, 0, 1, "", "rolling_map"], [1202, 0, 1, "", "rolling_max"], [1203, 0, 1, "", "rolling_mean"], [1204, 0, 1, "", "rolling_median"], [1205, 0, 1, "", "rolling_min"], [1206, 0, 1, "", "rolling_quantile"], [1207, 0, 1, "", "rolling_skew"], [1208, 0, 1, "", "rolling_std"], [1209, 0, 1, "", "rolling_sum"], [1210, 0, 1, "", "rolling_var"], [1211, 0, 1, "", "round"], [1212, 0, 1, "", "round_sig_figs"], [1213, 0, 1, "", "sample"], [1214, 0, 1, "", "scatter"], [1215, 0, 1, "", "search_sorted"], [1216, 0, 1, "", "series_equal"], [1217, 0, 1, "", "set"], [1218, 0, 1, "", "set_at_idx"], [1219, 0, 1, "", "set_sorted"], [1220, 3, 1, "", "shape"], [1221, 0, 1, "", "shift"], [1222, 0, 1, "", "shift_and_fill"], [1223, 0, 1, "", "shrink_dtype"], [1224, 0, 1, "", "shrink_to_fit"], [1225, 0, 1, "", "shuffle"], [1226, 0, 1, "", "sign"], [1227, 0, 1, "", "sin"], [1228, 0, 1, "", "sinh"], [1229, 0, 1, "", "skew"], [1230, 0, 1, "", "slice"], [1231, 0, 1, "", "sort"], [1232, 0, 1, "", "sqrt"], [1233, 0, 1, "", "std"], [1294, 0, 1, "", "sum"], [1295, 0, 1, "", "tail"], [1296, 0, 1, "", "take"], [1297, 0, 1, "", "take_every"], [1298, 0, 1, "", "tan"], [1299, 0, 1, "", "tanh"], [1300, 0, 1, "", "to_arrow"], [1301, 0, 1, "", "to_dummies"], [1302, 0, 1, "", "to_frame"], [1303, 0, 1, "", "to_init_repr"], [1304, 0, 1, "", "to_jax"], [1305, 0, 1, "", "to_list"], [1306, 0, 1, "", "to_numpy"], [1307, 0, 1, "", "to_pandas"], [1308, 0, 1, "", "to_physical"], [1309, 0, 1, "", "to_torch"], [1310, 0, 1, "", "top_k"], [1311, 0, 1, "", "unique"], [1312, 0, 1, "", "unique_counts"], [1313, 0, 1, "", "upper_bound"], [1314, 0, 1, "", "value_counts"], [1315, 0, 1, "", "var"], [1316, 0, 1, "", "view"], [1317, 0, 1, "", "zip_with"]], "polars.Series.arr": [[950, 0, 1, "", "all"], [951, 0, 1, "", "any"], [952, 0, 1, "", "arg_max"], [953, 0, 1, "", "arg_min"], [954, 0, 1, "", "contains"], [955, 0, 1, "", "count_matches"], [956, 0, 1, "", "explode"], [957, 0, 1, "", "first"], [958, 0, 1, "", "get"], [959, 0, 1, "", "join"], [960, 0, 1, "", "last"], [961, 0, 1, "", "max"], [962, 0, 1, "", "median"], [963, 0, 1, "", "min"], [964, 0, 1, "", "n_unique"], [965, 0, 1, "", "reverse"], [966, 0, 1, "", "shift"], [967, 0, 1, "", "sort"], [968, 0, 1, "", "std"], [969, 0, 1, "", "sum"], [970, 0, 1, "", "to_list"], [971, 0, 1, "", "to_struct"], [972, 0, 1, "", "unique"], [973, 0, 1, "", "var"]], "polars.Series.bin": [[974, 0, 1, "", "contains"], [975, 0, 1, "", "decode"], [976, 0, 1, "", "encode"], [977, 0, 1, "", "ends_with"], [978, 0, 1, "", "starts_with"]], "polars.Series.cat": [[981, 0, 1, "", "get_categories"], [982, 0, 1, "", "is_local"], [983, 0, 1, "", "set_ordering"], [984, 0, 1, "", "to_local"], [985, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1013, 0, 1, "", "add_business_days"], [1014, 0, 1, "", "base_utc_offset"], [1015, 0, 1, "", "cast_time_unit"], [1016, 0, 1, "", "century"], [1017, 0, 1, "", "combine"], [1018, 0, 1, "", "convert_time_zone"], [1019, 0, 1, "", "date"], [1020, 0, 1, "", "datetime"], [1021, 0, 1, "", "day"], [1022, 0, 1, "", "days"], [1023, 0, 1, "", "dst_offset"], [1024, 0, 1, "", "epoch"], [1025, 0, 1, "", "hour"], [1026, 0, 1, "", "hours"], [1027, 0, 1, "", "is_leap_year"], [1028, 0, 1, "", "iso_year"], [1029, 0, 1, "", "max"], [1030, 0, 1, "", "mean"], [1031, 0, 1, "", "median"], [1032, 0, 1, "", "microsecond"], [1033, 0, 1, "", "microseconds"], [1034, 0, 1, "", "millennium"], [1035, 0, 1, "", "millisecond"], [1036, 0, 1, "", "milliseconds"], [1037, 0, 1, "", "min"], [1038, 0, 1, "", "minute"], [1039, 0, 1, "", "minutes"], [1040, 0, 1, "", "month"], [1041, 0, 1, "", "month_end"], [1042, 0, 1, "", "month_start"], [1043, 0, 1, "", "nanosecond"], [1044, 0, 1, "", "nanoseconds"], [1045, 0, 1, "", "offset_by"], [1046, 0, 1, "", "ordinal_day"], [1047, 0, 1, "", "quarter"], [1048, 0, 1, "", "replace_time_zone"], [1049, 0, 1, "", "round"], [1050, 0, 1, "", "second"], [1051, 0, 1, "", "seconds"], [1052, 0, 1, "", "strftime"], [1053, 0, 1, "", "time"], [1054, 0, 1, "", "timestamp"], [1055, 0, 1, "", "to_string"], [1056, 0, 1, "", "total_days"], [1057, 0, 1, "", "total_hours"], [1058, 0, 1, "", "total_microseconds"], [1059, 0, 1, "", "total_milliseconds"], [1060, 0, 1, "", "total_minutes"], [1061, 0, 1, "", "total_nanoseconds"], [1062, 0, 1, "", "total_seconds"], [1063, 0, 1, "", "truncate"], [1064, 0, 1, "", "week"], [1065, 0, 1, "", "weekday"], [1066, 0, 1, "", "with_time_unit"], [1067, 0, 1, "", "year"]], "polars.Series.list": [[1123, 0, 1, "", "all"], [1124, 0, 1, "", "any"], [1125, 0, 1, "", "arg_max"], [1126, 0, 1, "", "arg_min"], [1127, 0, 1, "", "concat"], [1128, 0, 1, "", "contains"], [1129, 0, 1, "", "count_match"], [1130, 0, 1, "", "count_matches"], [1131, 0, 1, "", "diff"], [1132, 0, 1, "", "drop_nulls"], [1133, 0, 1, "", "eval"], [1134, 0, 1, "", "explode"], [1135, 0, 1, "", "first"], [1136, 0, 1, "", "gather"], [1137, 0, 1, "", "gather_every"], [1138, 0, 1, "", "get"], [1139, 0, 1, "", "head"], [1140, 0, 1, "", "join"], [1141, 0, 1, "", "last"], [1142, 0, 1, "", "len"], [1143, 0, 1, "", "lengths"], [1144, 0, 1, "", "max"], [1145, 0, 1, "", "mean"], [1146, 0, 1, "", "median"], [1147, 0, 1, "", "min"], [1148, 0, 1, "", "n_unique"], [1149, 0, 1, "", "reverse"], [1150, 0, 1, "", "sample"], [1151, 0, 1, "", "set_difference"], [1152, 0, 1, "", "set_intersection"], [1153, 0, 1, "", "set_symmetric_difference"], [1154, 0, 1, "", "set_union"], [1155, 0, 1, "", "shift"], [1156, 0, 1, "", "slice"], [1157, 0, 1, "", "sort"], [1158, 0, 1, "", "std"], [1159, 0, 1, "", "sum"], [1160, 0, 1, "", "tail"], [1161, 0, 1, "", "take"], [1162, 0, 1, "", "to_array"], [1163, 0, 1, "", "to_struct"], [1164, 0, 1, "", "unique"], [1165, 0, 1, "", "var"]], "polars.Series.str": [[1234, 0, 1, "", "concat"], [1235, 0, 1, "", "contains"], [1236, 0, 1, "", "contains_any"], [1237, 0, 1, "", "count_match"], [1238, 0, 1, "", "count_matches"], [1239, 0, 1, "", "decode"], [1240, 0, 1, "", "encode"], [1241, 0, 1, "", "ends_with"], [1242, 0, 1, "", "explode"], [1243, 0, 1, "", "extract"], [1244, 0, 1, "", "extract_all"], [1245, 0, 1, "", "extract_groups"], [1246, 0, 1, "", "find"], [1247, 0, 1, "", "head"], [1248, 0, 1, "", "json_decode"], [1249, 0, 1, "", "json_extract"], [1250, 0, 1, "", "json_path_match"], [1251, 0, 1, "", "len_bytes"], [1252, 0, 1, "", "len_chars"], [1253, 0, 1, "", "lengths"], [1254, 0, 1, "", "ljust"], [1255, 0, 1, "", "lstrip"], [1256, 0, 1, "", "n_chars"], [1257, 0, 1, "", "pad_end"], [1258, 0, 1, "", "pad_start"], [1259, 0, 1, "", "parse_int"], [1260, 0, 1, "", "replace"], [1261, 0, 1, "", "replace_all"], [1262, 0, 1, "", "replace_many"], [1263, 0, 1, "", "reverse"], [1264, 0, 1, "", "rjust"], [1265, 0, 1, "", "rstrip"], [1266, 0, 1, "", "slice"], [1267, 0, 1, "", "split"], [1268, 0, 1, "", "split_exact"], [1269, 0, 1, "", "splitn"], [1270, 0, 1, "", "starts_with"], [1271, 0, 1, "", "strip"], [1272, 0, 1, "", "strip_chars"], [1273, 0, 1, "", "strip_chars_end"], [1274, 0, 1, "", "strip_chars_start"], [1275, 0, 1, "", "strip_prefix"], [1276, 0, 1, "", "strip_suffix"], [1277, 0, 1, "", "strptime"], [1278, 0, 1, "", "tail"], [1279, 0, 1, "", "to_date"], [1280, 0, 1, "", "to_datetime"], [1281, 0, 1, "", "to_decimal"], [1282, 0, 1, "", "to_integer"], [1283, 0, 1, "", "to_lowercase"], [1284, 0, 1, "", "to_time"], [1285, 0, 1, "", "to_titlecase"], [1286, 0, 1, "", "to_uppercase"], [1287, 0, 1, "", "zfill"]], "polars.Series.struct": [[1288, 0, 1, "", "field"], [1289, 3, 1, "", "fields"], [1290, 0, 1, "", "json_encode"], [1291, 0, 1, "", "rename_fields"], [1292, 3, 1, "", "schema"], [1293, 0, 1, "", "unnest"]], "polars.StringCache": [[47, 0, 1, "", "__init__"]], "polars.api": [[49, 4, 1, "", "register_dataframe_namespace"], [50, 4, 1, "", "register_expr_namespace"], [51, 4, 1, "", "register_lazyframe_namespace"], [52, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[282, 0, 1, "", "__iter__"], [283, 0, 1, "", "agg"], [284, 0, 1, "", "all"], [285, 0, 1, "", "apply"], [286, 0, 1, "", "count"], [287, 0, 1, "", "first"], [288, 0, 1, "", "head"], [289, 0, 1, "", "last"], [290, 0, 1, "", "len"], [291, 0, 1, "", "map_groups"], [292, 0, 1, "", "max"], [293, 0, 1, "", "mean"], [294, 0, 1, "", "median"], [295, 0, 1, "", "min"], [296, 0, 1, "", "n_unique"], [297, 0, 1, "", "quantile"], [298, 0, 1, "", "sum"], [299, 0, 1, "", "tail"]], "polars.datatypes": [[57, 2, 1, "", "Array"], [58, 2, 1, "", "Binary"], [59, 2, 1, "", "Boolean"], [60, 2, 1, "", "Categorical"], [61, 2, 1, "", "DataType"], [62, 2, 1, "", "Date"], [63, 2, 1, "", "Datetime"], [64, 2, 1, "", "Decimal"], [65, 2, 1, "", "Duration"], [66, 2, 1, "", "Enum"], [67, 2, 1, "", "Float32"], [68, 2, 1, "", "Float64"], [69, 2, 1, "", "Int16"], [70, 2, 1, "", "Int32"], [71, 2, 1, "", "Int64"], [72, 2, 1, "", "Int8"], [73, 2, 1, "", "List"], [74, 2, 1, "", "Null"], [75, 2, 1, "", "Object"], [76, 2, 1, "", "String"], [77, 2, 1, "", "Struct"], [78, 2, 1, "", "Time"], [79, 2, 1, "", "UInt16"], [80, 2, 1, "", "UInt32"], [81, 2, 1, "", "UInt64"], [82, 2, 1, "", "UInt8"], [83, 2, 1, "", "Unknown"], [84, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[57, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[58, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[59, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[60, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[72, 0, 1, "", "__init__"]], "polars.datatypes.List": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[75, 0, 1, "", "__init__"]], "polars.datatypes.String": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[78, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[79, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[81, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[83, 0, 1, "", "__init__"]], "polars.exceptions": [[87, 5, 1, "", "ArrowError"], [88, 5, 1, "", "ColumnNotFoundError"], [89, 5, 1, "", "ComputeError"], [90, 5, 1, "", "DuplicateError"], [91, 5, 1, "", "InvalidOperationError"], [92, 5, 1, "", "NoDataError"], [93, 5, 1, "", "NoRowsReturnedError"], [94, 5, 1, "", "PolarsError"], [95, 5, 1, "", "PolarsPanicError"], [96, 5, 1, "", "RowsError"], [97, 5, 1, "", "SchemaError"], [98, 5, 1, "", "SchemaFieldNotFoundError"], [99, 5, 1, "", "ShapeError"], [100, 5, 1, "", "StructFieldNotFoundError"], [101, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[111, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[906, 0, 1, "", "agg"], [907, 0, 1, "", "all"], [908, 0, 1, "", "apply"], [909, 0, 1, "", "count"], [910, 0, 1, "", "first"], [911, 0, 1, "", "head"], [912, 0, 1, "", "last"], [913, 0, 1, "", "len"], [914, 0, 1, "", "map_groups"], [915, 0, 1, "", "max"], [916, 0, 1, "", "mean"], [917, 0, 1, "", "median"], [918, 0, 1, "", "min"], [919, 0, 1, "", "n_unique"], [920, 0, 1, "", "quantile"], [921, 0, 1, "", "sum"], [922, 0, 1, "", "tail"]], "polars.plugins": [[930, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[931, 4, 1, "", "all"], [931, 4, 1, "", "alpha"], [931, 4, 1, "", "alphanumeric"], [931, 4, 1, "", "binary"], [931, 4, 1, "", "boolean"], [931, 4, 1, "", "by_dtype"], [931, 4, 1, "", "by_index"], [931, 4, 1, "", "by_name"], [931, 4, 1, "", "categorical"], [931, 4, 1, "", "contains"], [931, 4, 1, "", "date"], [931, 4, 1, "", "datetime"], [931, 4, 1, "", "decimal"], [931, 4, 1, "", "digit"], [931, 4, 1, "", "duration"], [931, 4, 1, "", "ends_with"], [931, 4, 1, "", "exclude"], [931, 4, 1, "", "expand_selector"], [931, 4, 1, "", "first"], [931, 4, 1, "", "float"], [931, 4, 1, "", "integer"], [931, 4, 1, "", "is_selector"], [931, 4, 1, "", "last"], [931, 4, 1, "", "matches"], [931, 4, 1, "", "numeric"], [931, 4, 1, "", "signed_integer"], [931, 4, 1, "", "starts_with"], [931, 4, 1, "", "string"], [931, 4, 1, "", "temporal"], [931, 4, 1, "", "time"], [931, 4, 1, "", "unsigned_integer"]], "polars.testing": [[137, 4, 1, "", "assert_frame_equal"], [138, 4, 1, "", "assert_frame_not_equal"], [139, 4, 1, "", "assert_series_equal"], [140, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[141, 2, 1, "", "column"], [142, 4, 1, "", "columns"], [143, 4, 1, "", "create_list_strategy"], [144, 4, 1, "", "dataframes"], [145, 4, 1, "", "dtypes"], [146, 4, 1, "", "lists"], [147, 4, 1, "", "load_profile"], [148, 4, 1, "", "series"], [149, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[141, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 174, 1078], "api": [1, 49, 50, 51, 52, 825, 1350], "provid": 1, "new": 1, "function": [1, 812, 824, 931, 1344], "avail": 1, "registr": 1, "exampl": [1, 308, 931, 1330, 1353], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 809, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1334, 1335, 1336, 1337, 1338, 1339, 1353], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 153], "activate_decim": 2, "load": [3, 153], "load_from_fil": 4, "restore_default": 5, "save": [6, 153], "save_to_fil": 7, "set_ascii_t": 8, "set_auto_structifi": 9, "set_decimal_separ": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_verbos": 30, "state": [31, 153], "datafram": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 144, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 305], "write_avro": 32, "write_clipboard": 33, "write_csv": 34, "write_databas": 35, "write_delta": 36, "write_excel": 37, "write_ipc": 38, "write_ipc_stream": 39, "write_json": [40, 567], "write_ndjson": 41, "write_parquet": 42, "lazyfram": [43, 44, 45, 46, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 926], "sink_csv": 43, "sink_ipc": 44, "sink_ndjson": 45, "sink_parquet": 46, "stringcach": [47, 824], "align_fram": 48, "register_dataframe_namespac": 49, "register_expr_namespac": 50, "register_lazyframe_namespac": 51, "register_series_namespac": 52, "build_info": 53, "collect_al": 54, "collect_all_async": 55, "concat": [56, 504, 648, 1127, 1234, 1346], "datatyp": [57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 309], "arrai": [57, 805, 1318, 1342], "binari": [58, 806, 819, 1320], "boolean": [59, 807, 1321], "categor": 60, "date": [62, 401, 752, 1019, 1347], "datetim": [63, 402, 755, 1020], "decim": 64, "durat": [65, 758], "enum": 66, "float32": 67, "float64": 68, "int16": 69, "int32": 70, "int64": 71, "int8": 72, "list": [73, 146, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 814, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1327], "null": 74, "object": 75, "string": [76, 309, 820, 1331, 1346], "struct": [77, 702, 703, 704, 705, 795, 821, 1288, 1289, 1290, 1291, 1292, 1293, 1332], "time": [78, 431, 799, 1053], "uint16": 79, "uint32": 80, "uint64": 81, "uint8": 82, "unknown": 83, "utf8": 84, "disable_string_cach": 85, "enable_string_cach": 86, "except": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 310], "arrowerror": 87, "columnnotfounderror": 88, "computeerror": 89, "duplicateerror": 90, "invalidoperationerror": 91, "nodataerror": 92, "norowsreturnederror": 93, "polarserror": 94, "polarspanicerror": 95, "rowserror": 96, "schemaerror": 97, "schemafieldnotfounderror": 98, "shapeerror": 99, "structfieldnotfounderror": 100, "toomanyrowsreturnederror": 101, "from_arrow": 102, "from_datafram": 103, "from_dict": [104, 105], "from_numpi": 106, "from_panda": 107, "from_record": 108, "from_repr": 109, "get_index_typ": 110, "io": 111, "csv": [111, 826], "batched_read": 111, "batchedcsvread": 111, "next_batch": 111, "read_avro": 112, "read_clipboard": 113, "read_csv": 114, "read_csv_batch": 115, "read_databas": 116, "read_database_uri": 117, "read_delta": 118, "read_excel": 119, "read_ipc": 120, "read_ipc_schema": 121, "read_ipc_stream": 122, "read_json": 123, "read_ndjson": 124, "read_od": 125, "read_parquet": 126, "read_parquet_schema": 127, "scan_csv": 128, "scan_delta": 129, "scan_iceberg": 130, "scan_ipc": 131, "scan_ndjson": 132, "scan_parquet": 133, "scan_pyarrow_dataset": 134, "set_random_se": 135, "show_vers": 136, "test": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 1353], "assert_frame_equ": 137, "assert_frame_not_equ": 138, "assert_series_equ": 139, "assert_series_not_equ": 140, "parametr": [141, 142, 143, 144, 145, 146, 147, 148, 149, 1353], "column": [141, 142, 162, 810, 836], "create_list_strategi": 143, "dtype": [145, 170, 842, 1068], "load_profil": 147, "seri": [148, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1326], "set_profil": 149, "thread_pool_s": 150, "threadpool_s": 151, "using_string_cach": 152, "option": 153, "us": 153, "context": 153, "manag": 153, "decor": 153, "aggreg": [154, 311, 827, 932, 1341], "__dataframe__": 155, "appli": [156, 285, 320, 729, 908, 938], "approx_n_uniqu": [157, 321, 730, 828], "bottom_k": [158, 363, 829, 979], "cast": [159, 365, 831, 980], "clear": [160, 832, 989], "clone": [161, 833, 993], "corr": [163, 740], "count": [164, 286, 376, 741, 837, 909, 1341], "describ": [165, 838, 1008], "deseri": [166, 390, 839], "drop": [167, 840, 1352], "drop_in_plac": 168, "drop_nul": [169, 394, 509, 841, 1012, 1132], "equal": [171, 1070], "estimated_s": [172, 1071], "explod": [173, 339, 455, 511, 656, 844, 956, 1077, 1134, 1242], "fill_nan": [175, 457, 846, 1080], "fill_nul": [176, 458, 847, 1081], "filter": [177, 459, 848, 1082], "find_idx_by_nam": 178, "flag": [179, 1083], "fold": [180, 762], "frame_equ": 181, "gather_everi": [182, 467, 514, 850, 1086, 1137], "get_column": [183, 185], "get_column_index": 184, "glimps": 186, "group_bi": [187, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 851, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "group_by_dynam": [188, 852], "group_by_rol": [189, 853], "groupbi": [190, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 304, 854, 925], "groupby_dynam": [191, 855], "groupby_rol": [192, 856], "hash_row": 193, "head": [194, 288, 473, 516, 661, 766, 857, 911, 1091, 1139, 1247], "height": 195, "hstack": 196, "insert_at_idx": 197, "insert_column": 198, "interpol": [199, 477, 859, 1095], "is_dupl": [200, 480, 1099], "is_empti": [201, 1100], "is_uniqu": [202, 493, 1117], "item": [203, 1119], "iter_column": 204, "iter_row": 205, "iter_slic": 206, "join": [207, 342, 517, 860, 959, 1140, 1340], "join_asof": [208, 861], "lazi": [209, 863], "limit": [210, 499, 864, 1122, 1340], "map_row": 211, "max": [212, 292, 344, 521, 553, 776, 867, 915, 961, 1029, 1144, 1172, 1341], "max_horizont": [213, 777], "mean": [214, 293, 522, 554, 778, 868, 916, 1030, 1145, 1173], "mean_horizont": [215, 779], "median": [216, 294, 345, 523, 555, 780, 869, 917, 962, 1031, 1146, 1174, 1341], "melt": [217, 870], "merge_sort": [218, 871], "min": [219, 295, 346, 524, 568, 781, 872, 918, 963, 1037, 1147, 1175, 1341], "min_horizont": [220, 782], "n_chunk": [221, 1177], "n_uniqu": [222, 296, 347, 525, 572, 783, 919, 964, 1148, 1178], "null_count": [223, 588, 873, 1184], "partition_bi": 224, "pipe": [225, 594, 874], "pivot": 226, "product": [227, 597, 1188], "quantil": [228, 297, 599, 786, 876, 920, 1190], "rechunk": [229, 602, 1192], "renam": [230, 877, 1194], "replac": [231, 605, 674, 1195, 1260, 1346], "replace_at_idx": 232, "replace_column": 233, "revers": [234, 348, 526, 607, 677, 878, 965, 1149, 1197, 1263, 1346], "roll": [235, 610, 879], "row": [236, 237], "rows_by_kei": 238, "sampl": [239, 527, 632, 1150, 1213], "schema": [240, 880, 1292], "select": [241, 307, 791, 817, 881, 928, 1329, 1340], "select_seq": [242, 882], "serial": [243, 306, 564, 883, 927], "set_sort": [244, 634, 884, 1219], "shape": [245, 1220], "shift": [246, 349, 532, 635, 885, 966, 1155, 1221], "shift_and_fil": [247, 636, 886, 1222], "shrink_to_fit": [248, 1224], "slice": [249, 533, 643, 680, 888, 1156, 1230, 1266], "sort": [250, 350, 534, 644, 889, 967, 1157, 1231], "sql": [251, 792, 890, 1340, 1344, 1349], "std": [252, 351, 535, 647, 794, 891, 968, 1158, 1233], "sum": [253, 298, 352, 536, 708, 796, 892, 921, 969, 1159, 1294, 1341], "sum_horizont": [254, 797], "tail": [255, 299, 537, 692, 709, 798, 893, 922, 1160, 1278, 1295], "take_everi": [256, 711, 894, 1297], "to_arrow": [257, 1300], "to_dict": [258, 259], "to_dummi": [260, 1301], "to_init_repr": [261, 1303], "to_jax": [262, 1304], "to_numpi": [263, 1306], "to_panda": [264, 1307], "to_seri": 265, "to_struct": [266, 354, 540, 971, 1163], "to_torch": [267, 1309], "top_k": [268, 715, 895, 1310], "transpos": 269, "uniqu": [270, 355, 541, 718, 896, 972, 1164, 1311], "unnest": [271, 897, 1293, 1342, 1352], "unstack": 272, "updat": [273, 898], "upsampl": 274, "var": [275, 356, 542, 722, 802, 899, 973, 1165, 1315], "vstack": 276, "width": [277, 900], "with_column": [278, 901], "with_columns_seq": [279, 902], "with_row_count": [280, 904], "with_row_index": [281, 905], "__iter__": 282, "agg": [283, 906], "all": [284, 316, 333, 500, 725, 907, 935, 950, 1123, 1351], "first": [287, 340, 460, 512, 761, 849, 910, 957, 1135, 1341], "last": [289, 343, 496, 518, 770, 862, 912, 960, 1141, 1341], "len": [290, 498, 519, 771, 913, 1121, 1142], "map_group": [291, 775, 914], "attribut": [300, 923, 1319], "comput": [301, 811, 1323], "descript": [302, 924, 1324], "export": [303, 1325], "miscellan": [306, 816, 824, 927, 1328], "manipul": [307, 817, 928, 1329], "plot": [308, 1330], "data": 309, "type": 309, "numer": [309, 819], "tempor": [309, 822, 1333, 1347], "nest": 309, "other": 309, "expr": [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "ab": [312, 933, 1345], "add": 313, "agg_group": 314, "alia": [315, 934], "and_": 317, "ani": [318, 334, 501, 727, 936, 951, 1124], "append": [319, 937], "arcco": [322, 939], "arccosh": [323, 940], "arcsin": [324, 941], "arcsinh": [325, 942], "arctan": [326, 943], "arctanh": [327, 944], "arg_max": [328, 335, 502, 945, 952, 1125], "arg_min": [329, 336, 503, 946, 953, 1126], "arg_sort": [330, 947], "arg_tru": [331, 948], "arg_uniqu": [332, 949], "arr": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973], "contain": [337, 358, 505, 649, 954, 974, 1128, 1235], "count_match": [338, 506, 507, 651, 652, 955, 1129, 1130, 1237, 1238], "get": [341, 469, 515, 958, 1138], "to_list": [353, 970, 1305], "backward_fil": 357, "bin": [358, 359, 360, 361, 362, 974, 975, 976, 977, 978], "decod": [359, 653, 975, 1239], "encod": [360, 654, 976, 1240], "ends_with": [361, 655, 977, 1241, 1346], "starts_with": [362, 684, 978, 1270, 1346], "bottom_k_bi": 364, "cat": [366, 367, 981, 982, 983, 984, 985], "get_categori": [366, 981], "set_ord": [367, 983], "cbrt": [368, 986, 1345], "ceil": [369, 987, 1345], "clip": [370, 990], "clip_max": [371, 991], "clip_min": [372, 992], "co": [373, 994, 1348], "cosh": [374, 995], "cot": [375, 996, 1348], "cum_count": [377, 743, 997], "cum_max": [378, 998], "cum_min": [379, 999], "cum_prod": [380, 1000], "cum_sum": [381, 746, 1001], "cumcount": 382, "cummax": [383, 1002], "cummin": [384, 1003], "cumprod": [385, 1004], "cumsum": [386, 750, 1005], "cumulative_ev": [387, 1006], "cut": [388, 1007], "degre": [389, 1348], "diff": [391, 508, 1009, 1131], "dot": [392, 1010], "drop_nan": [393, 1011], "dt": [395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067], "add_business_dai": [395, 1013], "base_utc_offset": [396, 1014], "cast_time_unit": [397, 1015], "centuri": [398, 1016], "combin": [399, 1017], "convert_time_zon": [400, 1018], "dai": [403, 404, 1021, 1022], "dst_offset": [405, 1023], "epoch": [406, 1024], "hour": [407, 408, 1025, 1026], "is_leap_year": [409, 1027], "iso_year": [410, 1028], "microsecond": [411, 412, 1032, 1033], "millennium": [413, 1034], "millisecond": [414, 415, 1035, 1036], "minut": [416, 417, 1038, 1039], "month": [418, 1040], "month_end": [419, 1041], "month_start": [420, 1042], "nanosecond": [421, 422, 1043, 1044], "offset_bi": [423, 1045], "ordinal_dai": [424, 1046], "quarter": [425, 1047], "replace_time_zon": [426, 1048], "round": [427, 630, 1049, 1211, 1345], "second": [428, 429, 1050, 1051], "strftime": [430, 1052], "timestamp": [432, 1054], "to_str": [433, 1055], "total_dai": [434, 1056], "total_hour": [435, 1057], "total_microsecond": [436, 1058], "total_millisecond": [437, 1059], "total_minut": [438, 1060], "total_nanosecond": [439, 1061], "total_second": [440, 1062], "truncat": [441, 1063, 1352], "week": [442, 1064], "weekdai": [443, 1065], "with_time_unit": [444, 1066], "year": [445, 1067], "entropi": [446, 1069], "eq": [447, 556], "eq_miss": 448, "ewm_mean": [449, 1072], "ewm_mean_bi": [450, 1073], "ewm_std": [451, 1074], "ewm_var": [452, 1075], "exclud": [453, 760], "exp": [454, 1076, 1345], "extend_const": [456, 1079], "flatten": 461, "floor": [462, 1084, 1345], "floordiv": 463, "forward_fil": 464, "from_json": 465, "gather": [466, 513, 1085, 1136], "ge": 468, "gt": 470, "has_nul": [471, 1088], "hash": [472, 1090], "hist": [474, 1092], "implod": [475, 767, 1093], "inspect": [476, 858], "interpolate_bi": [478, 1096], "is_between": [479, 1097], "is_finit": [481, 1101], "is_first": [482, 1102], "is_first_distinct": [483, 1103], "is_in": [484, 1105], "is_infinit": [485, 1106], "is_last": [486, 1108], "is_last_distinct": [487, 1109], "is_nan": [488, 1110], "is_not": 489, "is_not_nan": [490, 1111], "is_not_nul": [491, 1112], "is_nul": [492, 1113], "keep_nam": 494, "kurtosi": [495, 1120], "le": 497, "eval": [510, 1133], "length": [520, 667, 1143, 1253, 1346], "set_differ": [528, 1151], "set_intersect": [529, 1152], "set_symmetric_differ": [530, 1153], "set_union": [531, 1154], "take": [538, 710, 1161, 1296], "to_arrai": [539, 1162], "log": [543, 1166, 1345], "log10": [544, 1167, 1345], "log1p": [545, 1168, 1345], "lower_bound": [546, 1169], "lt": 547, "map": [548, 574, 773, 865], "map_alia": 549, "map_batch": [550, 774, 866], "map_dict": [551, 1170], "map_el": [552, 1171], "meta": [556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 815], "has_multiple_output": 557, "is_column_select": 558, "is_regex_project": 559, "ne": [560, 584], "output_nam": 561, "pop": 562, "root_nam": 563, "tree_format": 565, "undo_alias": 566, "mod": [569, 1345], "mode": [570, 1176], "mul": 571, "name": [573, 574, 575, 576, 577, 578, 579, 580, 581, 810, 818, 1179, 1351], "keep": 573, "map_field": 575, "prefix": [576, 596], "prefix_field": 577, "suffix": [578, 707], "suffix_field": 579, "to_lowercas": [580, 697, 1283], "to_uppercas": [581, 700, 1286], "nan_max": [582, 1180], "nan_min": [583, 1181], "ne_miss": 585, "neg": 586, "not_": [587, 1183], "or_": 589, "over": 590, "pct_chang": [591, 1185], "peak_max": [592, 1186], "peak_min": [593, 1187], "pow": [595, 1345], "qcut": [598, 1189], "radian": [600, 1348], "rank": [601, 1191], "reinterpret": [603, 1193], "repeat_bi": 604, "reshap": [606, 1196], "rle": [608, 1198], "rle_id": [609, 1199], "rolling_appli": [611, 1200], "rolling_map": [612, 1201], "rolling_max": [613, 1202], "rolling_max_bi": 614, "rolling_mean": [615, 1203], "rolling_mean_bi": 616, "rolling_median": [617, 1204], "rolling_median_bi": 618, "rolling_min": [619, 1205], "rolling_min_bi": 620, "rolling_quantil": [621, 1206], "rolling_quantile_bi": 622, "rolling_skew": [623, 1207], "rolling_std": [624, 1208], "rolling_std_bi": 625, "rolling_sum": [626, 1209], "rolling_sum_bi": 627, "rolling_var": [628, 1210], "rolling_var_bi": 629, "round_sig_fig": [631, 1212], "search_sort": [633, 1215], "shrink_dtyp": [637, 1223], "shuffl": [638, 1225], "sign": [639, 1226, 1345], "sin": [640, 1227, 1348], "sinh": [641, 1228], "skew": [642, 1229], "sort_bi": 645, "sqrt": [646, 1232, 1345], "str": [648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287], "contains_ani": [650, 1236], "extract": [657, 1243, 1347], "extract_al": [658, 1244], "extract_group": [659, 1245], "find": [660, 1246], "json_decod": [662, 1248], "json_extract": [663, 1249], "json_path_match": [664, 1250], "len_byt": [665, 1251], "len_char": [666, 1252], "ljust": [668, 1254], "lstrip": [669, 1255], "n_char": [670, 1256], "pad_end": [671, 1257], "pad_start": [672, 1258], "parse_int": [673, 1259], "replace_al": [675, 1261], "replace_mani": [676, 1262], "rjust": [678, 1264], "rstrip": [679, 1265], "split": [681, 1267], "split_exact": [682, 1268], "splitn": [683, 1269], "strip": [685, 1271], "strip_char": [686, 1272], "strip_chars_end": [687, 1273], "strip_chars_start": [688, 1274], "strip_prefix": [689, 1275], "strip_suffix": [690, 1276], "strptime": [691, 1277], "to_dat": [693, 1279], "to_datetim": [694, 1280], "to_decim": [695, 1281], "to_integ": [696, 1282], "to_tim": [698, 1284], "to_titlecas": [699, 1285], "zfill": [701, 1287], "field": [702, 1288, 1289], "json_encod": [703, 1290], "rename_field": [704, 1291], "with_field": 705, "sub": 706, "tan": [712, 1298, 1348], "tanh": [713, 1299], "to_phys": [714, 1308], "top_k_bi": 716, "truediv": 717, "unique_count": [719, 1312], "upper_bound": [720, 1313], "value_count": [721, 1314], "where": [723, 1340], "xor": 724, "all_horizont": 726, "any_horizont": 728, "arang": 731, "arctan2": 732, "arctan2d": 733, "arg_sort_bi": 734, "arg_wher": 735, "business_day_count": 736, "coalesc": [737, 1343], "concat_list": 738, "concat_str": 739, "cov": 742, "cum_fold": 744, "cum_reduc": 745, "cum_sum_horizont": 747, "cumfold": 748, "cumreduc": 749, "cumsum_horizont": 751, "date_rang": [753, 754], "datetime_rang": [756, 757], "element": 759, "format": 763, "from_epoch": 764, "group": [765, 1340], "int_rang": [768, 769], "lit": 772, "nth": 784, "ones": 785, "reduc": 787, "repeat": 788, "rolling_corr": 789, "rolling_cov": 790, "sql_expr": 793, "time_rang": [800, 801], "when": 803, "zero": 804, "categori": [808, 1322], "col": 809, "express": 813, "oper": [819, 931, 1351, 1352], "conjunct": 819, "comparison": 819, "window": 823, "convers": 824, "parallel": 824, "random": 824, "python": [825, 1350], "refer": 825, "input": 826, "output": 826, "avro": 826, "clipboard": 826, "databas": 826, "delta": 826, "lake": 826, "excel": 826, "od": 826, "feather": 826, "ipc": 826, "iceberg": 826, "json": 826, "parquet": 826, "pyarrow": 826, "dataset": 826, "cach": 830, "collect": 834, "collect_async": 835, "explain": [843, 1352], "fetch": 845, "profil": [875, 1353], "show_graph": 887, "with_context": 903, "lazygroupbi": [906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922], "metadata": 929, "plugin": 930, "selector": 931, "import": 931, "set": [931, 1217, 1351], "is_loc": 982, "to_loc": 984, "uses_lexical_ord": 985, "chunk_length": 988, "get_chunk": 1087, "has_valid": 1089, "inner_dtyp": 1094, "is_boolean": 1098, "is_float": 1104, "is_integ": 1107, "is_numer": 1114, "is_sort": 1115, "is_tempor": 1116, "is_utf8": 1118, "new_from_index": 1182, "scatter": 1214, "series_equ": 1216, "set_at_idx": 1218, "to_fram": 1302, "view": 1316, "zip_with": 1317, "sqlcontext": [1334, 1335, 1336, 1337, 1338, 1339, 1350], "execut": 1334, "regist": 1335, "register_glob": 1336, "register_mani": 1337, "tabl": [1338, 1352], "unregist": 1339, "claus": 1340, "from": 1340, "BY": [1340, 1351], "have": 1340, "order": 1340, "offset": 1340, "avg": 1341, "stddev": 1341, "varianc": 1341, "array_contain": 1342, "array_get": 1342, "array_length": 1342, "array_low": 1342, "array_mean": 1342, "array_revers": 1342, "array_sum": 1342, "array_to_str": 1342, "array_uniqu": 1342, "array_upp": 1342, "condit": 1343, "greatest": 1343, "IF": 1343, "ifnul": 1343, "least": 1343, "nullif": 1343, "math": 1345, "ln": 1345, "log2": 1345, "pi": 1345, "bit_length": 1346, "concat_w": 1346, "initcap": 1346, "left": 1346, "lower": 1346, "ltrim": 1346, "octet_length": 1346, "regexp_lik": 1346, "right": 1346, "rtrim": 1346, "strpo": 1346, "substr": 1346, "upper": 1346, "date_part": 1347, "trigonometri": 1348, "aco": 1348, "acosd": 1348, "asin": 1348, "asind": 1348, "atan": 1348, "atand": 1348, "atan2": 1348, "atan2d": 1348, "cotd": 1348, "cosd": 1348, "sind": 1348, "tand": 1348, "interfac": 1349, "method": 1350, "union": 1351, "creat": 1352, "show": 1352, "assert": 1353, "strategi": 1353, "helper": 1353}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.get_column": [[183, "polars-dataframe-get-column"]], "polars.DataFrame.group_by_rolling": [[189, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.max_horizontal": [[213, "polars-dataframe-max-horizontal"]], "polars.DataFrame.flags": [[179, "polars-dataframe-flags"]], "polars.DataFrame.mean_horizontal": [[215, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.extend": [[174, "polars-dataframe-extend"]], "polars.DataFrame.partition_by": [[224, "polars-dataframe-partition-by"]], "polars.DataFrame.groupby_dynamic": [[191, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.mean": [[214, "polars-dataframe-mean"]], "polars.DataFrame.replace": [[231, "polars-dataframe-replace"]], "polars.DataFrame.merge_sorted": [[218, "polars-dataframe-merge-sorted"]], "polars.DataFrame.n_chunks": [[221, "polars-dataframe-n-chunks"]], "polars.DataFrame.product": [[227, "polars-dataframe-product"]], "polars.DataFrame.is_duplicated": [[200, "polars-dataframe-is-duplicated"]], "polars.DataFrame.get_column_index": [[184, "polars-dataframe-get-column-index"]], "polars.DataFrame.glimpse": [[186, "polars-dataframe-glimpse"]], "polars.DataFrame.join": [[207, "polars-dataframe-join"]], "polars.DataFrame.null_count": [[223, "polars-dataframe-null-count"]], "polars.DataFrame.pipe": [[225, "polars-dataframe-pipe"]], "polars.DataFrame.hash_rows": [[193, "polars-dataframe-hash-rows"]], "polars.DataFrame.get_columns": [[185, "polars-dataframe-get-columns"]], "polars.DataFrame.interpolate": [[199, "polars-dataframe-interpolate"]], "polars.DataFrame.fold": [[180, "polars-dataframe-fold"]], "polars.DataFrame.is_empty": [[201, "polars-dataframe-is-empty"]], "polars.DataFrame.item": [[203, "polars-dataframe-item"]], "polars.DataFrame.min_horizontal": [[220, "polars-dataframe-min-horizontal"]], "polars.DataFrame.height": [[195, "polars-dataframe-height"]], "polars.DataFrame.groupby_rolling": [[192, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.head": [[194, "polars-dataframe-head"]], "polars.DataFrame.is_unique": [[202, "polars-dataframe-is-unique"]], "polars.DataFrame.rechunk": [[229, "polars-dataframe-rechunk"]], "polars.DataFrame.find_idx_by_name": [[178, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.iter_slices": [[206, "polars-dataframe-iter-slices"]], "polars.DataFrame.join_asof": [[208, "polars-dataframe-join-asof"]], "polars.DataFrame.max": [[212, "polars-dataframe-max"]], "polars.DataFrame.filter": [[177, "polars-dataframe-filter"]], "polars.DataFrame.group_by_dynamic": [[188, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.groupby": [[190, "polars-dataframe-groupby"]], "polars.DataFrame.limit": [[210, "polars-dataframe-limit"]], "polars.DataFrame.melt": [[217, "polars-dataframe-melt"]], "polars.DataFrame.rename": [[230, "polars-dataframe-rename"]], "polars.DataFrame.fill_null": [[176, "polars-dataframe-fill-null"]], "polars.DataFrame.pivot": [[226, "polars-dataframe-pivot"]], "polars.DataFrame.gather_every": [[182, "polars-dataframe-gather-every"]], "polars.DataFrame.frame_equal": [[181, "polars-dataframe-frame-equal"]], "polars.DataFrame.iter_columns": [[204, "polars-dataframe-iter-columns"]], "polars.DataFrame.insert_at_idx": [[197, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.group_by": [[187, "polars-dataframe-group-by"]], "polars.DataFrame.insert_column": [[198, "polars-dataframe-insert-column"]], "polars.DataFrame.iter_rows": [[205, "polars-dataframe-iter-rows"]], "polars.DataFrame.median": [[216, "polars-dataframe-median"]], "polars.DataFrame.min": [[219, "polars-dataframe-min"]], "polars.DataFrame.hstack": [[196, "polars-dataframe-hstack"]], "polars.DataFrame.quantile": [[228, "polars-dataframe-quantile"]], "polars.DataFrame.lazy": [[209, "polars-dataframe-lazy"]], "polars.DataFrame.n_unique": [[222, "polars-dataframe-n-unique"]], "polars.DataFrame.fill_nan": [[175, "polars-dataframe-fill-nan"]], "polars.DataFrame.map_rows": [[211, "polars-dataframe-map-rows"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_fmt_str_lengths": [[13, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_database": [[35, "polars-dataframe-write-database"]], "polars.collect_all_async": [[55, "polars-collect-all-async"]], "polars.LazyFrame.sink_ndjson": [[45, "polars-lazyframe-sink-ndjson"]], "polars.Config.set_trim_decimal_zeros": [[29, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.api.register_lazyframe_namespace": [[51, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_delta": [[36, "polars-dataframe-write-delta"]], "polars.Config.set_auto_structify": [[9, "polars-config-set-auto-structify"]], "polars.api.register_expr_namespace": [[50, "polars-api-register-expr-namespace"]], "polars.Config.load": [[3, "polars-config-load"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_excel": [[37, "polars-dataframe-write-excel"]], "polars.Config.set_thousands_separator": [[28, "polars-config-set-thousands-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1353, "examples"], [931, "examples"], [1330, "examples"], [308, "examples"]], "polars.Config.state": [[31, "polars-config-state"]], "polars.StringCache": [[47, "polars-stringcache"]], "polars.concat": [[56, "polars-concat"]], "polars.Config.set_verbose": [[30, "polars-config-set-verbose"]], "polars.Config.set_decimal_separator": [[10, "polars-config-set-decimal-separator"]], "polars.align_frames": [[48, "polars-align-frames"]], "polars.DataFrame.write_avro": [[32, "polars-dataframe-write-avro"]], "polars.DataFrame.write_ipc_stream": [[39, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[40, "polars-dataframe-write-json"]], "polars.LazyFrame.sink_ipc": [[44, "polars-lazyframe-sink-ipc"]], "polars.Config.load_from_file": [[4, "polars-config-load-from-file"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.datatypes.Array": [[57, "polars-datatypes-array"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_ipc": [[38, "polars-dataframe-write-ipc"]], "polars.Config.set_fmt_table_cell_list_len": [[14, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.activate_decimals": [[2, "polars-config-activate-decimals"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.LazyFrame.sink_csv": [[43, "polars-lazyframe-sink-csv"]], "polars.api.register_series_namespace": [[52, "polars-api-register-series-namespace"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.Config.set_fmt_float": [[12, "polars-config-set-fmt-float"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_clipboard": [[33, "polars-dataframe-write-clipboard"]], "polars.LazyFrame.sink_parquet": [[46, "polars-lazyframe-sink-parquet"]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.api.register_dataframe_namespace": [[49, "polars-api-register-dataframe-namespace"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_csv": [[34, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ndjson": [[41, "polars-dataframe-write-ndjson"]], "polars.Config.set_float_precision": [[11, "polars-config-set-float-precision"]], "polars.build_info": [[53, "polars-build-info"]], "polars.DataFrame.write_parquet": [[42, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.collect_all": [[54, "polars-collect-all"]], "polars.Config.save_to_file": [[7, "polars-config-save-to-file"]], "Index": [[0, "index"]], "polars.DataFrame.clear": [[160, "polars-dataframe-clear"]], "polars.DataFrame.apply": [[156, "polars-dataframe-apply"]], "polars.DataFrame.count": [[164, "polars-dataframe-count"]], "polars.testing.parametric.columns": [[142, "polars-testing-parametric-columns"]], "polars.read_ipc": [[120, "polars-read-ipc"]], "polars.DataFrame.cast": [[159, "polars-dataframe-cast"]], "polars.testing.parametric.create_list_strategy": [[143, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.clone": [[161, "polars-dataframe-clone"]], "polars.read_json": [[123, "polars-read-json"]], "Config": [[153, "config"]], "Config options": [[153, "config-options"]], "Config load, save, state": [[153, "config-load-save-state"]], "Use as a context manager": [[153, "use-as-a-context-manager"]], "Use as a decorator": [[153, "use-as-a-decorator"]], "polars.testing.assert_series_not_equal": [[140, "polars-testing-assert-series-not-equal"]], "polars.testing.assert_frame_not_equal": [[138, "polars-testing-assert-frame-not-equal"]], "polars.DataFrame.bottom_k": [[158, "polars-dataframe-bottom-k"]], "polars.read_database_uri": [[117, "polars-read-database-uri"]], "polars.testing.parametric.lists": [[146, "polars-testing-parametric-lists"]], "polars.read_database": [[116, "polars-read-database"]], "polars.read_ods": [[125, "polars-read-ods"]], "polars.scan_ndjson": [[132, "polars-scan-ndjson"]], "polars.DataFrame.explode": [[173, "polars-dataframe-explode"]], "polars.DataFrame.drop_in_place": [[168, "polars-dataframe-drop-in-place"]], "polars.read_ipc_stream": [[122, "polars-read-ipc-stream"]], "polars.scan_iceberg": [[130, "polars-scan-iceberg"]], "polars.show_versions": [[136, "polars-show-versions"]], "polars.testing.parametric.load_profile": [[147, "polars-testing-parametric-load-profile"]], "polars.DataFrame.columns": [[162, "polars-dataframe-columns"]], "polars.scan_csv": [[128, "polars-scan-csv"]], "polars.scan_delta": [[129, "polars-scan-delta"]], "polars.read_excel": [[119, "polars-read-excel"]], "polars.DataFrame.approx_n_unique": [[157, "polars-dataframe-approx-n-unique"]], "polars.testing.parametric.dtypes": [[145, "polars-testing-parametric-dtypes"]], "polars.scan_ipc": [[131, "polars-scan-ipc"]], "polars.testing.assert_frame_equal": [[137, "polars-testing-assert-frame-equal"]], "polars.DataFrame.dtypes": [[170, "polars-dataframe-dtypes"]], "polars.read_ndjson": [[124, "polars-read-ndjson"]], "polars.read_parquet_schema": [[127, "polars-read-parquet-schema"]], "Aggregation": [[154, "aggregation"], [932, "aggregation"], [827, "aggregation"], [311, "aggregation"]], "polars.testing.parametric.column": [[141, "polars-testing-parametric-column"]], "polars.DataFrame.drop": [[167, "polars-dataframe-drop"]], "polars.DataFrame.deserialize": [[166, "polars-dataframe-deserialize"]], "polars.set_random_seed": [[135, "polars-set-random-seed"]], "polars.read_parquet": [[126, "polars-read-parquet"]], "polars.scan_pyarrow_dataset": [[134, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.dataframes": [[144, "polars-testing-parametric-dataframes"]], "polars.DataFrame.__dataframe__": [[155, "polars-dataframe-dataframe"]], "polars.DataFrame.describe": [[165, "polars-dataframe-describe"]], "polars.read_delta": [[118, "polars-read-delta"]], "polars.testing.parametric.set_profile": [[149, "polars-testing-parametric-set-profile"]], "polars.DataFrame.equals": [[171, "polars-dataframe-equals"]], "polars.thread_pool_size": [[150, "polars-thread-pool-size"]], "polars.using_string_cache": [[152, "polars-using-string-cache"]], "polars.DataFrame.estimated_size": [[172, "polars-dataframe-estimated-size"]], "polars.testing.assert_series_equal": [[139, "polars-testing-assert-series-equal"]], "polars.threadpool_size": [[151, "polars-threadpool-size"]], "polars.DataFrame.drop_nulls": [[169, "polars-dataframe-drop-nulls"]], "polars.scan_parquet": [[133, "polars-scan-parquet"]], "polars.read_ipc_schema": [[121, "polars-read-ipc-schema"]], "polars.testing.parametric.series": [[148, "polars-testing-parametric-series"]], "polars.DataFrame.corr": [[163, "polars-dataframe-corr"]], "Conditional": [[1343, "conditional"]], "COALESCE": [[1343, "coalesce"]], "GREATEST": [[1343, "greatest"]], "IF": [[1343, "if"]], "IFNULL": [[1343, "ifnull"]], "LEAST": [[1343, "least"]], "NULLIF": [[1343, "nullif"]], "polars.SQLContext.register": [[1335, "polars-sqlcontext-register"]], "polars.SQLContext.execute": [[1334, "polars-sqlcontext-execute"]], "Temporal": [[1347, "temporal"], [1333, "temporal"], [822, "temporal"], [309, "temporal"]], "DATE": [[1347, "date"]], "DATE_PART": [[1347, "date-part"]], "EXTRACT": [[1347, "extract"]], "polars.SQLContext.unregister": [[1339, "polars-sqlcontext-unregister"]], "Testing": [[1353, "testing"]], "Asserts": [[1353, "asserts"]], "Parametric testing": [[1353, "parametric-testing"]], "Polars strategies": [[1353, "polars-strategies"]], "Strategy helpers": [[1353, "strategy-helpers"]], "Profiles": [[1353, "profiles"]], "polars.SQLContext.tables": [[1338, "polars-sqlcontext-tables"]], "Python API": [[1350, "python-api"]], "SQLContext": [[1350, "sqlcontext"]], "Methods": [[1350, "methods"]], "SQL Clauses": [[1340, "sql-clauses"]], "SELECT": [[1340, "select"]], "FROM": [[1340, "from"]], "JOIN": [[1340, "join"]], "WHERE": [[1340, "where"]], "GROUP BY": [[1340, "group-by"]], "HAVING": [[1340, "having"]], "ORDER BY": [[1340, "order-by"]], "LIMIT": [[1340, "limit"]], "OFFSET": [[1340, "offset"]], "Table Operations": [[1352, "table-operations"]], "CREATE TABLE": [[1352, "create-table"]], "DROP TABLES": [[1352, "drop-tables"]], "EXPLAIN": [[1352, "explain"]], "SHOW TABLES": [[1352, "show-tables"]], "UNNEST": [[1352, "unnest"], [1342, "unnest"]], "TRUNCATE": [[1352, "truncate"]], "Aggregate": [[1341, "aggregate"]], "AVG": [[1341, "avg"]], "COUNT": [[1341, "count"]], "FIRST": [[1341, "first"]], "LAST": [[1341, "last"]], "MAX": [[1341, "max"]], "MEDIAN": [[1341, "median"]], "MIN": [[1341, "min"]], "STDDEV": [[1341, "stddev"]], "SUM": [[1341, "sum"]], "VARIANCE": [[1341, "variance"]], "Array": [[1342, "array"], [805, "array"], [1318, "array"]], "ARRAY_CONTAINS": [[1342, "array-contains"]], "ARRAY_GET": [[1342, "array-get"]], "ARRAY_LENGTH": [[1342, "array-length"]], "ARRAY_LOWER": [[1342, "array-lower"]], "ARRAY_MEAN": [[1342, "array-mean"]], "ARRAY_REVERSE": [[1342, "array-reverse"]], "ARRAY_SUM": [[1342, "array-sum"]], "ARRAY_TO_STRING": [[1342, "array-to-string"]], "ARRAY_UNIQUE": [[1342, "array-unique"]], "ARRAY_UPPER": [[1342, "array-upper"]], "SQL Interface": [[1349, "sql-interface"]], "polars.SQLContext.register_globals": [[1336, "polars-sqlcontext-register-globals"]], "SQL Functions": [[1344, "sql-functions"]], "Set Operations": [[1351, "set-operations"]], "UNION": [[1351, "union"]], "UNION ALL": [[1351, "union-all"]], "UNION BY NAME": [[1351, "union-by-name"]], "Math": [[1345, "math"]], "ABS": [[1345, "abs"]], "CBRT": [[1345, "cbrt"]], "CEIL": [[1345, "ceil"]], "EXP": [[1345, "exp"]], "FLOOR": [[1345, "floor"]], "LN": [[1345, "ln"]], "LOG": [[1345, "log"]], "LOG2": [[1345, "log2"]], "LOG10": [[1345, "log10"]], "LOG1P": [[1345, "log1p"]], "MOD": [[1345, "mod"]], "PI": [[1345, "pi"]], "POW": [[1345, "pow"]], "ROUND": [[1345, "round"]], "SIGN": [[1345, "sign"]], "SQRT": [[1345, "sqrt"]], "String": [[1346, "string"], [1331, "string"], [820, "string"], [309, "string"]], "BIT_LENGTH": [[1346, "bit-length"]], "CONCAT": [[1346, "concat"]], "CONCAT_WS": [[1346, "concat-ws"]], "ENDS_WITH": [[1346, "ends-with"]], "INITCAP": [[1346, "initcap"]], "LEFT": [[1346, "left"]], "LENGTH": [[1346, "length"]], "LOWER": [[1346, "lower"]], "LTRIM": [[1346, "ltrim"]], "OCTET_LENGTH": [[1346, "octet-length"]], "REGEXP_LIKE": [[1346, "regexp-like"]], "REPLACE": [[1346, "replace"]], "REVERSE": [[1346, "reverse"]], "RIGHT": [[1346, "right"]], "RTRIM": [[1346, "rtrim"]], "STARTS_WITH": [[1346, "starts-with"]], "STRPOS": [[1346, "strpos"]], "SUBSTRING": [[1346, "substring"]], "UPPER": [[1346, "upper"]], "Trigonometry": [[1348, "trigonometry"]], "ACOS": [[1348, "acos"]], "ACOSD": [[1348, "acosd"]], "ASIN": [[1348, "asin"]], "ASIND": [[1348, "asind"]], "ATAN": [[1348, "atan"]], "ATAND": [[1348, "atand"]], "ATAN2": [[1348, "atan2"]], "ATAN2D": [[1348, "atan2d"]], "COT": [[1348, "cot"]], "COTD": [[1348, "cotd"]], "COS": [[1348, "cos"]], "COSD": [[1348, "cosd"]], "DEGREES": [[1348, "degrees"]], "RADIANS": [[1348, "radians"]], "SIN": [[1348, "sin"]], "SIND": [[1348, "sind"]], "TAN": [[1348, "tan"]], "TAND": [[1348, "tand"]], "polars.SQLContext.register_many": [[1337, "polars-sqlcontext-register-many"]], "polars.Series.rechunk": [[1192, "polars-series-rechunk"]], "polars.Series.round_sig_figs": [[1212, "polars-series-round-sig-figs"]], "polars.Series.peak_min": [[1187, "polars-series-peak-min"]], "polars.Series.null_count": [[1184, "polars-series-null-count"]], "polars.Series.search_sorted": [[1215, "polars-series-search-sorted"]], "polars.Series.log10": [[1167, "polars-series-log10"]], "polars.Series.nan_min": [[1181, "polars-series-nan-min"]], "polars.Series.lower_bound": [[1169, "polars-series-lower-bound"]], "polars.Series.min": [[1175, "polars-series-min"]], "polars.Series.rename": [[1194, "polars-series-rename"]], "polars.Series.mode": [[1176, "polars-series-mode"]], "polars.Series.rolling_sum": [[1209, "polars-series-rolling-sum"]], "polars.Series.map_dict": [[1170, "polars-series-map-dict"]], "polars.Series.rolling_median": [[1204, "polars-series-rolling-median"]], "polars.Series.n_unique": [[1178, "polars-series-n-unique"]], "polars.Series.nan_max": [[1180, "polars-series-nan-max"]], "polars.Series.rolling_var": [[1210, "polars-series-rolling-var"]], "polars.Series.list.tail": [[1160, "polars-series-list-tail"]], "polars.Series.name": [[1179, "polars-series-name"]], "polars.Series.rolling_apply": [[1200, "polars-series-rolling-apply"]], "polars.Series.max": [[1172, "polars-series-max"]], "polars.Series.series_equal": [[1216, "polars-series-series-equal"]], "polars.Series.median": [[1174, "polars-series-median"]], "polars.Series.rle": [[1198, "polars-series-rle"]], "polars.Series.rle_id": [[1199, "polars-series-rle-id"]], "polars.Series.log": [[1166, "polars-series-log"]], "polars.Series.n_chunks": [[1177, "polars-series-n-chunks"]], "polars.Series.list.unique": [[1164, "polars-series-list-unique"]], "polars.Series.quantile": [[1190, "polars-series-quantile"]], "polars.Series.not_": [[1183, "polars-series-not"]], "polars.Series.reshape": [[1196, "polars-series-reshape"]], "polars.Series.new_from_index": [[1182, "polars-series-new-from-index"]], "polars.Series.set": [[1217, "polars-series-set"]], "polars.Series.rolling_skew": [[1207, "polars-series-rolling-skew"]], "polars.Series.list.take": [[1161, "polars-series-list-take"]], "polars.Series.log1p": [[1168, "polars-series-log1p"]], "polars.Series.rolling_min": [[1205, "polars-series-rolling-min"]], "polars.Series.round": [[1211, "polars-series-round"]], "polars.Series.map_elements": [[1171, "polars-series-map-elements"]], "polars.Series.rolling_std": [[1208, "polars-series-rolling-std"]], "polars.Series.rolling_map": [[1201, "polars-series-rolling-map"]], "polars.Series.sample": [[1213, "polars-series-sample"]], "polars.Series.list.to_array": [[1162, "polars-series-list-to-array"]], "polars.Series.list.var": [[1165, "polars-series-list-var"]], "polars.Series.rolling_mean": [[1203, "polars-series-rolling-mean"]], "polars.Series.rank": [[1191, "polars-series-rank"]], "polars.Series.rolling_quantile": [[1206, "polars-series-rolling-quantile"]], "polars.Series.list.to_struct": [[1163, "polars-series-list-to-struct"]], "polars.Series.pct_change": [[1185, "polars-series-pct-change"]], "polars.Series.reinterpret": [[1193, "polars-series-reinterpret"]], "polars.Series.replace": [[1195, "polars-series-replace"]], "polars.Series.reverse": [[1197, "polars-series-reverse"]], "polars.Series.product": [[1188, "polars-series-product"]], "polars.Series.rolling_max": [[1202, "polars-series-rolling-max"]], "polars.Series.peak_max": [[1186, "polars-series-peak-max"]], "polars.Series.scatter": [[1214, "polars-series-scatter"]], "polars.Series.qcut": [[1189, "polars-series-qcut"]], "polars.Series.mean": [[1173, "polars-series-mean"]], "polars.Series.str.pad_end": [[1257, "polars-series-str-pad-end"]], "polars.Series.skew": [[1229, "polars-series-skew"]], "polars.Series.str.len_chars": [[1252, "polars-series-str-len-chars"]], "polars.Series.str.rjust": [[1264, "polars-series-str-rjust"]], "polars.Series.str.lengths": [[1253, "polars-series-str-lengths"]], "polars.Series.set_sorted": [[1219, "polars-series-set-sorted"]], "polars.Series.shape": [[1220, "polars-series-shape"]], "polars.Series.shuffle": [[1225, "polars-series-shuffle"]], "polars.Series.str.json_path_match": [[1250, "polars-series-str-json-path-match"]], "polars.Series.sin": [[1227, "polars-series-sin"]], "polars.Series.str.find": [[1246, "polars-series-str-find"]], "polars.Series.str.slice": [[1266, "polars-series-str-slice"]], "polars.Series.str.extract_all": [[1244, "polars-series-str-extract-all"]], "polars.Series.sort": [[1231, "polars-series-sort"]], "polars.Series.shift": [[1221, "polars-series-shift"]], "polars.Series.str.explode": [[1242, "polars-series-str-explode"]], "polars.Series.str.encode": [[1240, "polars-series-str-encode"]], "polars.Series.str.decode": [[1239, "polars-series-str-decode"]], "polars.Series.str.strip": [[1271, "polars-series-str-strip"]], "polars.Series.str.replace_all": [[1261, "polars-series-str-replace-all"]], "polars.Series.str.ends_with": [[1241, "polars-series-str-ends-with"]], "polars.Series.sign": [[1226, "polars-series-sign"]], "polars.Series.sinh": [[1228, "polars-series-sinh"]], "polars.Series.str.reverse": [[1263, "polars-series-str-reverse"]], "polars.Series.shrink_dtype": [[1223, "polars-series-shrink-dtype"]], "polars.Series.set_at_idx": [[1218, "polars-series-set-at-idx"]], "polars.Series.str.head": [[1247, "polars-series-str-head"]], "polars.Series.str.starts_with": [[1270, "polars-series-str-starts-with"]], "polars.Series.str.parse_int": [[1259, "polars-series-str-parse-int"]], "polars.Series.str.replace": [[1260, "polars-series-str-replace"]], "polars.Series.str.json_extract": [[1249, "polars-series-str-json-extract"]], "polars.Series.slice": [[1230, "polars-series-slice"]], "polars.Series.str.strip_chars_end": [[1273, "polars-series-str-strip-chars-end"]], "polars.Series.str.strip_prefix": [[1275, "polars-series-str-strip-prefix"]], "polars.Series.std": [[1233, "polars-series-std"]], "polars.Series.str.count_match": [[1237, "polars-series-str-count-match"]], "polars.Series.str.count_matches": [[1238, "polars-series-str-count-matches"]], "polars.Series.str.split": [[1267, "polars-series-str-split"]], "polars.Series.shift_and_fill": [[1222, "polars-series-shift-and-fill"]], "polars.Series.str.len_bytes": [[1251, "polars-series-str-len-bytes"]], "polars.Series.str.lstrip": [[1255, "polars-series-str-lstrip"]], "polars.Series.str.n_chars": [[1256, "polars-series-str-n-chars"]], "polars.Series.str.strip_chars_start": [[1274, "polars-series-str-strip-chars-start"]], "polars.Series.str.concat": [[1234, "polars-series-str-concat"]], "polars.Series.str.splitn": [[1269, "polars-series-str-splitn"]], "polars.Series.str.pad_start": [[1258, "polars-series-str-pad-start"]], "polars.Series.sqrt": [[1232, "polars-series-sqrt"]], "polars.Series.str.ljust": [[1254, "polars-series-str-ljust"]], "polars.Series.str.json_decode": [[1248, "polars-series-str-json-decode"]], "polars.Series.str.split_exact": [[1268, "polars-series-str-split-exact"]], "polars.Series.str.strip_chars": [[1272, "polars-series-str-strip-chars"]], "polars.Series.str.replace_many": [[1262, "polars-series-str-replace-many"]], "polars.Series.str.rstrip": [[1265, "polars-series-str-rstrip"]], "polars.Series.str.extract_groups": [[1245, "polars-series-str-extract-groups"]], "polars.Series.str.contains_any": [[1236, "polars-series-str-contains-any"]], "polars.Series.str.contains": [[1235, "polars-series-str-contains"]], "polars.Series.shrink_to_fit": [[1224, "polars-series-shrink-to-fit"]], "polars.Series.str.extract": [[1243, "polars-series-str-extract"]], "polars.Series.list.median": [[1146, "polars-series-list-median"]], "polars.Series.is_last_distinct": [[1109, "polars-series-is-last-distinct"]], "polars.Series.list.drop_nulls": [[1132, "polars-series-list-drop-nulls"]], "polars.Series.list.sort": [[1157, "polars-series-list-sort"]], "polars.Series.list.shift": [[1155, "polars-series-list-shift"]], "polars.Series.list.min": [[1147, "polars-series-list-min"]], "polars.Series.is_null": [[1113, "polars-series-is-null"]], "polars.Series.list.len": [[1142, "polars-series-list-len"]], "polars.Series.is_temporal": [[1116, "polars-series-is-temporal"]], "polars.Series.list.gather": [[1136, "polars-series-list-gather"]], "polars.Series.limit": [[1122, "polars-series-limit"]], "polars.Series.is_unique": [[1117, "polars-series-is-unique"]], "polars.Series.list.first": [[1135, "polars-series-list-first"]], "polars.Series.list.last": [[1141, "polars-series-list-last"]], "polars.Series.is_numeric": [[1114, "polars-series-is-numeric"]], "polars.Series.list.sum": [[1159, "polars-series-list-sum"]], "polars.Series.list.gather_every": [[1137, "polars-series-list-gather-every"]], "polars.Series.list.slice": [[1156, "polars-series-list-slice"]], "polars.Series.list.get": [[1138, "polars-series-list-get"]], "polars.Series.list.n_unique": [[1148, "polars-series-list-n-unique"]], "polars.Series.is_not_null": [[1112, "polars-series-is-not-null"]], "polars.Series.len": [[1121, "polars-series-len"]], "polars.Series.list.all": [[1123, "polars-series-list-all"]], "polars.Series.list.set_intersection": [[1152, "polars-series-list-set-intersection"]], "polars.Series.is_sorted": [[1115, "polars-series-is-sorted"]], "polars.Series.kurtosis": [[1120, "polars-series-kurtosis"]], "polars.Series.list.set_difference": [[1151, "polars-series-list-set-difference"]], "polars.Series.is_float": [[1104, "polars-series-is-float"]], "polars.Series.is_infinite": [[1106, "polars-series-is-infinite"]], "polars.Series.is_in": [[1105, "polars-series-is-in"]], "polars.Series.list.arg_min": [[1126, "polars-series-list-arg-min"]], "polars.Series.is_utf8": [[1118, "polars-series-is-utf8"]], "polars.Series.list.join": [[1140, "polars-series-list-join"]], "polars.Series.list.mean": [[1145, "polars-series-list-mean"]], "polars.Series.list.concat": [[1127, "polars-series-list-concat"]], "polars.Series.list.eval": [[1133, "polars-series-list-eval"]], "polars.Series.list.sample": [[1150, "polars-series-list-sample"]], "polars.Series.list.set_symmetric_difference": [[1153, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.diff": [[1131, "polars-series-list-diff"]], "polars.Series.is_integer": [[1107, "polars-series-is-integer"]], "polars.Series.list.count_match": [[1129, "polars-series-list-count-match"]], "polars.Series.is_first_distinct": [[1103, "polars-series-is-first-distinct"]], "polars.Series.is_last": [[1108, "polars-series-is-last"]], "polars.Series.list.std": [[1158, "polars-series-list-std"]], "polars.Series.list.head": [[1139, "polars-series-list-head"]], "polars.Series.list.count_matches": [[1130, "polars-series-list-count-matches"]], "polars.Series.item": [[1119, "polars-series-item"]], "polars.Series.is_not_nan": [[1111, "polars-series-is-not-nan"]], "polars.Series.is_nan": [[1110, "polars-series-is-nan"]], "polars.Series.list.lengths": [[1143, "polars-series-list-lengths"]], "polars.Series.list.max": [[1144, "polars-series-list-max"]], "polars.Series.list.contains": [[1128, "polars-series-list-contains"]], "polars.Series.list.explode": [[1134, "polars-series-list-explode"]], "polars.Series.list.set_union": [[1154, "polars-series-list-set-union"]], "polars.Series.list.reverse": [[1149, "polars-series-list-reverse"]], "polars.Series.is_first": [[1102, "polars-series-is-first"]], "polars.Series.list.any": [[1124, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1125, "polars-series-list-arg-max"]], "polars.Series.dt.truncate": [[1063, "polars-series-dt-truncate"]], "polars.Series.has_nulls": [[1088, "polars-series-has-nulls"]], "polars.Series.dt.weekday": [[1065, "polars-series-dt-weekday"]], "polars.Series.floor": [[1084, "polars-series-floor"]], "polars.Series.explode": [[1077, "polars-series-explode"]], "polars.Series.head": [[1091, "polars-series-head"]], "polars.Series.interpolate_by": [[1096, "polars-series-interpolate-by"]], "polars.Series.extend": [[1078, "polars-series-extend"]], "polars.Series.dt.total_minutes": [[1060, "polars-series-dt-total-minutes"]], "polars.Series.dt.round": [[1049, "polars-series-dt-round"]], "polars.Series.gather": [[1085, "polars-series-gather"]], "polars.Series.equals": [[1070, "polars-series-equals"]], "polars.Series.dtype": [[1068, "polars-series-dtype"]], "polars.Series.inner_dtype": [[1094, "polars-series-inner-dtype"]], "polars.Series.is_boolean": [[1098, "polars-series-is-boolean"]], "polars.Series.estimated_size": [[1071, "polars-series-estimated-size"]], "polars.Series.is_finite": [[1101, "polars-series-is-finite"]], "polars.Series.interpolate": [[1095, "polars-series-interpolate"]], "polars.Series.fill_null": [[1081, "polars-series-fill-null"]], "polars.Series.dt.total_days": [[1056, "polars-series-dt-total-days"]], "polars.Series.extend_constant": [[1079, "polars-series-extend-constant"]], "polars.Series.dt.nanoseconds": [[1044, "polars-series-dt-nanoseconds"]], "polars.Series.ewm_var": [[1075, "polars-series-ewm-var"]], "polars.Series.dt.total_microseconds": [[1058, "polars-series-dt-total-microseconds"]], "polars.Series.entropy": [[1069, "polars-series-entropy"]], "polars.Series.dt.second": [[1050, "polars-series-dt-second"]], "polars.Series.hist": [[1092, "polars-series-hist"]], "polars.Series.dt.ordinal_day": [[1046, "polars-series-dt-ordinal-day"]], "polars.Series.dt.replace_time_zone": [[1048, "polars-series-dt-replace-time-zone"]], "polars.Series.implode": [[1093, "polars-series-implode"]], "polars.Series.get_chunks": [[1087, "polars-series-get-chunks"]], "polars.Series.is_duplicated": [[1099, "polars-series-is-duplicated"]], "polars.Series.dt.total_milliseconds": [[1059, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.with_time_unit": [[1066, "polars-series-dt-with-time-unit"]], "polars.Series.has_validity": [[1089, "polars-series-has-validity"]], "polars.Series.is_between": [[1097, "polars-series-is-between"]], "polars.Series.hash": [[1090, "polars-series-hash"]], "polars.Series.fill_nan": [[1080, "polars-series-fill-nan"]], "polars.Series.flags": [[1083, "polars-series-flags"]], "polars.Series.ewm_mean_by": [[1073, "polars-series-ewm-mean-by"]], "polars.Series.dt.strftime": [[1052, "polars-series-dt-strftime"]], "polars.Series.dt.week": [[1064, "polars-series-dt-week"]], "polars.Series.gather_every": [[1086, "polars-series-gather-every"]], "polars.Series.dt.total_hours": [[1057, "polars-series-dt-total-hours"]], "polars.Series.dt.offset_by": [[1045, "polars-series-dt-offset-by"]], "polars.Series.filter": [[1082, "polars-series-filter"]], "polars.Series.dt.total_nanoseconds": [[1061, "polars-series-dt-total-nanoseconds"]], "polars.Series.exp": [[1076, "polars-series-exp"]], "polars.Series.ewm_mean": [[1072, "polars-series-ewm-mean"]], "polars.Series.dt.seconds": [[1051, "polars-series-dt-seconds"]], "polars.Series.is_empty": [[1100, "polars-series-is-empty"]], "polars.Series.dt.year": [[1067, "polars-series-dt-year"]], "polars.Series.dt.quarter": [[1047, "polars-series-dt-quarter"]], "polars.Series.dt.timestamp": [[1054, "polars-series-dt-timestamp"]], "polars.Series.ewm_std": [[1074, "polars-series-ewm-std"]], "polars.Series.dt.total_seconds": [[1062, "polars-series-dt-total-seconds"]], "polars.Series.dt.time": [[1053, "polars-series-dt-time"]], "polars.Series.dt.to_string": [[1055, "polars-series-dt-to-string"]], "polars.from_records": [[108, "polars-from-records"]], "polars.from_dataframe": [[103, "polars-from-dataframe"]], "polars.datatypes.Boolean": [[59, "polars-datatypes-boolean"]], "polars.datatypes.Int32": [[70, "polars-datatypes-int32"]], "polars.exceptions.ComputeError": [[89, "polars-exceptions-computeerror"]], "polars.from_dict": [[104, "polars-from-dict"]], "polars.exceptions.SchemaFieldNotFoundError": [[98, "polars-exceptions-schemafieldnotfounderror"]], "polars.datatypes.UInt64": [[81, "polars-datatypes-uint64"]], "polars.datatypes.String": [[76, "polars-datatypes-string"]], "polars.read_csv_batched": [[115, "polars-read-csv-batched"]], "polars.datatypes.Decimal": [[64, "polars-datatypes-decimal"]], "polars.exceptions.TooManyRowsReturnedError": [[101, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.ArrowError": [[87, "polars-exceptions-arrowerror"]], "polars.datatypes.List": [[73, "polars-datatypes-list"]], "polars.datatypes.Struct": [[77, "polars-datatypes-struct"]], "polars.exceptions.ShapeError": [[99, "polars-exceptions-shapeerror"]], "polars.datatypes.Int64": [[71, "polars-datatypes-int64"]], "polars.datatypes.Utf8": [[84, "polars-datatypes-utf8"]], "polars.datatypes.Unknown": [[83, "polars-datatypes-unknown"]], "polars.exceptions.ColumnNotFoundError": [[88, "polars-exceptions-columnnotfounderror"]], "polars.from_arrow": [[102, "polars-from-arrow"]], "polars.datatypes.Object": [[75, "polars-datatypes-object"]], "polars.datatypes.UInt16": [[79, "polars-datatypes-uint16"]], "polars.datatypes.Date": [[62, "polars-datatypes-date"]], "polars.exceptions.NoRowsReturnedError": [[93, "polars-exceptions-norowsreturnederror"]], "polars.datatypes.Categorical": [[60, "polars-datatypes-categorical"]], "polars.from_repr": [[109, "polars-from-repr"]], "polars.datatypes.UInt8": [[82, "polars-datatypes-uint8"]], "polars.enable_string_cache": [[86, "polars-enable-string-cache"]], "polars.exceptions.NoDataError": [[92, "polars-exceptions-nodataerror"]], "polars.exceptions.SchemaError": [[97, "polars-exceptions-schemaerror"]], "polars.exceptions.DuplicateError": [[90, "polars-exceptions-duplicateerror"]], "polars.exceptions.StructFieldNotFoundError": [[100, "polars-exceptions-structfieldnotfounderror"]], "polars.datatypes.Time": [[78, "polars-datatypes-time"]], "polars.exceptions.InvalidOperationError": [[91, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.RowsError": [[96, "polars-exceptions-rowserror"]], "polars.datatypes.Duration": [[65, "polars-datatypes-duration"]], "polars.datatypes.Float32": [[67, "polars-datatypes-float32"]], "polars.read_avro": [[112, "polars-read-avro"]], "polars.datatypes.Int8": [[72, "polars-datatypes-int8"]], "polars.datatypes.Float64": [[68, "polars-datatypes-float64"]], "polars.read_csv": [[114, "polars-read-csv"]], "polars.datatypes.Datetime": [[63, "polars-datatypes-datetime"]], "polars.from_pandas": [[107, "polars-from-pandas"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[111, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.get_index_type": [[110, "polars-get-index-type"]], "polars.exceptions.PolarsPanicError": [[95, "polars-exceptions-polarspanicerror"]], "polars.read_clipboard": [[113, "polars-read-clipboard"]], "polars.disable_string_cache": [[85, "polars-disable-string-cache"]], "polars.datatypes.DataType": [[61, "polars-datatypes-datatype"]], "polars.from_dicts": [[105, "polars-from-dicts"]], "polars.datatypes.Null": [[74, "polars-datatypes-null"]], "polars.datatypes.UInt32": [[80, "polars-datatypes-uint32"]], "polars.from_numpy": [[106, "polars-from-numpy"]], "polars.datatypes.Enum": [[66, "polars-datatypes-enum"]], "polars.datatypes.Int16": [[69, "polars-datatypes-int16"]], "polars.datatypes.Binary": [[58, "polars-datatypes-binary"]], "polars.exceptions.PolarsError": [[94, "polars-exceptions-polarserror"]], "polars.Series.dt.hour": [[1025, "polars-series-dt-hour"]], "polars.Series.clip_min": [[992, "polars-series-clip-min"]], "polars.Series.cumsum": [[1005, "polars-series-cumsum"]], "polars.Series.cos": [[994, "polars-series-cos"]], "polars.Series.dt.month": [[1040, "polars-series-dt-month"]], "polars.Series.drop_nans": [[1011, "polars-series-drop-nans"]], "polars.Series.dt.days": [[1022, "polars-series-dt-days"]], "polars.Series.dt.milliseconds": [[1036, "polars-series-dt-milliseconds"]], "polars.Series.cot": [[996, "polars-series-cot"]], "polars.Series.ceil": [[987, "polars-series-ceil"]], "polars.Series.cum_min": [[999, "polars-series-cum-min"]], "polars.Series.cum_prod": [[1000, "polars-series-cum-prod"]], "polars.Series.dt.add_business_days": [[1013, "polars-series-dt-add-business-days"]], "polars.Series.clone": [[993, "polars-series-clone"]], "polars.Series.cummin": [[1003, "polars-series-cummin"]], "polars.Series.cum_max": [[998, "polars-series-cum-max"]], "polars.Series.dt.base_utc_offset": [[1014, "polars-series-dt-base-utc-offset"]], "polars.Series.drop_nulls": [[1012, "polars-series-drop-nulls"]], "polars.Series.dt.century": [[1016, "polars-series-dt-century"]], "polars.Series.dt.month_end": [[1041, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[1042, "polars-series-dt-month-start"]], "polars.Series.cum_sum": [[1001, "polars-series-cum-sum"]], "polars.Series.describe": [[1008, "polars-series-describe"]], "polars.Series.dt.date": [[1019, "polars-series-dt-date"]], "polars.Series.dt.mean": [[1030, "polars-series-dt-mean"]], "polars.Series.dt.combine": [[1017, "polars-series-dt-combine"]], "polars.Series.dt.min": [[1037, "polars-series-dt-min"]], "polars.Series.cumulative_eval": [[1006, "polars-series-cumulative-eval"]], "polars.Series.dt.minutes": [[1039, "polars-series-dt-minutes"]], "polars.Series.dt.nanosecond": [[1043, "polars-series-dt-nanosecond"]], "polars.Series.clip_max": [[991, "polars-series-clip-max"]], "polars.Series.dt.dst_offset": [[1023, "polars-series-dt-dst-offset"]], "polars.Series.dt.millisecond": [[1035, "polars-series-dt-millisecond"]], "polars.Series.dt.convert_time_zone": [[1018, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.epoch": [[1024, "polars-series-dt-epoch"]], "polars.Series.diff": [[1009, "polars-series-diff"]], "polars.Series.dt.datetime": [[1020, "polars-series-dt-datetime"]], "polars.Series.cum_count": [[997, "polars-series-cum-count"]], "polars.Series.dt.minute": [[1038, "polars-series-dt-minute"]], "polars.Series.dt.is_leap_year": [[1027, "polars-series-dt-is-leap-year"]], "polars.Series.dt.iso_year": [[1028, "polars-series-dt-iso-year"]], "polars.Series.dt.day": [[1021, "polars-series-dt-day"]], "polars.Series.dt.median": [[1031, "polars-series-dt-median"]], "polars.Series.clear": [[989, "polars-series-clear"]], "polars.Series.cummax": [[1002, "polars-series-cummax"]], "polars.Series.cbrt": [[986, "polars-series-cbrt"]], "polars.Series.dt.max": [[1029, "polars-series-dt-max"]], "polars.Series.dt.microseconds": [[1033, "polars-series-dt-microseconds"]], "polars.Series.chunk_lengths": [[988, "polars-series-chunk-lengths"]], "polars.Series.dt.microsecond": [[1032, "polars-series-dt-microsecond"]], "polars.Series.dt.millennium": [[1034, "polars-series-dt-millennium"]], "polars.Series.cosh": [[995, "polars-series-cosh"]], "polars.Series.dot": [[1010, "polars-series-dot"]], "polars.Series.dt.hours": [[1026, "polars-series-dt-hours"]], "polars.Series.dt.cast_time_unit": [[1015, "polars-series-dt-cast-time-unit"]], "polars.Series.clip": [[990, "polars-series-clip"]], "polars.Series.cumprod": [[1004, "polars-series-cumprod"]], "polars.Series.cut": [[1007, "polars-series-cut"]], "polars.Series.arctan": [[943, "polars-series-arctan"]], "polars.Series.arg_true": [[948, "polars-series-arg-true"]], "polars.Series.cat.get_categories": [[981, "polars-series-cat-get-categories"]], "polars.Series.arg_unique": [[949, "polars-series-arg-unique"]], "Manipulation/selection": [[928, "manipulation-selection"], [1329, "manipulation-selection"], [817, "manipulation-selection"], [307, "manipulation-selection"]], "polars.Series.arr.sum": [[969, "polars-series-arr-sum"]], "polars.Series.arg_sort": [[947, "polars-series-arg-sort"]], "polars.Series.cat.to_local": [[984, "polars-series-cat-to-local"]], "polars.Series.arr.n_unique": [[964, "polars-series-arr-n-unique"]], "polars.Series.apply": [[938, "polars-series-apply"]], "polars.Series.arr.shift": [[966, "polars-series-arr-shift"]], "polars.Series.arccosh": [[940, "polars-series-arccosh"]], "polars.Series.bin.decode": [[975, "polars-series-bin-decode"]], "polars.Series.arr.median": [[962, "polars-series-arr-median"]], "polars.Series.arr.reverse": [[965, "polars-series-arr-reverse"]], "polars.Series.arr.arg_max": [[952, "polars-series-arr-arg-max"]], "Selectors": [[931, "selectors"]], "Importing": [[931, "importing"]], "Set operations": [[931, "set-operations"]], "Functions": [[931, "functions"], [812, "functions"], [824, "functions"]], "polars.Series.arr.all": [[950, "polars-series-arr-all"]], "polars.Series.arr.arg_min": [[953, "polars-series-arr-arg-min"]], "polars.Series.arr.join": [[959, "polars-series-arr-join"]], "polars.Series.arr.max": [[961, "polars-series-arr-max"]], "polars.Series.arr.unique": [[972, "polars-series-arr-unique"]], "polars.Series.bin.encode": [[976, "polars-series-bin-encode"]], "polars.Series.arr.contains": [[954, "polars-series-arr-contains"]], "polars.Series.arr.explode": [[956, "polars-series-arr-explode"]], "Metadata": [[929, "metadata"]], "polars.Series.arccos": [[939, "polars-series-arccos"]], "polars.Series.arg_min": [[946, "polars-series-arg-min"]], "polars.Series.bin.starts_with": [[978, "polars-series-bin-starts-with"]], "polars.Series.cast": [[980, "polars-series-cast"]], "polars.Series.arr.last": [[960, "polars-series-arr-last"]], "polars.Series.bin.contains": [[974, "polars-series-bin-contains"]], "polars.Series.arr.min": [[963, "polars-series-arr-min"]], "polars.Series.arctanh": [[944, "polars-series-arctanh"]], "polars.Series.cat.set_ordering": [[983, "polars-series-cat-set-ordering"]], "polars.Series.abs": [[933, "polars-series-abs"]], "polars.Series.arr.first": [[957, "polars-series-arr-first"]], "polars.Series.arr.std": [[968, "polars-series-arr-std"]], "polars.Series.all": [[935, "polars-series-all"]], "polars.Series.arcsinh": [[942, "polars-series-arcsinh"]], "polars.Series.cat.is_local": [[982, "polars-series-cat-is-local"]], "polars.Series.arcsin": [[941, "polars-series-arcsin"]], "polars.Series.arr.sort": [[967, "polars-series-arr-sort"]], "polars.Series.arr.var": [[973, "polars-series-arr-var"]], "polars.Series.arr.to_list": [[970, "polars-series-arr-to-list"]], "polars.Series.bin.ends_with": [[977, "polars-series-bin-ends-with"]], "polars.Series.arr.any": [[951, "polars-series-arr-any"]], "polars.Series.arr.count_matches": [[955, "polars-series-arr-count-matches"]], "polars.Series.append": [[937, "polars-series-append"]], "polars.Series.arr.get": [[958, "polars-series-arr-get"]], "polars.Series.arr.to_struct": [[971, "polars-series-arr-to-struct"]], "polars.Series.alias": [[934, "polars-series-alias"]], "polars.Series.cat.uses_lexical_ordering": [[985, "polars-series-cat-uses-lexical-ordering"]], "Plugins": [[930, "plugins"]], "polars.Series.arg_max": [[945, "polars-series-arg-max"]], "polars.Series.any": [[936, "polars-series-any"]], "polars.Series.bottom_k": [[979, "polars-series-bottom-k"]], "polars.LazyFrame.quantile": [[876, "polars-lazyframe-quantile"]], "polars.LazyFrame.slice": [[888, "polars-lazyframe-slice"]], "polars.LazyFrame.sum": [[892, "polars-lazyframe-sum"]], "polars.LazyFrame.shift_and_fill": [[886, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[922, "polars-lazyframe-group-by-lazygroupby-tail"]], "LazyFrame": [[926, "lazyframe"]], "polars.LazyFrame.tail": [[893, "polars-lazyframe-tail"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[920, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[917, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.LazyFrame.rolling": [[879, "polars-lazyframe-rolling"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[914, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[910, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.unique": [[896, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[916, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.take_every": [[894, "polars-lazyframe-take-every"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[921, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.pipe": [[874, "polars-lazyframe-pipe"]], "GroupBy": [[925, "groupby"], [304, "groupby"]], "polars.LazyFrame.null_count": [[873, "polars-lazyframe-null-count"]], "Attributes": [[923, "attributes"], [1319, "attributes"], [300, "attributes"]], "Miscellaneous": [[927, "miscellaneous"], [1328, "miscellaneous"], [824, "miscellaneous"], [816, "miscellaneous"], [306, "miscellaneous"]], "Serialization": [[927, "serialization"], [306, "serialization"]], "polars.LazyFrame.schema": [[880, "polars-lazyframe-schema"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[907, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[918, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.LazyFrame.set_sorted": [[884, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[908, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[911, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[906, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.with_columns_seq": [[902, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.var": [[899, "polars-lazyframe-var"]], "polars.LazyFrame.with_row_count": [[904, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.top_k": [[895, "polars-lazyframe-top-k"]], "polars.LazyFrame.profile": [[875, "polars-lazyframe-profile"]], "polars.LazyFrame.width": [[900, "polars-lazyframe-width"]], "polars.LazyFrame.shift": [[885, "polars-lazyframe-shift"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[912, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.melt": [[870, "polars-lazyframe-melt"]], "polars.LazyFrame.std": [[891, "polars-lazyframe-std"]], "polars.LazyFrame.update": [[898, "polars-lazyframe-update"]], "polars.LazyFrame.select_seq": [[882, "polars-lazyframe-select-seq"]], "polars.LazyFrame.with_row_index": [[905, "polars-lazyframe-with-row-index"]], "Descriptive": [[924, "descriptive"], [1324, "descriptive"], [302, "descriptive"]], "polars.LazyFrame.show_graph": [[887, "polars-lazyframe-show-graph"]], "polars.LazyFrame.serialize": [[883, "polars-lazyframe-serialize"]], "polars.LazyFrame.with_context": [[903, "polars-lazyframe-with-context"]], "polars.LazyFrame.min": [[872, "polars-lazyframe-min"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[913, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[909, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[919, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[915, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.unnest": [[897, "polars-lazyframe-unnest"]], "polars.LazyFrame.select": [[881, "polars-lazyframe-select"]], "polars.LazyFrame.merge_sorted": [[871, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.rename": [[877, "polars-lazyframe-rename"]], "polars.LazyFrame.reverse": [[878, "polars-lazyframe-reverse"]], "polars.LazyFrame.with_columns": [[901, "polars-lazyframe-with-columns"]], "polars.LazyFrame.sort": [[889, "polars-lazyframe-sort"]], "polars.LazyFrame.sql": [[890, "polars-lazyframe-sql"]], "polars.median": [[780, "polars-median"]], "polars.from_epoch": [[764, "polars-from-epoch"]], "polars.format": [[763, "polars-format"]], "polars.head": [[766, "polars-head"]], "Categories": [[808, "categories"], [1322, "categories"]], "polars.when": [[803, "polars-when"]], "polars.map": [[773, "polars-map"]], "polars.implode": [[767, "polars-implode"]], "polars.int_range": [[768, "polars-int-range"]], "polars.time": [[799, "polars-time"]], "polars.datetime": [[755, "polars-datetime"]], "polars.last": [[770, "polars-last"]], "polars.quantile": [[786, "polars-quantile"]], "polars.sum_horizontal": [[797, "polars-sum-horizontal"]], "polars.repeat": [[788, "polars-repeat"]], "polars.select": [[791, "polars-select"]], "Binary": [[806, "binary"], [1320, "binary"], [819, "binary"]], "polars.datetime_ranges": [[757, "polars-datetime-ranges"]], "polars.mean": [[778, "polars-mean"]], "polars.len": [[771, "polars-len"]], "polars.lit": [[772, "polars-lit"]], "polars.sum": [[796, "polars-sum"]], "polars.time_ranges": [[801, "polars-time-ranges"]], "polars.exclude": [[760, "polars-exclude"]], "polars.int_ranges": [[769, "polars-int-ranges"]], "polars.duration": [[758, "polars-duration"]], "polars.min_horizontal": [[782, "polars-min-horizontal"]], "polars.map_groups": [[775, "polars-map-groups"]], "polars.n_unique": [[783, "polars-n-unique"]], "polars.tail": [[798, "polars-tail"]], "polars.time_range": [[800, "polars-time-range"]], "polars.first": [[761, "polars-first"]], "polars.datetime_range": [[756, "polars-datetime-range"]], "polars.max": [[776, "polars-max"]], "polars.map_batches": [[774, "polars-map-batches"]], "polars.nth": [[784, "polars-nth"]], "polars.rolling_corr": [[789, "polars-rolling-corr"]], "Boolean": [[807, "boolean"], [1321, "boolean"]], "polars.max_horizontal": [[777, "polars-max-horizontal"]], "polars.std": [[794, "polars-std"]], "polars.date_ranges": [[754, "polars-date-ranges"]], "polars.element": [[759, "polars-element"]], "Columns / names": [[810, "columns-names"]], "polars.reduce": [[787, "polars-reduce"]], "polars.mean_horizontal": [[779, "polars-mean-horizontal"]], "polars.min": [[781, "polars-min"]], "polars.rolling_cov": [[790, "polars-rolling-cov"]], "polars.sql_expr": [[793, "polars-sql-expr"]], "polars.zeros": [[804, "polars-zeros"]], "polars.groups": [[765, "polars-groups"]], "polars.var": [[802, "polars-var"]], "polars.fold": [[762, "polars-fold"]], "polars.col": [[809, "polars-col"]], "Computation": [[811, "computation"], [1323, "computation"], [301, "computation"]], "polars.sql": [[792, "polars-sql"]], "polars.ones": [[785, "polars-ones"]], "polars.struct": [[795, "polars-struct"]], "polars.cumsum": [[750, "polars-cumsum"]], "polars.Expr.tail": [[709, "polars-expr-tail"]], "polars.Expr.tan": [[712, "polars-expr-tan"]], "polars.cum_count": [[743, "polars-cum-count"]], "polars.Expr.struct.field": [[702, "polars-expr-struct-field"]], "polars.apply": [[729, "polars-apply"]], "polars.Expr.str.zfill": [[701, "polars-expr-str-zfill"]], "polars.Expr.unique_counts": [[719, "polars-expr-unique-counts"]], "polars.count": [[741, "polars-count"]], "polars.Expr.to_physical": [[714, "polars-expr-to-physical"]], "polars.arctan2d": [[733, "polars-arctan2d"]], "polars.cov": [[742, "polars-cov"]], "polars.Expr.sub": [[706, "polars-expr-sub"]], "polars.Expr.str.to_titlecase": [[699, "polars-expr-str-to-titlecase"]], "polars.all_horizontal": [[726, "polars-all-horizontal"]], "polars.Expr.struct.json_encode": [[703, "polars-expr-struct-json-encode"]], "polars.arg_sort_by": [[734, "polars-arg-sort-by"]], "polars.cumreduce": [[749, "polars-cumreduce"]], "polars.Expr.str.to_time": [[698, "polars-expr-str-to-time"]], "polars.Expr.str.to_uppercase": [[700, "polars-expr-str-to-uppercase"]], "polars.Expr.struct.with_fields": [[705, "polars-expr-struct-with-fields"]], "polars.cum_reduce": [[745, "polars-cum-reduce"]], "polars.Expr.xor": [[724, "polars-expr-xor"]], "polars.Expr.where": [[723, "polars-expr-where"]], "polars.Expr.truediv": [[717, "polars-expr-truediv"]], "polars.Expr.take_every": [[711, "polars-expr-take-every"]], "polars.Expr.top_k": [[715, "polars-expr-top-k"]], "polars.all": [[725, "polars-all"]], "polars.cumsum_horizontal": [[751, "polars-cumsum-horizontal"]], "polars.Expr.tanh": [[713, "polars-expr-tanh"]], "polars.Expr.str.to_integer": [[696, "polars-expr-str-to-integer"]], "polars.Expr.struct.rename_fields": [[704, "polars-expr-struct-rename-fields"]], "polars.Expr.upper_bound": [[720, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[721, "polars-expr-value-counts"]], "polars.cum_fold": [[744, "polars-cum-fold"]], "polars.any_horizontal": [[728, "polars-any-horizontal"]], "polars.approx_n_unique": [[730, "polars-approx-n-unique"]], "polars.date_range": [[753, "polars-date-range"]], "polars.any": [[727, "polars-any"]], "polars.business_day_count": [[736, "polars-business-day-count"]], "polars.Expr.take": [[710, "polars-expr-take"]], "polars.Expr.suffix": [[707, "polars-expr-suffix"]], "polars.concat_str": [[739, "polars-concat-str"]], "polars.cumfold": [[748, "polars-cumfold"]], "polars.arg_where": [[735, "polars-arg-where"]], "polars.corr": [[740, "polars-corr"]], "polars.concat_list": [[738, "polars-concat-list"]], "polars.Expr.sum": [[708, "polars-expr-sum"]], "polars.Expr.top_k_by": [[716, "polars-expr-top-k-by"]], "polars.Expr.var": [[722, "polars-expr-var"]], "polars.arctan2": [[732, "polars-arctan2"]], "polars.arange": [[731, "polars-arange"]], "polars.date": [[752, "polars-date"]], "polars.coalesce": [[737, "polars-coalesce"]], "polars.cum_sum": [[746, "polars-cum-sum"]], "polars.cum_sum_horizontal": [[747, "polars-cum-sum-horizontal"]], "polars.Expr.unique": [[718, "polars-expr-unique"]], "polars.Expr.str.to_lowercase": [[697, "polars-expr-str-to-lowercase"]], "polars.Expr.str.len_bytes": [[665, "polars-expr-str-len-bytes"]], "polars.Expr.str.concat": [[648, "polars-expr-str-concat"]], "polars.Expr.str.strip_chars_end": [[687, "polars-expr-str-strip-chars-end"]], "polars.Expr.sign": [[639, "polars-expr-sign"]], "polars.Expr.std": [[647, "polars-expr-std"]], "polars.Expr.str.splitn": [[683, "polars-expr-str-splitn"]], "polars.Expr.str.strptime": [[691, "polars-expr-str-strptime"]], "polars.Expr.shuffle": [[638, "polars-expr-shuffle"]], "polars.Expr.str.strip_prefix": [[689, "polars-expr-str-strip-prefix"]], "polars.Expr.str.replace_all": [[675, "polars-expr-str-replace-all"]], "polars.Expr.str.extract_all": [[658, "polars-expr-str-extract-all"]], "polars.Expr.str.replace_many": [[676, "polars-expr-str-replace-many"]], "polars.Expr.str.rstrip": [[679, "polars-expr-str-rstrip"]], "polars.Expr.str.encode": [[654, "polars-expr-str-encode"]], "polars.Expr.str.json_decode": [[662, "polars-expr-str-json-decode"]], "polars.Expr.str.ljust": [[668, "polars-expr-str-ljust"]], "polars.Expr.str.starts_with": [[684, "polars-expr-str-starts-with"]], "polars.Expr.str.contains": [[649, "polars-expr-str-contains"]], "polars.Expr.sqrt": [[646, "polars-expr-sqrt"]], "polars.Expr.str.to_date": [[693, "polars-expr-str-to-date"]], "polars.Expr.str.strip_chars_start": [[688, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.head": [[661, "polars-expr-str-head"]], "polars.Expr.str.lengths": [[667, "polars-expr-str-lengths"]], "polars.Expr.skew": [[642, "polars-expr-skew"]], "polars.Expr.str.contains_any": [[650, "polars-expr-str-contains-any"]], "polars.Expr.str.explode": [[656, "polars-expr-str-explode"]], "polars.Expr.str.strip_suffix": [[690, "polars-expr-str-strip-suffix"]], "polars.Expr.str.lstrip": [[669, "polars-expr-str-lstrip"]], "polars.Expr.sort": [[644, "polars-expr-sort"]], "polars.Expr.sort_by": [[645, "polars-expr-sort-by"]], "polars.Expr.str.count_matches": [[652, "polars-expr-str-count-matches"]], "polars.Expr.str.ends_with": [[655, "polars-expr-str-ends-with"]], "polars.Expr.str.rjust": [[678, "polars-expr-str-rjust"]], "polars.Expr.str.strip_chars": [[686, "polars-expr-str-strip-chars"]], "polars.Expr.str.split": [[681, "polars-expr-str-split"]], "polars.Expr.str.reverse": [[677, "polars-expr-str-reverse"]], "polars.Expr.str.tail": [[692, "polars-expr-str-tail"]], "polars.Expr.str.n_chars": [[670, "polars-expr-str-n-chars"]], "polars.Expr.str.to_decimal": [[695, "polars-expr-str-to-decimal"]], "polars.Expr.str.find": [[660, "polars-expr-str-find"]], "polars.Expr.str.count_match": [[651, "polars-expr-str-count-match"]], "polars.Expr.str.pad_start": [[672, "polars-expr-str-pad-start"]], "polars.Expr.str.pad_end": [[671, "polars-expr-str-pad-end"]], "polars.Expr.sin": [[640, "polars-expr-sin"]], "polars.Expr.str.decode": [[653, "polars-expr-str-decode"]], "polars.Expr.str.replace": [[674, "polars-expr-str-replace"]], "polars.Expr.str.split_exact": [[682, "polars-expr-str-split-exact"]], "polars.Expr.str.to_datetime": [[694, "polars-expr-str-to-datetime"]], "polars.Expr.str.extract_groups": [[659, "polars-expr-str-extract-groups"]], "polars.Expr.str.json_extract": [[663, "polars-expr-str-json-extract"]], "polars.Expr.str.strip": [[685, "polars-expr-str-strip"]], "polars.Expr.str.slice": [[680, "polars-expr-str-slice"]], "polars.Expr.str.parse_int": [[673, "polars-expr-str-parse-int"]], "polars.Expr.str.len_chars": [[666, "polars-expr-str-len-chars"]], "polars.Expr.slice": [[643, "polars-expr-slice"]], "polars.Expr.sinh": [[641, "polars-expr-sinh"]], "polars.Expr.str.json_path_match": [[664, "polars-expr-str-json-path-match"]], "polars.Expr.str.extract": [[657, "polars-expr-str-extract"]], "Series": [[1326, "series"]], "polars.Series.tanh": [[1299, "polars-series-tanh"]], "polars.Series.sum": [[1294, "polars-series-sum"]], "polars.Series.to_dummies": [[1301, "polars-series-to-dummies"]], "polars.Series.to_frame": [[1302, "polars-series-to-frame"]], "polars.Series.str.strptime": [[1277, "polars-series-str-strptime"]], "polars.Series.to_init_repr": [[1303, "polars-series-to-init-repr"]], "polars.Series.upper_bound": [[1313, "polars-series-upper-bound"]], "polars.Series.struct.unnest": [[1293, "polars-series-struct-unnest"]], "polars.Series.value_counts": [[1314, "polars-series-value-counts"]], "polars.Series.str.to_integer": [[1282, "polars-series-str-to-integer"]], "Plot": [[1330, "plot"], [308, "plot"]], "polars.Series.struct.rename_fields": [[1291, "polars-series-struct-rename-fields"]], "polars.Series.str.to_time": [[1284, "polars-series-str-to-time"]], "polars.Series.to_numpy": [[1306, "polars-series-to-numpy"]], "Struct": [[1332, "struct"], [821, "struct"]], "polars.Series.struct.json_encode": [[1290, "polars-series-struct-json-encode"]], "polars.Series.str.to_datetime": [[1280, "polars-series-str-to-datetime"]], "polars.Series.var": [[1315, "polars-series-var"]], "polars.Series.str.to_lowercase": [[1283, "polars-series-str-to-lowercase"]], "polars.Series.unique": [[1311, "polars-series-unique"]], "polars.Series.struct.field": [[1288, "polars-series-struct-field"]], "polars.Series.to_pandas": [[1307, "polars-series-to-pandas"]], "polars.Series.str.tail": [[1278, "polars-series-str-tail"]], "polars.Series.top_k": [[1310, "polars-series-top-k"]], "polars.Series.view": [[1316, "polars-series-view"]], "polars.Series.take": [[1296, "polars-series-take"]], "polars.Series.str.zfill": [[1287, "polars-series-str-zfill"]], "polars.Series.tail": [[1295, "polars-series-tail"]], "polars.Series.to_torch": [[1309, "polars-series-to-torch"]], "polars.Series.str.to_date": [[1279, "polars-series-str-to-date"]], "polars.Series.struct.fields": [[1289, "polars-series-struct-fields"]], "polars.Series.unique_counts": [[1312, "polars-series-unique-counts"]], "polars.Series.zip_with": [[1317, "polars-series-zip-with"]], "polars.Series.to_physical": [[1308, "polars-series-to-physical"]], "polars.Series.str.strip_suffix": [[1276, "polars-series-str-strip-suffix"]], "polars.Series.str.to_decimal": [[1281, "polars-series-str-to-decimal"]], "List": [[1327, "list"], [814, "list"]], "polars.Series.take_every": [[1297, "polars-series-take-every"]], "polars.Series.to_list": [[1305, "polars-series-to-list"]], "polars.Series.to_jax": [[1304, "polars-series-to-jax"]], "polars.Series.to_arrow": [[1300, "polars-series-to-arrow"]], "polars.Series.str.to_uppercase": [[1286, "polars-series-str-to-uppercase"]], "polars.Series.str.to_titlecase": [[1285, "polars-series-str-to-titlecase"]], "polars.Series.tan": [[1298, "polars-series-tan"]], "Export": [[1325, "export"], [303, "export"]], "polars.Series.struct.schema": [[1292, "polars-series-struct-schema"]], "polars.Expr.list.sample": [[527, "polars-expr-list-sample"]], "polars.Expr.mode": [[570, "polars-expr-mode"]], "polars.Expr.lt": [[547, "polars-expr-lt"]], "polars.Expr.list.mean": [[522, "polars-expr-list-mean"]], "polars.Expr.meta.is_column_selection": [[558, "polars-expr-meta-is-column-selection"]], "polars.Expr.list.shift": [[532, "polars-expr-list-shift"]], "polars.Expr.meta.undo_aliases": [[566, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.root_names": [[563, "polars-expr-meta-root-names"]], "polars.Expr.map_dict": [[551, "polars-expr-map-dict"]], "polars.Expr.meta.pop": [[562, "polars-expr-meta-pop"]], "polars.Expr.min": [[568, "polars-expr-min"]], "polars.Expr.list.std": [[535, "polars-expr-list-std"]], "polars.Expr.meta.ne": [[560, "polars-expr-meta-ne"]], "polars.Expr.name.map": [[574, "polars-expr-name-map"]], "polars.Expr.list.slice": [[533, "polars-expr-list-slice"]], "polars.Expr.list.reverse": [[526, "polars-expr-list-reverse"]], "polars.Expr.list.sort": [[534, "polars-expr-list-sort"]], "polars.Expr.list.to_array": [[539, "polars-expr-list-to-array"]], "polars.Expr.list.median": [[523, "polars-expr-list-median"]], "polars.Expr.list.set_union": [[531, "polars-expr-list-set-union"]], "polars.Expr.meta.write_json": [[567, "polars-expr-meta-write-json"]], "polars.Expr.name.map_fields": [[575, "polars-expr-name-map-fields"]], "polars.Expr.name.prefix_fields": [[577, "polars-expr-name-prefix-fields"]], "polars.Expr.mod": [[569, "polars-expr-mod"]], "polars.Expr.meta.eq": [[556, "polars-expr-meta-eq"]], "polars.Expr.list.min": [[524, "polars-expr-list-min"]], "polars.Expr.list.take": [[538, "polars-expr-list-take"]], "polars.Expr.name.suffix_fields": [[579, "polars-expr-name-suffix-fields"]], "polars.Expr.list.to_struct": [[540, "polars-expr-list-to-struct"]], "polars.Expr.log10": [[544, "polars-expr-log10"]], "polars.Expr.list.set_symmetric_difference": [[530, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.name.prefix": [[576, "polars-expr-name-prefix"]], "polars.Expr.meta.has_multiple_outputs": [[557, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.sum": [[536, "polars-expr-list-sum"]], "polars.Expr.lower_bound": [[546, "polars-expr-lower-bound"]], "polars.Expr.list.n_unique": [[525, "polars-expr-list-n-unique"]], "polars.Expr.map_batches": [[550, "polars-expr-map-batches"]], "polars.Expr.list.var": [[542, "polars-expr-list-var"]], "polars.Expr.map_elements": [[552, "polars-expr-map-elements"]], "polars.Expr.mul": [[571, "polars-expr-mul"]], "polars.Expr.map_alias": [[549, "polars-expr-map-alias"]], "polars.Expr.meta.serialize": [[564, "polars-expr-meta-serialize"]], "polars.Expr.list.tail": [[537, "polars-expr-list-tail"]], "polars.Expr.log1p": [[545, "polars-expr-log1p"]], "polars.Expr.meta.output_name": [[561, "polars-expr-meta-output-name"]], "polars.Expr.meta.tree_format": [[565, "polars-expr-meta-tree-format"]], "polars.Expr.max": [[553, "polars-expr-max"]], "polars.Expr.mean": [[554, "polars-expr-mean"]], "polars.Expr.name.suffix": [[578, "polars-expr-name-suffix"]], "polars.Expr.log": [[543, "polars-expr-log"]], "polars.Expr.median": [[555, "polars-expr-median"]], "polars.Expr.map": [[548, "polars-expr-map"]], "polars.Expr.list.unique": [[541, "polars-expr-list-unique"]], "polars.Expr.n_unique": [[572, "polars-expr-n-unique"]], "polars.Expr.list.set_intersection": [[529, "polars-expr-list-set-intersection"]], "polars.Expr.name.keep": [[573, "polars-expr-name-keep"]], "polars.Expr.meta.is_regex_projection": [[559, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.set_difference": [[528, "polars-expr-list-set-difference"]], "polars.Expr.sample": [[632, "polars-expr-sample"]], "polars.Expr.nan_min": [[583, "polars-expr-nan-min"]], "polars.Expr.rle": [[608, "polars-expr-rle"]], "polars.Expr.rolling_median": [[617, "polars-expr-rolling-median"]], "polars.Expr.qcut": [[598, "polars-expr-qcut"]], "polars.Expr.or_": [[589, "polars-expr-or"]], "polars.Expr.shift": [[635, "polars-expr-shift"]], "polars.Expr.reshape": [[606, "polars-expr-reshape"]], "polars.Expr.neg": [[586, "polars-expr-neg"]], "polars.Expr.reinterpret": [[603, "polars-expr-reinterpret"]], "polars.Expr.round": [[630, "polars-expr-round"]], "polars.Expr.rolling_sum": [[626, "polars-expr-rolling-sum"]], "polars.Expr.null_count": [[588, "polars-expr-null-count"]], "polars.Expr.rolling_min_by": [[620, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_skew": [[623, "polars-expr-rolling-skew"]], "polars.Expr.nan_max": [[582, "polars-expr-nan-max"]], "polars.Expr.rolling_median_by": [[618, "polars-expr-rolling-median-by"]], "polars.Expr.product": [[597, "polars-expr-product"]], "polars.Expr.repeat_by": [[604, "polars-expr-repeat-by"]], "polars.Expr.rolling_quantile": [[621, "polars-expr-rolling-quantile"]], "polars.Expr.shrink_dtype": [[637, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_max": [[613, "polars-expr-rolling-max"]], "polars.Expr.radians": [[600, "polars-expr-radians"]], "polars.Expr.prefix": [[596, "polars-expr-prefix"]], "polars.Expr.ne": [[584, "polars-expr-ne"]], "polars.Expr.over": [[590, "polars-expr-over"]], "polars.Expr.shift_and_fill": [[636, "polars-expr-shift-and-fill"]], "polars.Expr.reverse": [[607, "polars-expr-reverse"]], "polars.Expr.rolling_quantile_by": [[622, "polars-expr-rolling-quantile-by"]], "polars.Expr.pow": [[595, "polars-expr-pow"]], "polars.Expr.rolling": [[610, "polars-expr-rolling"]], "polars.Expr.rolling_sum_by": [[627, "polars-expr-rolling-sum-by"]], "polars.Expr.pct_change": [[591, "polars-expr-pct-change"]], "polars.Expr.rolling_max_by": [[614, "polars-expr-rolling-max-by"]], "polars.Expr.rolling_var": [[628, "polars-expr-rolling-var"]], "polars.Expr.rolling_mean": [[615, "polars-expr-rolling-mean"]], "polars.Expr.rank": [[601, "polars-expr-rank"]], "polars.Expr.rechunk": [[602, "polars-expr-rechunk"]], "polars.Expr.name.to_lowercase": [[580, "polars-expr-name-to-lowercase"]], "polars.Expr.not_": [[587, "polars-expr-not"]], "polars.Expr.ne_missing": [[585, "polars-expr-ne-missing"]], "polars.Expr.replace": [[605, "polars-expr-replace"]], "polars.Expr.peak_min": [[593, "polars-expr-peak-min"]], "polars.Expr.peak_max": [[592, "polars-expr-peak-max"]], "polars.Expr.rolling_mean_by": [[616, "polars-expr-rolling-mean-by"]], "polars.Expr.name.to_uppercase": [[581, "polars-expr-name-to-uppercase"]], "polars.Expr.rolling_min": [[619, "polars-expr-rolling-min"]], "polars.Expr.rolling_var_by": [[629, "polars-expr-rolling-var-by"]], "polars.Expr.round_sig_figs": [[631, "polars-expr-round-sig-figs"]], "polars.Expr.search_sorted": [[633, "polars-expr-search-sorted"]], "polars.Expr.set_sorted": [[634, "polars-expr-set-sorted"]], "polars.Expr.rolling_std_by": [[625, "polars-expr-rolling-std-by"]], "polars.Expr.quantile": [[599, "polars-expr-quantile"]], "polars.Expr.rle_id": [[609, "polars-expr-rle-id"]], "polars.Expr.rolling_apply": [[611, "polars-expr-rolling-apply"]], "polars.Expr.rolling_map": [[612, "polars-expr-rolling-map"]], "polars.Expr.pipe": [[594, "polars-expr-pipe"]], "polars.Expr.rolling_std": [[624, "polars-expr-rolling-std"]], "polars.Expr.list.explode": [[511, "polars-expr-list-explode"]], "polars.Expr.is_not_null": [[491, "polars-expr-is-not-null"]], "polars.Expr.list.any": [[501, "polars-expr-list-any"]], "polars.Expr.is_unique": [[493, "polars-expr-is-unique"]], "polars.Expr.ge": [[468, "polars-expr-ge"]], "polars.Expr.is_null": [[492, "polars-expr-is-null"]], "polars.Expr.list.arg_max": [[502, "polars-expr-list-arg-max"]], "polars.Expr.is_last": [[486, "polars-expr-is-last"]], "polars.Expr.is_not_nan": [[490, "polars-expr-is-not-nan"]], "polars.Expr.get": [[469, "polars-expr-get"]], "polars.Expr.has_nulls": [[471, "polars-expr-has-nulls"]], "polars.Expr.last": [[496, "polars-expr-last"]], "polars.Expr.list.last": [[518, "polars-expr-list-last"]], "polars.Expr.list.join": [[517, "polars-expr-list-join"]], "polars.Expr.is_in": [[484, "polars-expr-is-in"]], "polars.Expr.is_first": [[482, "polars-expr-is-first"]], "polars.Expr.is_between": [[479, "polars-expr-is-between"]], "polars.Expr.forward_fill": [[464, "polars-expr-forward-fill"]], "polars.Expr.gt": [[470, "polars-expr-gt"]], "polars.Expr.is_first_distinct": [[483, "polars-expr-is-first-distinct"]], "polars.Expr.is_not": [[489, "polars-expr-is-not"]], "polars.Expr.list.contains": [[505, "polars-expr-list-contains"]], "polars.Expr.is_nan": [[488, "polars-expr-is-nan"]], "polars.Expr.list.first": [[512, "polars-expr-list-first"]], "polars.Expr.list.max": [[521, "polars-expr-list-max"]], "polars.Expr.is_infinite": [[485, "polars-expr-is-infinite"]], "polars.Expr.len": [[498, "polars-expr-len"]], "polars.Expr.inspect": [[476, "polars-expr-inspect"]], "polars.Expr.list.diff": [[508, "polars-expr-list-diff"]], "polars.Expr.limit": [[499, "polars-expr-limit"]], "polars.Expr.list.gather_every": [[514, "polars-expr-list-gather-every"]], "polars.Expr.gather_every": [[467, "polars-expr-gather-every"]], "polars.Expr.gather": [[466, "polars-expr-gather"]], "polars.Expr.list.len": [[519, "polars-expr-list-len"]], "polars.Expr.list.count_matches": [[507, "polars-expr-list-count-matches"]], "polars.Expr.hist": [[474, "polars-expr-hist"]], "polars.Expr.list.get": [[515, "polars-expr-list-get"]], "polars.Expr.list.eval": [[510, "polars-expr-list-eval"]], "polars.Expr.list.all": [[500, "polars-expr-list-all"]], "polars.Expr.list.gather": [[513, "polars-expr-list-gather"]], "polars.Expr.implode": [[475, "polars-expr-implode"]], "polars.Expr.list.drop_nulls": [[509, "polars-expr-list-drop-nulls"]], "polars.Expr.list.arg_min": [[503, "polars-expr-list-arg-min"]], "polars.Expr.is_last_distinct": [[487, "polars-expr-is-last-distinct"]], "polars.Expr.hash": [[472, "polars-expr-hash"]], "polars.Expr.list.head": [[516, "polars-expr-list-head"]], "polars.Expr.kurtosis": [[495, "polars-expr-kurtosis"]], "polars.Expr.is_duplicated": [[480, "polars-expr-is-duplicated"]], "polars.Expr.keep_name": [[494, "polars-expr-keep-name"]], "polars.Expr.interpolate": [[477, "polars-expr-interpolate"]], "polars.Expr.from_json": [[465, "polars-expr-from-json"]], "polars.Expr.head": [[473, "polars-expr-head"]], "polars.Expr.list.count_match": [[506, "polars-expr-list-count-match"]], "polars.Expr.list.concat": [[504, "polars-expr-list-concat"]], "polars.Expr.le": [[497, "polars-expr-le"]], "polars.Expr.interpolate_by": [[478, "polars-expr-interpolate-by"]], "polars.Expr.is_finite": [[481, "polars-expr-is-finite"]], "polars.Expr.list.lengths": [[520, "polars-expr-list-lengths"]], "polars.Expr.dt.second": [[428, "polars-expr-dt-second"]], "polars.Expr.fill_null": [[458, "polars-expr-fill-null"]], "polars.Expr.dt.microsecond": [[411, "polars-expr-dt-microsecond"]], "polars.Expr.dt.nanoseconds": [[422, "polars-expr-dt-nanoseconds"]], "polars.Expr.entropy": [[446, "polars-expr-entropy"]], "polars.Expr.dt.offset_by": [[423, "polars-expr-dt-offset-by"]], "polars.Expr.dt.weekday": [[443, "polars-expr-dt-weekday"]], "polars.Expr.flatten": [[461, "polars-expr-flatten"]], "polars.Expr.dt.with_time_unit": [[444, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.quarter": [[425, "polars-expr-dt-quarter"]], "polars.Expr.dt.hours": [[408, "polars-expr-dt-hours"]], "polars.Expr.dt.is_leap_year": [[409, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.milliseconds": [[415, "polars-expr-dt-milliseconds"]], "polars.Expr.floor": [[462, "polars-expr-floor"]], "polars.Expr.dt.month_end": [[419, "polars-expr-dt-month-end"]], "polars.Expr.eq": [[447, "polars-expr-eq"]], "polars.Expr.dt.year": [[445, "polars-expr-dt-year"]], "polars.Expr.dt.millennium": [[413, "polars-expr-dt-millennium"]], "polars.Expr.ewm_mean_by": [[450, "polars-expr-ewm-mean-by"]], "polars.Expr.dt.total_nanoseconds": [[439, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.microseconds": [[412, "polars-expr-dt-microseconds"]], "polars.Expr.dt.seconds": [[429, "polars-expr-dt-seconds"]], "polars.Expr.dt.total_milliseconds": [[437, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.truncate": [[441, "polars-expr-dt-truncate"]], "polars.Expr.ewm_std": [[451, "polars-expr-ewm-std"]], "polars.Expr.dt.total_minutes": [[438, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.iso_year": [[410, "polars-expr-dt-iso-year"]], "polars.Expr.ewm_mean": [[449, "polars-expr-ewm-mean"]], "polars.Expr.dt.minute": [[416, "polars-expr-dt-minute"]], "polars.Expr.dt.month_start": [[420, "polars-expr-dt-month-start"]], "polars.Expr.first": [[460, "polars-expr-first"]], "polars.Expr.floordiv": [[463, "polars-expr-floordiv"]], "polars.Expr.exclude": [[453, "polars-expr-exclude"]], "polars.Expr.dt.strftime": [[430, "polars-expr-dt-strftime"]], "polars.Expr.dt.to_string": [[433, "polars-expr-dt-to-string"]], "polars.Expr.ewm_var": [[452, "polars-expr-ewm-var"]], "polars.Expr.dt.millisecond": [[414, "polars-expr-dt-millisecond"]], "polars.Expr.dt.hour": [[407, "polars-expr-dt-hour"]], "polars.Expr.dt.minutes": [[417, "polars-expr-dt-minutes"]], "polars.Expr.filter": [[459, "polars-expr-filter"]], "polars.Expr.dt.epoch": [[406, "polars-expr-dt-epoch"]], "polars.Expr.dt.total_hours": [[435, "polars-expr-dt-total-hours"]], "polars.Expr.dt.total_seconds": [[440, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.total_days": [[434, "polars-expr-dt-total-days"]], "polars.Expr.fill_nan": [[457, "polars-expr-fill-nan"]], "polars.Expr.dt.round": [[427, "polars-expr-dt-round"]], "polars.Expr.dt.month": [[418, "polars-expr-dt-month"]], "polars.Expr.dt.timestamp": [[432, "polars-expr-dt-timestamp"]], "polars.Expr.exp": [[454, "polars-expr-exp"]], "polars.Expr.extend_constant": [[456, "polars-expr-extend-constant"]], "polars.Expr.dt.time": [[431, "polars-expr-dt-time"]], "polars.Expr.eq_missing": [[448, "polars-expr-eq-missing"]], "polars.Expr.dt.ordinal_day": [[424, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.week": [[442, "polars-expr-dt-week"]], "polars.Expr.explode": [[455, "polars-expr-explode"]], "polars.Expr.dt.nanosecond": [[421, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.total_microseconds": [[436, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.replace_time_zone": [[426, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.date": [[401, "polars-expr-dt-date"]], "polars.Expr.arr.var": [[356, "polars-expr-arr-var"]], "polars.Expr.dt.day": [[403, "polars-expr-dt-day"]], "polars.Expr.cbrt": [[368, "polars-expr-cbrt"]], "polars.Expr.bottom_k": [[363, "polars-expr-bottom-k"]], "polars.Expr.clip": [[370, "polars-expr-clip"]], "polars.Expr.arr.sum": [[352, "polars-expr-arr-sum"]], "polars.Expr.arr.std": [[351, "polars-expr-arr-std"]], "polars.Expr.dt.convert_time_zone": [[400, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cat.set_ordering": [[367, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.cast_time_unit": [[397, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.to_list": [[353, "polars-expr-arr-to-list"]], "polars.Expr.diff": [[391, "polars-expr-diff"]], "polars.Expr.cum_count": [[377, "polars-expr-cum-count"]], "polars.Expr.cum_sum": [[381, "polars-expr-cum-sum"]], "polars.Expr.drop_nulls": [[394, "polars-expr-drop-nulls"]], "polars.Expr.arr.shift": [[349, "polars-expr-arr-shift"]], "polars.Expr.dt.century": [[398, "polars-expr-dt-century"]], "polars.Expr.bin.contains": [[358, "polars-expr-bin-contains"]], "polars.Expr.bottom_k_by": [[364, "polars-expr-bottom-k-by"]], "polars.Expr.dt.combine": [[399, "polars-expr-dt-combine"]], "polars.Expr.cummin": [[384, "polars-expr-cummin"]], "polars.Expr.cumcount": [[382, "polars-expr-cumcount"]], "polars.Expr.arr.to_struct": [[354, "polars-expr-arr-to-struct"]], "polars.Expr.cumsum": [[386, "polars-expr-cumsum"]], "polars.Expr.clip_max": [[371, "polars-expr-clip-max"]], "polars.Expr.count": [[376, "polars-expr-count"]], "polars.Expr.bin.decode": [[359, "polars-expr-bin-decode"]], "polars.Expr.cum_max": [[378, "polars-expr-cum-max"]], "polars.Expr.cum_min": [[379, "polars-expr-cum-min"]], "polars.Expr.cum_prod": [[380, "polars-expr-cum-prod"]], "polars.Expr.dt.base_utc_offset": [[396, "polars-expr-dt-base-utc-offset"]], "polars.Expr.ceil": [[369, "polars-expr-ceil"]], "polars.Expr.cut": [[388, "polars-expr-cut"]], "polars.Expr.arr.sort": [[350, "polars-expr-arr-sort"]], "polars.Expr.clip_min": [[372, "polars-expr-clip-min"]], "polars.Expr.bin.ends_with": [[361, "polars-expr-bin-ends-with"]], "polars.Expr.backward_fill": [[357, "polars-expr-backward-fill"]], "polars.Expr.deserialize": [[390, "polars-expr-deserialize"]], "polars.Expr.cast": [[365, "polars-expr-cast"]], "polars.Expr.dt.add_business_days": [[395, "polars-expr-dt-add-business-days"]], "polars.Expr.cummax": [[383, "polars-expr-cummax"]], "polars.Expr.cumulative_eval": [[387, "polars-expr-cumulative-eval"]], "polars.Expr.degrees": [[389, "polars-expr-degrees"]], "polars.Expr.dt.datetime": [[402, "polars-expr-dt-datetime"]], "polars.Expr.arr.reverse": [[348, "polars-expr-arr-reverse"]], "polars.Expr.bin.starts_with": [[362, "polars-expr-bin-starts-with"]], "polars.Expr.dot": [[392, "polars-expr-dot"]], "polars.Expr.bin.encode": [[360, "polars-expr-bin-encode"]], "polars.Expr.arr.unique": [[355, "polars-expr-arr-unique"]], "polars.Expr.cot": [[375, "polars-expr-cot"]], "polars.Expr.cumprod": [[385, "polars-expr-cumprod"]], "polars.Expr.drop_nans": [[393, "polars-expr-drop-nans"]], "polars.Expr.dt.dst_offset": [[405, "polars-expr-dt-dst-offset"]], "polars.Expr.cat.get_categories": [[366, "polars-expr-cat-get-categories"]], "polars.Expr.cos": [[373, "polars-expr-cos"]], "polars.Expr.cosh": [[374, "polars-expr-cosh"]], "polars.Expr.dt.days": [[404, "polars-expr-dt-days"]], "polars.DataFrame.to_torch": [[267, "polars-dataframe-to-torch"]], "polars.DataFrame.to_struct": [[266, "polars-dataframe-to-struct"]], "polars.DataFrame.to_init_repr": [[261, "polars-dataframe-to-init-repr"]], "polars.dataframe.group_by.GroupBy.agg": [[283, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.apply": [[285, "polars-dataframe-group-by-groupby-apply"]], "polars.DataFrame.take_every": [[256, "polars-dataframe-take-every"]], "polars.DataFrame.unnest": [[271, "polars-dataframe-unnest"]], "polars.DataFrame.tail": [[255, "polars-dataframe-tail"]], "polars.DataFrame.to_dicts": [[259, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_arrow": [[257, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_jax": [[262, "polars-dataframe-to-jax"]], "polars.DataFrame.select": [[241, "polars-dataframe-select"]], "polars.dataframe.group_by.GroupBy.__iter__": [[282, "polars-dataframe-group-by-groupby-iter"]], "polars.dataframe.group_by.GroupBy.count": [[286, "polars-dataframe-group-by-groupby-count"]], "polars.DataFrame.reverse": [[234, "polars-dataframe-reverse"]], "polars.DataFrame.with_row_index": [[281, "polars-dataframe-with-row-index"]], "polars.DataFrame.shape": [[245, "polars-dataframe-shape"]], "polars.DataFrame.select_seq": [[242, "polars-dataframe-select-seq"]], "polars.DataFrame.to_dummies": [[260, "polars-dataframe-to-dummies"]], "polars.DataFrame.unstack": [[272, "polars-dataframe-unstack"]], "polars.DataFrame.slice": [[249, "polars-dataframe-slice"]], "polars.DataFrame.sum_horizontal": [[254, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.with_row_count": [[280, "polars-dataframe-with-row-count"]], "polars.DataFrame.unique": [[270, "polars-dataframe-unique"]], "polars.dataframe.group_by.GroupBy.head": [[288, "polars-dataframe-group-by-groupby-head"]], "polars.DataFrame.top_k": [[268, "polars-dataframe-top-k"]], "polars.DataFrame.shift": [[246, "polars-dataframe-shift"]], "polars.DataFrame.sum": [[253, "polars-dataframe-sum"]], "polars.DataFrame.vstack": [[276, "polars-dataframe-vstack"]], "polars.dataframe.group_by.GroupBy.first": [[287, "polars-dataframe-group-by-groupby-first"]], "polars.DataFrame.to_numpy": [[263, "polars-dataframe-to-numpy"]], "polars.DataFrame.shrink_to_fit": [[248, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_series": [[265, "polars-dataframe-to-series"]], "polars.DataFrame.rows": [[237, "polars-dataframe-rows"]], "polars.DataFrame.serialize": [[243, "polars-dataframe-serialize"]], "polars.dataframe.group_by.GroupBy.all": [[284, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.to_dict": [[258, "polars-dataframe-to-dict"]], "polars.DataFrame.std": [[252, "polars-dataframe-std"]], "polars.DataFrame.sql": [[251, "polars-dataframe-sql"]], "polars.DataFrame.update": [[273, "polars-dataframe-update"]], "polars.DataFrame.rolling": [[235, "polars-dataframe-rolling"]], "polars.DataFrame.replace_at_idx": [[232, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.transpose": [[269, "polars-dataframe-transpose"]], "polars.DataFrame.with_columns_seq": [[279, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.with_columns": [[278, "polars-dataframe-with-columns"]], "polars.DataFrame.var": [[275, "polars-dataframe-var"]], "polars.DataFrame.sample": [[239, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[240, "polars-dataframe-schema"]], "polars.DataFrame.width": [[277, "polars-dataframe-width"]], "polars.DataFrame.replace_column": [[233, "polars-dataframe-replace-column"]], "polars.DataFrame.rows_by_key": [[238, "polars-dataframe-rows-by-key"]], "polars.DataFrame.set_sorted": [[244, "polars-dataframe-set-sorted"]], "polars.DataFrame.sort": [[250, "polars-dataframe-sort"]], "polars.DataFrame.to_pandas": [[264, "polars-dataframe-to-pandas"]], "polars.DataFrame.upsample": [[274, "polars-dataframe-upsample"]], "polars.dataframe.group_by.GroupBy.last": [[289, "polars-dataframe-group-by-groupby-last"]], "polars.DataFrame.shift_and_fill": [[247, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.row": [[236, "polars-dataframe-row"]], "polars.LazyFrame.collect_async": [[835, "polars-lazyframe-collect-async"]], "polars.LazyFrame.approx_n_unique": [[828, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.groupby_dynamic": [[855, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.head": [[857, "polars-lazyframe-head"]], "polars.LazyFrame.median": [[869, "polars-lazyframe-median"]], "polars.LazyFrame.deserialize": [[839, "polars-lazyframe-deserialize"]], "polars.LazyFrame.explain": [[843, "polars-lazyframe-explain"]], "Python API reference": [[825, "python-api-reference"]], "polars.LazyFrame.dtypes": [[842, "polars-lazyframe-dtypes"]], "polars.LazyFrame.group_by_rolling": [[853, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.inspect": [[858, "polars-lazyframe-inspect"]], "polars.LazyFrame.group_by": [[851, "polars-lazyframe-group-by"]], "polars.LazyFrame.map": [[865, "polars-lazyframe-map"]], "polars.LazyFrame.mean": [[868, "polars-lazyframe-mean"]], "polars.LazyFrame.fill_nan": [[846, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.fill_null": [[847, "polars-lazyframe-fill-null"]], "polars.LazyFrame.clear": [[832, "polars-lazyframe-clear"]], "polars.LazyFrame.drop_nulls": [[841, "polars-lazyframe-drop-nulls"]], "Meta": [[815, "meta"]], "polars.LazyFrame.first": [[849, "polars-lazyframe-first"]], "polars.LazyFrame.join_asof": [[861, "polars-lazyframe-join-asof"]], "polars.LazyFrame.count": [[837, "polars-lazyframe-count"]], "polars.LazyFrame.lazy": [[863, "polars-lazyframe-lazy"]], "Conversion": [[824, "conversion"]], "Parallelization": [[824, "parallelization"]], "Random": [[824, "random"]], "StringCache": [[824, "stringcache"]], "polars.LazyFrame.groupby_rolling": [[856, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.cast": [[831, "polars-lazyframe-cast"]], "polars.LazyFrame.limit": [[864, "polars-lazyframe-limit"]], "Expressions": [[813, "expressions"]], "polars.LazyFrame.drop": [[840, "polars-lazyframe-drop"]], "polars.LazyFrame.bottom_k": [[829, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.collect": [[834, "polars-lazyframe-collect"]], "polars.LazyFrame.join": [[860, "polars-lazyframe-join"]], "polars.LazyFrame.map_batches": [[866, "polars-lazyframe-map-batches"]], "polars.LazyFrame.explode": [[844, "polars-lazyframe-explode"]], "polars.LazyFrame.interpolate": [[859, "polars-lazyframe-interpolate"]], "Operators": [[819, "operators"]], "Conjunction": [[819, "conjunction"]], "Comparison": [[819, "comparison"]], "Numeric": [[819, "numeric"], [309, "numeric"]], "Window": [[823, "window"]], "polars.LazyFrame.group_by_dynamic": [[852, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.filter": [[848, "polars-lazyframe-filter"]], "polars.LazyFrame.clone": [[833, "polars-lazyframe-clone"]], "polars.LazyFrame.fetch": [[845, "polars-lazyframe-fetch"]], "polars.LazyFrame.describe": [[838, "polars-lazyframe-describe"]], "polars.LazyFrame.max": [[867, "polars-lazyframe-max"]], "Name": [[818, "name"]], "polars.LazyFrame.groupby": [[854, "polars-lazyframe-groupby"]], "polars.LazyFrame.last": [[862, "polars-lazyframe-last"]], "Input/output": [[826, "input-output"]], "Avro": [[826, "avro"]], "Clipboard": [[826, "clipboard"]], "CSV": [[826, "csv"]], "Database": [[826, "database"]], "Delta Lake": [[826, "delta-lake"]], "Excel / ODS": [[826, "excel-ods"]], "Feather / IPC": [[826, "feather-ipc"]], "Iceberg": [[826, "iceberg"]], "JSON": [[826, "json"]], "Parquet": [[826, "parquet"]], "PyArrow Datasets": [[826, "pyarrow-datasets"]], "polars.LazyFrame.cache": [[830, "polars-lazyframe-cache"]], "polars.LazyFrame.gather_every": [[850, "polars-lazyframe-gather-every"]], "polars.LazyFrame.columns": [[836, "polars-lazyframe-columns"]], "polars.Expr.any": [[318, "polars-expr-any"]], "polars.Expr.arctan": [[326, "polars-expr-arctan"]], "Data types": [[309, "data-types"]], "DataType": [[309, "datatype"]], "Nested": [[309, "nested"]], "Other": [[309, "other"]], "polars.dataframe.group_by.GroupBy.n_unique": [[296, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.approx_n_unique": [[321, "polars-expr-approx-n-unique"]], "polars.Expr.arccos": [[322, "polars-expr-arccos"]], "polars.Expr.arr.first": [[340, "polars-expr-arr-first"]], "DataFrame": [[305, "dataframe"]], "polars.dataframe.group_by.GroupBy.median": [[294, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.len": [[290, "polars-dataframe-group-by-groupby-len"]], "polars.dataframe.group_by.GroupBy.tail": [[299, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arr.arg_max": [[335, "polars-expr-arr-arg-max"]], "polars.Expr.arr.count_matches": [[338, "polars-expr-arr-count-matches"]], "polars.dataframe.group_by.GroupBy.map_groups": [[291, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arr.contains": [[337, "polars-expr-arr-contains"]], "polars.Expr.arr.join": [[342, "polars-expr-arr-join"]], "polars.Expr.apply": [[320, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.max": [[292, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arr.median": [[345, "polars-expr-arr-median"]], "polars.dataframe.group_by.GroupBy.quantile": [[297, "polars-dataframe-group-by-groupby-quantile"]], "polars.Expr.arg_min": [[329, "polars-expr-arg-min"]], "polars.Expr.arr.all": [[333, "polars-expr-arr-all"]], "polars.dataframe.group_by.GroupBy.min": [[295, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.and_": [[317, "polars-expr-and"]], "polars.Expr.alias": [[315, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.sum": [[298, "polars-dataframe-group-by-groupby-sum"]], "Exceptions": [[310, "exceptions"]], "polars.Expr.abs": [[312, "polars-expr-abs"]], "polars.Expr.arr.get": [[341, "polars-expr-arr-get"]], "polars.Expr.arr.last": [[343, "polars-expr-arr-last"]], "polars.Expr.arr.min": [[346, "polars-expr-arr-min"]], "polars.Expr.arr.max": [[344, "polars-expr-arr-max"]], "polars.Expr.arg_true": [[331, "polars-expr-arg-true"]], "polars.Expr.all": [[316, "polars-expr-all"]], "polars.Expr.arg_max": [[328, "polars-expr-arg-max"]], "polars.Expr.arr.arg_min": [[336, "polars-expr-arr-arg-min"]], "polars.Expr.arccosh": [[323, "polars-expr-arccosh"]], "polars.Expr.agg_groups": [[314, "polars-expr-agg-groups"]], "polars.Expr.add": [[313, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.mean": [[293, "polars-dataframe-group-by-groupby-mean"]], "polars.Expr.arcsin": [[324, "polars-expr-arcsin"]], "polars.Expr.arr.n_unique": [[347, "polars-expr-arr-n-unique"]], "polars.Expr.arcsinh": [[325, "polars-expr-arcsinh"]], "polars.Expr.arctanh": [[327, "polars-expr-arctanh"]], "polars.Expr.arg_sort": [[330, "polars-expr-arg-sort"]], "polars.Expr.arg_unique": [[332, "polars-expr-arg-unique"]], "polars.Expr.append": [[319, "polars-expr-append"]], "polars.Expr.arr.explode": [[339, "polars-expr-arr-explode"]], "polars.Expr.arr.any": [[334, "polars-expr-arr-any"]]}, "indexentries": {"activate_decimals() (polars.config class method)": [[2, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[3, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[4, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[7, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[9, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[10, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[31, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[32, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[33, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[34, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[35, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[36, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[37, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[39, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[40, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[41, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[42, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_parquet"]], "stringcache (class in polars)": [[47, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[47, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[48, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[49, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[50, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[51, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[52, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[53, "polars.build_info"]], "collect_all() (in module polars)": [[54, "polars.collect_all"]], "collect_all_async() (in module polars)": [[55, "polars.collect_all_async"]], "concat() (in module polars)": [[56, "polars.concat"]], "array (class in polars.datatypes)": [[57, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[57, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[58, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[58, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[59, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[59, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[60, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[60, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[61, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[61, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[62, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[62, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[63, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[63, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[64, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[64, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[65, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[65, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[66, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[66, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[67, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[67, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[68, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[68, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[69, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[69, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[70, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[70, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[71, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[71, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[72, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[72, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[73, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[73, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[74, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[74, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[75, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[75, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[76, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[76, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[77, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[77, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[78, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[78, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[79, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[79, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[80, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[80, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[81, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[81, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[82, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[82, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[83, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[83, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[84, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[85, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[86, "polars.enable_string_cache"]], "arrowerror": [[87, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[88, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[89, "polars.exceptions.ComputeError"]], "duplicateerror": [[90, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[91, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[92, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[93, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[94, "polars.exceptions.PolarsError"]], "polarspanicerror": [[95, "polars.exceptions.PolarsPanicError"]], "rowserror": [[96, "polars.exceptions.RowsError"]], "schemaerror": [[97, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[98, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[99, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[100, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[101, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[102, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[103, "polars.from_dataframe"]], "from_dict() (in module polars)": [[104, "polars.from_dict"]], "from_dicts() (in module polars)": [[105, "polars.from_dicts"]], "from_numpy() (in module polars)": [[106, "polars.from_numpy"]], "from_pandas() (in module polars)": [[107, "polars.from_pandas"]], "from_records() (in module polars)": [[108, "polars.from_records"]], "from_repr() (in module polars)": [[109, "polars.from_repr"]], "get_index_type() (in module polars)": [[110, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[111, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[112, "polars.read_avro"]], "read_clipboard() (in module polars)": [[113, "polars.read_clipboard"]], "read_csv() (in module polars)": [[114, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[115, "polars.read_csv_batched"]], "read_database() (in module polars)": [[116, "polars.read_database"]], "read_database_uri() (in module polars)": [[117, "polars.read_database_uri"]], "read_delta() (in module polars)": [[118, "polars.read_delta"]], "read_excel() (in module polars)": [[119, "polars.read_excel"]], "read_ipc() (in module polars)": [[120, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[121, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[122, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[123, "polars.read_json"]], "read_ndjson() (in module polars)": [[124, "polars.read_ndjson"]], "read_ods() (in module polars)": [[125, "polars.read_ods"]], "read_parquet() (in module polars)": [[126, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[127, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[128, "polars.scan_csv"]], "scan_delta() (in module polars)": [[129, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[130, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[131, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[132, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[133, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[134, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[135, "polars.set_random_seed"]], "show_versions() (in module polars)": [[136, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[137, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[139, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[141, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[141, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[150, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[151, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[152, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[155, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[156, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[157, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[158, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[159, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[160, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[161, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[162, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[163, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[164, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[165, "polars.DataFrame.describe"]], "deserialize() (polars.dataframe class method)": [[166, "polars.DataFrame.deserialize"]], "drop() (polars.dataframe method)": [[167, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[168, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[169, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[170, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[171, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[172, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[173, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[174, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[175, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[176, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[177, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[178, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[179, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[180, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[181, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[182, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[183, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[184, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[185, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[186, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[187, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[188, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[189, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[190, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[191, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[192, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[193, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[194, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[195, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[196, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[197, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[198, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[199, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[200, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[201, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[202, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[203, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[204, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[205, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[206, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[207, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[208, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[209, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[210, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[211, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[212, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[214, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[215, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[216, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[217, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[218, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[219, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[221, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[222, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[223, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[224, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[225, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[226, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[227, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[228, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[229, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[230, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[231, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[232, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[233, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[234, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[235, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[236, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[237, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[238, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[239, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[240, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[241, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[242, "polars.DataFrame.select_seq"]], "serialize() (polars.dataframe method)": [[243, "polars.DataFrame.serialize"]], "set_sorted() (polars.dataframe method)": [[244, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[245, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[246, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[247, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[248, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[249, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[250, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[251, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[252, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[253, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[254, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[255, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[256, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[257, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[258, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[259, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[260, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[261, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[262, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[263, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[264, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[265, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[266, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[267, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[268, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[269, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[270, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[271, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[272, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[273, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[274, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[275, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[276, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[277, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[278, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[279, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[280, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[281, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[312, "polars.Expr.abs"]], "add() (polars.expr method)": [[313, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[314, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[315, "polars.Expr.alias"]], "all() (polars.expr method)": [[316, "polars.Expr.all"]], "and_() (polars.expr method)": [[317, "polars.Expr.and_"]], "any() (polars.expr method)": [[318, "polars.Expr.any"]], "append() (polars.expr method)": [[319, "polars.Expr.append"]], "apply() (polars.expr method)": [[320, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[321, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[322, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[323, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[324, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[325, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[326, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[327, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[328, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[329, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[330, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[331, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[332, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[333, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[334, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[335, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[336, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[337, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[338, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[339, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[340, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[341, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[342, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[343, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[344, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[345, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[346, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[347, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[348, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[349, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[350, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[351, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[352, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[353, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[354, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[355, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[356, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[357, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[358, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[359, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[360, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[361, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[362, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[363, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[364, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[365, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[366, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[367, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[368, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[369, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[370, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[371, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[372, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[373, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[374, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[375, "polars.Expr.cot"]], "count() (polars.expr method)": [[376, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[377, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[378, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[379, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[380, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[381, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[382, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[383, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[384, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[385, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[386, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[387, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[388, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[389, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[390, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[391, "polars.Expr.diff"]], "dot() (polars.expr method)": [[392, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[393, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[394, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[395, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[396, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[397, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[398, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[399, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[400, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[401, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[402, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[403, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[404, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[405, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[406, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[407, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[408, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[409, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[410, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[411, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[412, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[413, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[414, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[415, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[416, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[417, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[418, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[419, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[420, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[421, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[422, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[423, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[424, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[425, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[426, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[427, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[428, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[429, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[430, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[431, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[432, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[433, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[434, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[435, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[436, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[437, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[441, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[442, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[443, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[444, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[445, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[446, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[447, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[448, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[449, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[450, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[451, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[452, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[453, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[454, "polars.Expr.exp"]], "explode() (polars.expr method)": [[455, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[456, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[457, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[458, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[459, "polars.Expr.filter"]], "first() (polars.expr method)": [[460, "polars.Expr.first"]], "flatten() (polars.expr method)": [[461, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[462, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[463, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[464, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[465, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[466, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[467, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[468, "polars.Expr.ge"]], "get() (polars.expr method)": [[469, "polars.Expr.get"]], "gt() (polars.expr method)": [[470, "polars.Expr.gt"]], "has_nulls() (polars.expr method)": [[471, "polars.Expr.has_nulls"]], "hash() (polars.expr method)": [[472, "polars.Expr.hash"]], "head() (polars.expr method)": [[473, "polars.Expr.head"]], "hist() (polars.expr method)": [[474, "polars.Expr.hist"]], "implode() (polars.expr method)": [[475, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[476, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[477, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[478, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[479, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[480, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[481, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[482, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[483, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[484, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[485, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[486, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[487, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[488, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[489, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[490, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[491, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[492, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[493, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[494, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[495, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[496, "polars.Expr.last"]], "le() (polars.expr method)": [[497, "polars.Expr.le"]], "len() (polars.expr method)": [[498, "polars.Expr.len"]], "limit() (polars.expr method)": [[499, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[500, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[501, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[502, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[503, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[504, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[505, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[506, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[507, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[508, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[509, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[510, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[511, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[512, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[513, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[514, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[515, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[516, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[517, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[518, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[519, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[520, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[521, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[522, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[523, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[524, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[525, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[526, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[527, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[528, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[529, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[530, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[531, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[532, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[533, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[534, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[535, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[536, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[537, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[538, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[539, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[540, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[541, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[542, "polars.Expr.list.var"]], "log() (polars.expr method)": [[543, "polars.Expr.log"]], "log10() (polars.expr method)": [[544, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[545, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[546, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[547, "polars.Expr.lt"]], "map() (polars.expr method)": [[548, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[549, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[550, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[551, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[552, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[553, "polars.Expr.max"]], "mean() (polars.expr method)": [[554, "polars.Expr.mean"]], "median() (polars.expr method)": [[555, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[556, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[557, "polars.Expr.meta.has_multiple_outputs"]], "is_column_selection() (polars.expr.meta method)": [[558, "polars.Expr.meta.is_column_selection"]], "is_regex_projection() (polars.expr.meta method)": [[559, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[560, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[561, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[562, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[563, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[564, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[565, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[566, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[567, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[568, "polars.Expr.min"]], "mod() (polars.expr method)": [[569, "polars.Expr.mod"]], "mode() (polars.expr method)": [[570, "polars.Expr.mode"]], "mul() (polars.expr method)": [[571, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[572, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[573, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[574, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[575, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[576, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[577, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[578, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[579, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[580, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[581, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[582, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[583, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[584, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[585, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[586, "polars.Expr.neg"]], "not_() (polars.expr method)": [[587, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[588, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[589, "polars.Expr.or_"]], "over() (polars.expr method)": [[590, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[591, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[592, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[593, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[594, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[595, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[596, "polars.Expr.prefix"]], "product() (polars.expr method)": [[597, "polars.Expr.product"]], "qcut() (polars.expr method)": [[598, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[599, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[600, "polars.Expr.radians"]], "rank() (polars.expr method)": [[601, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[602, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[603, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[604, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[605, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[606, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[607, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[608, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[609, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[610, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[611, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[612, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[613, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[614, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[615, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[616, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[617, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[618, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[619, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[620, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[621, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[622, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[623, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[624, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[625, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[626, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[627, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[628, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[629, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[630, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[631, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[632, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[633, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[634, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[635, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[636, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[637, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[638, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[639, "polars.Expr.sign"]], "sin() (polars.expr method)": [[640, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[641, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[642, "polars.Expr.skew"]], "slice() (polars.expr method)": [[643, "polars.Expr.slice"]], "sort() (polars.expr method)": [[644, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[645, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[646, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[647, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[648, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[649, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[650, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[651, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[652, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[653, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[654, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[655, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[656, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[657, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[658, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[659, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[660, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[661, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[662, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[663, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[664, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[665, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[666, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[667, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[668, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[669, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[670, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[671, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[672, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[673, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[674, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[675, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[676, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[677, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[678, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[679, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[680, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[681, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[682, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[683, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[684, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[685, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[686, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[687, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[688, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[689, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[690, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[691, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[692, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[693, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[694, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[695, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[696, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[697, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[698, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[699, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[700, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[701, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[702, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[703, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[704, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[705, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[706, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[707, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[708, "polars.Expr.sum"]], "tail() (polars.expr method)": [[709, "polars.Expr.tail"]], "take() (polars.expr method)": [[710, "polars.Expr.take"]], "take_every() (polars.expr method)": [[711, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[712, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[713, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[714, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[715, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[716, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[717, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[718, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[719, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[720, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[721, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[722, "polars.Expr.var"]], "where() (polars.expr method)": [[723, "polars.Expr.where"]], "xor() (polars.expr method)": [[724, "polars.Expr.xor"]], "all() (in module polars)": [[725, "polars.all"]], "all_horizontal() (in module polars)": [[726, "polars.all_horizontal"]], "any() (in module polars)": [[727, "polars.any"]], "any_horizontal() (in module polars)": [[728, "polars.any_horizontal"]], "apply() (in module polars)": [[729, "polars.apply"]], "approx_n_unique() (in module polars)": [[730, "polars.approx_n_unique"]], "arange() (in module polars)": [[731, "polars.arange"]], "arctan2() (in module polars)": [[732, "polars.arctan2"]], "arctan2d() (in module polars)": [[733, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[734, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[735, "polars.arg_where"]], "business_day_count() (in module polars)": [[736, "polars.business_day_count"]], "coalesce() (in module polars)": [[737, "polars.coalesce"]], "concat_list() (in module polars)": [[738, "polars.concat_list"]], "concat_str() (in module polars)": [[739, "polars.concat_str"]], "corr() (in module polars)": [[740, "polars.corr"]], "count() (in module polars)": [[741, "polars.count"]], "cov() (in module polars)": [[742, "polars.cov"]], "cum_count() (in module polars)": [[743, "polars.cum_count"]], "cum_fold() (in module polars)": [[744, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[745, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[746, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[747, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[748, "polars.cumfold"]], "cumreduce() (in module polars)": [[749, "polars.cumreduce"]], "cumsum() (in module polars)": [[750, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[751, "polars.cumsum_horizontal"]], "date() (in module polars)": [[752, "polars.date"]], "date_range() (in module polars)": [[753, "polars.date_range"]], "date_ranges() (in module polars)": [[754, "polars.date_ranges"]], "datetime() (in module polars)": [[755, "polars.datetime"]], "datetime_range() (in module polars)": [[756, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[757, "polars.datetime_ranges"]], "duration() (in module polars)": [[758, "polars.duration"]], "element() (in module polars)": [[759, "polars.element"]], "exclude() (in module polars)": [[760, "polars.exclude"]], "first() (in module polars)": [[761, "polars.first"]], "fold() (in module polars)": [[762, "polars.fold"]], "format() (in module polars)": [[763, "polars.format"]], "from_epoch() (in module polars)": [[764, "polars.from_epoch"]], "groups() (in module polars)": [[765, "polars.groups"]], "head() (in module polars)": [[766, "polars.head"]], "implode() (in module polars)": [[767, "polars.implode"]], "int_range() (in module polars)": [[768, "polars.int_range"]], "int_ranges() (in module polars)": [[769, "polars.int_ranges"]], "last() (in module polars)": [[770, "polars.last"]], "len() (in module polars)": [[771, "polars.len"]], "lit() (in module polars)": [[772, "polars.lit"]], "map() (in module polars)": [[773, "polars.map"]], "map_batches() (in module polars)": [[774, "polars.map_batches"]], "map_groups() (in module polars)": [[775, "polars.map_groups"]], "max() (in module polars)": [[776, "polars.max"]], "max_horizontal() (in module polars)": [[777, "polars.max_horizontal"]], "mean() (in module polars)": [[778, "polars.mean"]], "mean_horizontal() (in module polars)": [[779, "polars.mean_horizontal"]], "median() (in module polars)": [[780, "polars.median"]], "min() (in module polars)": [[781, "polars.min"]], "min_horizontal() (in module polars)": [[782, "polars.min_horizontal"]], "n_unique() (in module polars)": [[783, "polars.n_unique"]], "nth() (in module polars)": [[784, "polars.nth"]], "ones() (in module polars)": [[785, "polars.ones"]], "quantile() (in module polars)": [[786, "polars.quantile"]], "reduce() (in module polars)": [[787, "polars.reduce"]], "repeat() (in module polars)": [[788, "polars.repeat"]], "rolling_corr() (in module polars)": [[789, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[790, "polars.rolling_cov"]], "select() (in module polars)": [[791, "polars.select"]], "sql() (in module polars)": [[792, "polars.sql"]], "sql_expr() (in module polars)": [[793, "polars.sql_expr"]], "std() (in module polars)": [[794, "polars.std"]], "struct() (in module polars)": [[795, "polars.struct"]], "sum() (in module polars)": [[796, "polars.sum"]], "sum_horizontal() (in module polars)": [[797, "polars.sum_horizontal"]], "tail() (in module polars)": [[798, "polars.tail"]], "time() (in module polars)": [[799, "polars.time"]], "time_range() (in module polars)": [[800, "polars.time_range"]], "time_ranges() (in module polars)": [[801, "polars.time_ranges"]], "var() (in module polars)": [[802, "polars.var"]], "when() (in module polars)": [[803, "polars.when"]], "zeros() (in module polars)": [[804, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[828, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[829, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[830, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[831, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[832, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[833, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[834, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[835, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[836, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[837, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[838, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[839, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[840, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[841, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[842, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[843, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[844, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[845, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[846, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[847, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[848, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[849, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[850, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[851, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[852, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[853, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[854, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[855, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[856, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[857, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[858, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[859, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[860, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[861, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[862, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[863, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[864, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[865, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[866, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[867, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[868, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[869, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[870, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[871, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[872, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[873, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[874, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[875, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[876, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[877, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[878, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[879, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[880, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[881, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[882, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[883, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[884, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[885, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[886, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[887, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[888, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[889, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[890, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[891, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[892, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[893, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[894, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[895, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[896, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[897, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[898, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[899, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[900, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[901, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[902, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[903, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[904, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[905, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[930, "module-polars.plugins"], [931, "module-polars.selectors"]], "polars.plugins": [[930, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[930, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[931, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[931, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[931, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[931, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[931, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[931, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[931, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[931, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[931, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[931, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[931, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[931, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[931, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[931, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[931, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[931, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[931, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[931, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[931, "polars.selectors.first"]], "float() (in module polars.selectors)": [[931, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[931, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[931, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[931, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[931, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[931, "polars.selectors.numeric"]], "polars.selectors": [[931, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[931, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[931, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[931, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[931, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[931, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[931, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[933, "polars.Series.abs"]], "alias() (polars.series method)": [[934, "polars.Series.alias"]], "all() (polars.series method)": [[935, "polars.Series.all"]], "any() (polars.series method)": [[936, "polars.Series.any"]], "append() (polars.series method)": [[937, "polars.Series.append"]], "apply() (polars.series method)": [[938, "polars.Series.apply"]], "arccos() (polars.series method)": [[939, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[940, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[941, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[942, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[943, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[944, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[945, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[946, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[947, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[948, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[949, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[950, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[951, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[952, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[953, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[954, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[955, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[956, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[957, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[958, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[959, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[960, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[961, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[962, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[963, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[964, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[965, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[966, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[967, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[968, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[969, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[970, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[971, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[972, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[973, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[974, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[975, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[976, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[977, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[978, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[979, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[980, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[981, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[982, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[983, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[984, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[985, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[986, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[987, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[988, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[989, "polars.Series.clear"]], "clip() (polars.series method)": [[990, "polars.Series.clip"]], "clip_max() (polars.series method)": [[991, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[992, "polars.Series.clip_min"]], "clone() (polars.series method)": [[993, "polars.Series.clone"]], "cos() (polars.series method)": [[994, "polars.Series.cos"]], "cosh() (polars.series method)": [[995, "polars.Series.cosh"]], "cot() (polars.series method)": [[996, "polars.Series.cot"]], "cum_count() (polars.series method)": [[997, "polars.Series.cum_count"]], "cum_max() (polars.series method)": [[998, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[999, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[1000, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[1001, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[1002, "polars.Series.cummax"]], "cummin() (polars.series method)": [[1003, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[1004, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[1005, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[1006, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[1007, "polars.Series.cut"]], "describe() (polars.series method)": [[1008, "polars.Series.describe"]], "diff() (polars.series method)": [[1009, "polars.Series.diff"]], "dot() (polars.series method)": [[1010, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[1011, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[1012, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[1013, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[1014, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[1015, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[1016, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[1017, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[1018, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[1019, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[1020, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[1021, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[1022, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[1023, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[1024, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[1025, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[1026, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1027, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1028, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1029, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1030, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1031, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1032, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1033, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1034, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1035, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1036, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1037, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1038, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1039, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1040, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1041, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1042, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1043, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1044, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1045, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1046, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1047, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1048, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1049, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1050, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1051, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1052, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1053, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1054, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1055, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1056, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1057, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1058, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1059, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1060, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1061, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1062, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1063, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1064, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1065, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1066, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1067, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1068, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1069, "polars.Series.entropy"]], "equals() (polars.series method)": [[1070, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1071, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1072, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1073, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1074, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1075, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1076, "polars.Series.exp"]], "explode() (polars.series method)": [[1077, "polars.Series.explode"]], "extend() (polars.series method)": [[1078, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1079, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1080, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1081, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1082, "polars.Series.filter"]], "flags (polars.series attribute)": [[1083, "polars.Series.flags"]], "floor() (polars.series method)": [[1084, "polars.Series.floor"]], "gather() (polars.series method)": [[1085, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1086, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1087, "polars.Series.get_chunks"]], "has_nulls() (polars.series method)": [[1088, "polars.Series.has_nulls"]], "has_validity() (polars.series method)": [[1089, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1090, "polars.Series.hash"]], "head() (polars.series method)": [[1091, "polars.Series.head"]], "hist() (polars.series method)": [[1092, "polars.Series.hist"]], "implode() (polars.series method)": [[1093, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1094, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1095, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1096, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1097, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1098, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1099, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1100, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1101, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1102, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1103, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1104, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1105, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1106, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1107, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1108, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1109, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1110, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1111, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1112, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1113, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1114, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1115, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1116, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1117, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1118, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1119, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1120, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1121, "polars.Series.len"]], "limit() (polars.series method)": [[1122, "polars.Series.limit"]], "all() (polars.series.list method)": [[1123, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1124, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1125, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1126, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1127, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1128, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1129, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1130, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1131, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1132, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1133, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1134, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1135, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1136, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1137, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1138, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1139, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1140, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1141, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1142, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1143, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1144, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1145, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1146, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1147, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1148, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1149, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1150, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1151, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1152, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1153, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1154, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1155, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1156, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1157, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1158, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1159, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1160, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1161, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1162, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1163, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1164, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1165, "polars.Series.list.var"]], "log() (polars.series method)": [[1166, "polars.Series.log"]], "log10() (polars.series method)": [[1167, "polars.Series.log10"]], "log1p() (polars.series method)": [[1168, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1169, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1170, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1171, "polars.Series.map_elements"]], "max() (polars.series method)": [[1172, "polars.Series.max"]], "mean() (polars.series method)": [[1173, "polars.Series.mean"]], "median() (polars.series method)": [[1174, "polars.Series.median"]], "min() (polars.series method)": [[1175, "polars.Series.min"]], "mode() (polars.series method)": [[1176, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1177, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1178, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1179, "polars.Series.name"]], "nan_max() (polars.series method)": [[1180, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1181, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1182, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1183, "polars.Series.not_"]], "null_count() (polars.series method)": [[1184, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1185, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1186, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1187, "polars.Series.peak_min"]], "product() (polars.series method)": [[1188, "polars.Series.product"]], "qcut() (polars.series method)": [[1189, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1190, "polars.Series.quantile"]], "rank() (polars.series method)": [[1191, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1192, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1193, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1194, "polars.Series.rename"]], "replace() (polars.series method)": [[1195, "polars.Series.replace"]], "reshape() (polars.series method)": [[1196, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1197, "polars.Series.reverse"]], "rle() (polars.series method)": [[1198, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1199, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1200, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1201, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1202, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1203, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1204, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1205, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1206, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1207, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1208, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1209, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1210, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1211, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1212, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1213, "polars.Series.sample"]], "scatter() (polars.series method)": [[1214, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1215, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1216, "polars.Series.series_equal"]], "set() (polars.series method)": [[1217, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1218, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1219, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1220, "polars.Series.shape"]], "shift() (polars.series method)": [[1221, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1222, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1223, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1224, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1225, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1226, "polars.Series.sign"]], "sin() (polars.series method)": [[1227, "polars.Series.sin"]], "sinh() (polars.series method)": [[1228, "polars.Series.sinh"]], "skew() (polars.series method)": [[1229, "polars.Series.skew"]], "slice() (polars.series method)": [[1230, "polars.Series.slice"]], "sort() (polars.series method)": [[1231, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1232, "polars.Series.sqrt"]], "std() (polars.series method)": [[1233, "polars.Series.std"]], "concat() (polars.series.str method)": [[1234, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1235, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1236, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1237, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1238, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1239, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1240, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1241, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1242, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1243, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1244, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1245, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1246, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1247, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1248, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1249, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1250, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1251, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1252, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1253, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1254, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1255, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1256, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1257, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1258, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1259, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1260, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1261, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1262, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1263, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1264, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1265, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1266, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1267, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1268, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1269, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1270, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1271, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1272, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1273, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1274, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1275, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1276, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1277, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1278, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1279, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1280, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1281, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1282, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1283, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1284, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1285, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1286, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1287, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1288, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1289, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1290, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1291, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1292, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1293, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1294, "polars.Series.sum"]], "tail() (polars.series method)": [[1295, "polars.Series.tail"]], "take() (polars.series method)": [[1296, "polars.Series.take"]], "take_every() (polars.series method)": [[1297, "polars.Series.take_every"]], "tan() (polars.series method)": [[1298, "polars.Series.tan"]], "tanh() (polars.series method)": [[1299, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1300, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1301, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1302, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1303, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1304, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1305, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1306, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1307, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1308, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1309, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1310, "polars.Series.top_k"]], "unique() (polars.series method)": [[1311, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1312, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1313, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1314, "polars.Series.value_counts"]], "var() (polars.series method)": [[1315, "polars.Series.var"]], "view() (polars.series method)": [[1316, "polars.Series.view"]], "zip_with() (polars.series method)": [[1317, "polars.Series.zip_with"]], "execute() (polars.sqlcontext method)": [[1334, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[1335, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[1336, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[1337, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[1338, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[1339, "polars.SQLContext.unregister"]], "sqlcontext (class in polars)": [[1350, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1350, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1350, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1350, "polars.SQLContext.__init__"]]}})